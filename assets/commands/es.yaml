admin_openrc: |
  #!/bin/sh
  for i in `env | grep OS_ | awk -F= '{print $1}'`; do unset $i; done
  export OS_IDENTITY_API_VERSION=3
  export OS_PROJECT_DOMAIN_NAME="Default"
  export OS_PROJECT_NAME="admin"
  export OS_USER_DOMAIN_NAME="Default"
  export OS_USERNAME="admin"
  export OS_PASSWORD="Admin@ES20!8"
  export OS_AUTH_URL='http://keystone-api.openstack.svc.cluster.local/v3'
  export OS_REGION_NAME="RegionOne"
  export OS_ENDPOINT_TYPE='adminURL'
  export OS_INTERFACE='adminURL'

  # When neutron client returns non-ascii character and stdout is piped or
  # redirected, it would raise an encoding error.
  export PYTHONIOENCODING=UTF-8
alcubierre_disk: |-
  kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o jsonpath="{.items[0].metadata.name}" ) -c manul -- bash -c "kvctl list volume --format object|grep $A"
alcubierre_disk_id: |-
  kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o jsonpath="{.items[0].metadata.name}" ) -c manul -- bash -c "kvctl list volume --format object|grep $A"|grep -Po "alcub_[\w-]+"
alcubierre_create: |-
  disk=`kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o jsonpath="{.items[0].metadata.name}" ) -c manul -- bash -c "kvctl list volume --format object|grep $A"|grep -Po "(?<=id=')alcub_[\w-]+"`;req=`for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o custom-columns=":metadata.name");do kubectl -n alcubierre logs -c manul $p;done|grep "Creating"|grep $disk|tail -n 1|grep -Po "(?<=\[)req-[\w-]*(?= )"`;for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o custom-columns=":metadata.name");do kubectl -n alcubierre logs -c manul $p;done|grep $req;
alcubierre_connect: |-
  disk=`kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o jsonpath="{.items[0].metadata.name}" ) -c manul -- bash -c "kvctl list volume --format object|grep $A"|grep -Po "(?<=id=')alcub_[\w-]+"`;req=`for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o custom-columns=":metadata.name");do kubectl -n alcubierre logs -c manul $p;done|grep "/connections"|grep $disk|tail -n 1|grep -Po "(?<=\[)req-[\w-]*(?= )"`;for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o custom-columns=":metadata.name");do kubectl -n alcubierre logs -c manul $p;done|grep $req;
alcubierre_disconnect: |-
  disk=`kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o jsonpath="{.items[0].metadata.name}" ) -c manul -- bash -c "kvctl list volume --format object|grep $A"|grep -Po "(?<=id=')alcub_[\w-]+"`;req=`for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o custom-columns=":metadata.name");do kubectl -n alcubierre logs -c manul $p;done|grep "/disconnections"|grep $disk|tail -n 1|grep -Po "(?<=\[)req-[\w-]*(?= )"`;for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o custom-columns=":metadata.name");do kubectl -n alcubierre logs -c manul $p;done|grep $req;
alcubierre_delete: |-
  disk=`kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o jsonpath="{.items[0].metadata.name}" ) -c manul -- bash -c "kvctl list volume --format object|grep $A"|grep -Po "(?<=id=')alcub_[\w-]+"`;req=`for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o custom-columns=":metadata.name");do kubectl -n alcubierre logs -c manul $p;done|grep "/volumes"|grep $disk|grep DELETE|tail -n 1|grep -Po "(?<=\[)req-[\w-]*(?= )"`;for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o custom-columns=":metadata.name");do kubectl -n alcubierre logs -c manul $p;done|grep $req;
alcubierre_expand: |-
  disk=`kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o jsonpath="{.items[0].metadata.name}" ) -c manul -- bash -c "kvctl list volume --format object|grep $A"|grep -Po "(?<=id=')alcub_[\w-]+"`;req=`for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o custom-columns=":metadata.name");do kubectl -n alcubierre logs -c manul $p;done|grep "/expansion"|grep $disk|tail -n 1|grep -Po "(?<=\[)req-[\w-]*(?= )"`;for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o custom-columns=":metadata.name");do kubectl -n alcubierre logs -c manul $p;done|grep $req;
alcubierre_snapshot: |-
  disk=`kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o jsonpath="{.items[0].metadata.name}" ) -c manul -- bash -c "kvctl list volume --format object|grep $A"|grep -Po "(?<=id=')alcub_[\w-]+"`;req=`for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o custom-columns=":metadata.name");do kubectl -n alcubierre logs -c manul $p;done|grep "/snapshots"|grep $disk|tail -n 1|grep -Po "(?<=\[)req-[\w-]*(?= )"`;for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o custom-columns=":metadata.name");do kubectl -n alcubierre logs -c manul $p;done|grep $req;
alcubierre_rollback: |-
  disk=`kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o jsonpath="{.items[0].metadata.name}" ) -c manul -- bash -c "kvctl list volume --format object|grep $A"|grep -Po "(?<=id=')alcub_[\w-]+"`;req=`for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o custom-columns=":metadata.name");do kubectl -n alcubierre logs -c manul $p;done|grep "/rollback"|grep $disk|tail -n 1|grep -Po "(?<=\[)req-[\w-]*(?= )"`;for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o custom-columns=":metadata.name");do kubectl -n alcubierre logs -c manul $p;done|grep $req;
alcubierre_clone: |-
  disk=`kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o jsonpath="{.items[0].metadata.name}" ) -c manul -- bash -c "kvctl list volume --format object|grep $A"|grep -Po "(?<=id=')alcub_[\w-]+"`;req=`for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o custom-columns=":metadata.name");do kubectl -n alcubierre logs -c manul $p;done|grep "/clone"|grep $disk|tail -n 1|grep -Po "(?<=\[)req-[\w-]*(?= )"`;for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o custom-columns=":metadata.name");do kubectl -n alcubierre logs -c manul $p;done|grep $req;
benchmark_private_key: |-
  -----BEGIN OPENSSH PRIVATE KEY-----
  b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn
  NhAAAAAwEAAQAAAQEApxjTThTFviuyZtLmoy+ChiNA1oB6GPACaLL/aZM20tXq0EFAEULf
  nu7hMl6h0CT4/rn0/JQ2phV7W5Ut5mcDRDw5ool8blTLHyjo5SPvNXBDwTZkVilugB4Iic
  oo/7V7o+5utJUSpVeLxC3ET6vxKQw610KC6UULRGITjnd31HRpKG5xA6wuUn5pMhQdtD93
  F93LxOfxaRKyDrtApyTyHXzb+MYlLZcg+lSUl2GWiMFHkFpQoByd06e8feJgJ2H6YzvKHj
  ZXBtoxs3Wp4mqDR1qUnPlHARB/1jo+1VEniZtbyNELIi84jgtYmz4WBzcXt+SY7n3MYAx7
  QP60u8viFwAAA9Du7MVL7uzFSwAAAAdzc2gtcnNhAAABAQCnGNNOFMW+K7Jm0uajL4KGI0
  DWgHoY8AJosv9pkzbS1erQQUARQt+e7uEyXqHQJPj+ufT8lDamFXtblS3mZwNEPDmiiXxu
  VMsfKOjlI+81cEPBNmRWKW6AHgiJyij/tXuj7m60lRKlV4vELcRPq/EpDDrXQoLpRQtEYh
  OOd3fUdGkobnEDrC5SfmkyFB20P3cX3cvE5/FpErIOu0CnJPIdfNv4xiUtlyD6VJSXYZaI
  wUeQWlCgHJ3Tp7x94mAnYfpjO8oeNlcG2jGzdaniaoNHWpSc+UcBEH/WOj7VUSeJm1vI0Q
  siLziOC1ibPhYHNxe35JjufcxgDHtA/rS7y+IXAAAAAwEAAQAAAQA8gtP6obEedgqMC/Hz
  xH+6/cc8JpiQsVHeAnxWCja/UTJQqmB+H76FerJYoEZu7wSwkjzyvuWvbXYXq0VM+58GNd
  0VTD6gYdqQ9Sqp2EKHEpmmvYDGZwiaIsYqx+fi+iDFM9IpWRbAg5yctYoy4+xYVhJ046Qu
  v48d+3pjjEX7zHppLMDvf+DN2U730eLUAGH8yHQ3XE9vuKAfW5RB93UYa4S1zPL/dtuHXE
  4q9vnQh7/AADW/dH/Wsf1qXK+WwxkH8hvqC05hBdYyy+Xhx4P5x6GW4VcQlUNKT1Xp0sGf
  3IKtxfaGa03AKBppFKJD7EB2ZrW8giQXs1VZhMb0WXiZAAAAgBQO4QNDfjWjeZ5DFDUpgl
  SfyzI/lTmnCkEtsesICD5ydsPdfc2nGidjBr5IPLdFgQwpqu5mna8lYhL6Wrc0veFhlznX
  xdV5jac1NTzQIySugxzfYEFdspNs+YfXBtyB2hKv3ggngJ6N0Ln8XOn7OHCxsb/yPQbG2E
  DvAx++zSDFAAAAgQDWFyF2W8z0glbi+BcrpKJBS/Y2466vC7iVkDIdtl1vlhBcjXY6E+3k
  tVYxk2TxFmUOVWZqmc0YuQgZoIvCN+yMDyi5FstpOC8haIj7OOUjkMcHkCgDF62hYf64qh
  /HrJkztAFtcfTA7K5ZmymvL0u7PSK2JQgwe8s+VEkQL+UMHQAAAIEAx86uMruf1xBoy+Kr
  6349afLA4QZeBbuCFqBjMXFWghEF0Wp+/lmYYD2eDl6i8lxqAYJRWJ1zZKqYV9xxJFJX7o
  GEZ09UfPQgw/AUA5FKM2uBYdrPq2DSzbe9UVK4AkK/L+YIeCLI3v527pH6zR3axGbrOArc
  PNSWhxLkmlHByMMAAAAWcm9vdEByb2xsZXIuZG9tYWluLnRsZAECAwQF
  -----END OPENSSH PRIVATE KEY-----
check_residual: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l 'application=node_exporter,component=metrics' --no-headers -o jsonpath='{.items[0].metadata.name}' --field-selector spec.nodeName=$(hostname|cut -d. -f1) ) -c node-script-collector -- python /tmp/check_residual_device.py -v
csi_node: "kubectl get node -l 'csi-alcub=enable'"
ctr_import: "i=;gunzip -c $i | ctr -n k8s.io i import -"
ctr_push: "i=;ctr -n k8s.io i push $i -k hub.easystack.io/arm64v8/"
disk_usage: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=libvirt,component=libvirt" --no-headers -o jsonpath="{.items[0].metadata.name}" --field-selector spec.nodeName=$host ) -c libvirt -- bash -c "grep -C 100 ${A} /var/log/libvirt/qemu/*"|grep -Po "(?<=uuid[\s=])[a-z0-9-]+(?=[\s,])"
ecsnodevolume: |-
  - extra: []
    free_space: 10240
    hw_info:
    - device_id: "14"
      dg: '-'
      disk_name: vde
      enclosure_device_id: "13"
      interface_type: SATA
      media_type: Solid State Device
      model: INTEL SSDSC2KG960G8
      raid_controller: "0"
      raw_size: 960195773595
      serial_num: BTYG1020034F960CGN
      slot_num: "3"
      wwn: 55CD2E41541368EA
    id: disk/by-path/pci-0000:00:10.0
    model: INTEL SSDSC2KG96
    name: vde
    raid_info: ""
    rotational: 0
    size: 10240
    storage_code: 8
    type: disk
    volumes: []
escache_attach: "echo $A > /sys/block/escache$B/escache/attach"
escache_available_percent: "cat /sys/block/escache*/escache/cache/cache_available_percent"
escache_detach: "echo $A > /sys/block/escache$B/escache/detach"
escache_mode: "cat /sys/block/escache*/escache/cache_mode"
escache_state: "cat /sys/block/escache*/escache/state"
escache_stop: "echo 1  > /sys/fs/escache/$A/stop"
escache_unregister: "echo 1  > /sys/fs/escache/$A/unregister"
escache_writeback_percent: "cat /sys/block/escache*/escache/writeback_percent"
export_image: |-
  ctr -n k8s.io i export $A-`arch`-$B.tar hub.easystack.io/arm64v8/escloud-linux-source-$A:$B
get_version: "kubectl -nopenstack get version platform -oyaml"
helm_delete: "helm del --purge csi-alcub --key YouKnowNothingAboutRealPower"
helm_install: "helm install --name csi-alcub --namespace $A $A-$B.tgz"
helm_upgrade: |-
  helm upgrade --install $A stable/$A --version $B --values /tmp/ark-values-$A.yaml
helm_value: |-
  kubectl get config -n ems $A -oyaml|python -c "import sys, yaml;print(yaml.dump(yaml.load(sys.stdin)['data']))">/tmp/ark-values-$A.yaml
import_image: "ctr -n k8s.io i import $A-$B.tar"
jira: "https://easystack.atlassian.net/browse/"
jumpserver: "ssh -p 2222 peng.xiao@jumpserver.easystack.cn"
list_logs: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=fluentd,component=internal" --no-headers -o jsonpath="{.items[0].metadata.name}" ) -c httpd -- bash -c "ls -l /var/www/html/td-agent/alcubierre/"
list_roller_package: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=coaster,component=all" --no-headers -o jsonpath="{.items[0].metadata.name}" ) -c coaster-other -- bash -c "ls -l /var/www/roller/upgrade_pkgs/"
python2_env: |-
  pip install -r requirements.txt -r test-requirements.txt -c upper-constraints.txt -c http://fs.easystack.cn/constraints/ecs5.0/upper-constraints.txt --index-url=http://pypi.easystack.cn/pypi/simple/ --extra-index-url=https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host=pypi.tuna.tsinghua.edu.cn --trusted-host=pypi.easystack.cn
python3_env: |-
  pip install -r requirements.txt -c upper-constraints.txt -c http://fs.easystack.cn/constraints/wallaby/upper-constraints.txt --index-url=http://pypi.easystack.cn/pypi/simple/ --extra-index-url=https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host=pypi.tuna.tsinghua.edu.cn --trusted-host=pypi.easystack.cn
roller_package: "roller env --env 1 --product-info --avaliable --component solution_storage"
roller_password: "oathtool -b --totp 6GAF6NXNYCT75FV3APTJU4R5XZJ7X6I4"
scp_manul: "scp -r 172.45.0.155:/home/code/manul ."
security_node: "kubectl get node -l 'secure-container=enabled'"
ssh: "ssh -i /root/.ssh/id_rsa.roller 10.20.0.3"
topo_csi_node: "kubectl get node -l 'topology.alcub.csi/node'"
volume_info: |-
  kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o jsonpath="{.items[0].metadata.name}" ) -c manul -- bash -c "kvctl list volume|grep -A 5 $A"
wheel: |-
  pip wheel -cupper-constraints.txt -w wheelhouse -r requirements.txt -c upper-constraints.txt -c http://fs.easystack.cn/constraints/ecs5.0/upper-constraints.txt --index-url=http://pypi.easystack.cn/pypi/simple/ --extra-index-url=https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host=pypi.tuna.tsinghua.edu.cn --trusted-host=pypi.easystack.cn
close_pam: "gpasswd -d root pamauth"
exec_rune: |-
  ecr-runtime exec `ps aux|grep sandbox-|grep -Po "(?<=sandbox-)\w+"`
upload: |-
  curl -F "file=@$A" http://172.45.0.155:5000/upload
