delete_: "kubectl -n openstack delete po -l \"application=node_exporter,component=metrics\""
delete_alertmanager_ecms: |-
  kubectl -n openstack delete po -l "alertmanager=ecms,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=alertmanager,app.kubernetes.io/version=v0.21.0"
delete_aodh_api: "kubectl -n openstack delete po -l \"application=aodh,component=api\""
delete_aodh_evaluator: "kubectl -n openstack delete po -l \"application=aodh,component=evaluator\""
delete_aodh_listener: "kubectl -n openstack delete po -l \"application=aodh,component=listener\""
delete_aodh_notifier: "kubectl -n openstack delete po -l \"application=aodh,component=notifier\""
delete_api: "kubectl -n iam delete po -l \"application=iam-api,component=api\""
delete_auto_upgrade: "kubectl -n ems delete po -l \"application=auto-upgrade,component=api\""
delete_automation_operators: |-
  kubectl -n openstack delete po -l "application=automation,component=automation-operators"
delete_blackbox_exporter: "kubectl -n openstack delete po -l \"application=blackbox,component=exporter\""
delete_busybox_openstack: "kubectl -n openstack delete po -l \"application=busybox,component=busybox\""
delete_capsule_controller_manager: "kubectl -n eks-managed delete po -l \"application=capsule,component=api\""
delete_ceilometer_api: "kubectl -n openstack delete po -l \"application=ceilometer,component=api\""
delete_ceilometer_central: "kubectl -n openstack delete po -l \"application=ceilometer,component=central\""
delete_ceilometer_collector: "kubectl -n openstack delete po -l \"application=ceilometer,component=collector\""
delete_ceilometer_compute: "kubectl -n openstack delete po -l \"application=ceilometer,component=compute\""
delete_ceilometer_notification: |-
  kubectl -n openstack delete po -l "application=ceilometer,component=notification"
delete_chartmuseum: "kubectl -n openstack delete po -l \"release=chartmuseum\""
delete_chrony: "kubectl -n openstack delete po -l \"application=chrony,component=chrony\""
delete_cinder_api: "kubectl -n openstack delete po -l \"application=cinder,component=api\""
delete_cinder_dashboard: |-
  kubectl -n openstack delete po -l "application=cinder-dashboard,component=dashboard"
delete_cinder_dashboard_api: |-
  kubectl -n openstack delete po -l "application=cinder,component=cinder-dashboard-api"
delete_cinder_scheduler: "kubectl -n openstack delete po -l \"application=cinder,component=scheduler\""
delete_cinder_volume: "kubectl -n openstack delete po -l \"application=cinder,component=volume\""
delete_cloud_product_operator: "kubectl -n ems delete po -l \"application=cloud-product-operator,component=api\""
delete_cluster_manager: |-
  kubectl -n eks-managed delete po -l "application=cluster-manager,component=operator"
delete_coaster_all: "kubectl -n openstack delete po -l \"application=coaster,component=all\""
delete_container_registry_dashboard: |-
  kubectl -n container-registry delete po -l "application=container-registry-dashboard,component=dashboard"
delete_container_registry_dashboard_api: |-
  kubectl -n container-registry delete po -l "application=container-registry-dashboard-api,component=dashboard-api"
delete_coredns: "kubectl -n kube-system delete po -l \"k8s-app=kube-dns\""
delete_cpconfig_operator: "kubectl -n ems delete po -l \"application=cpconfig-operator,component=api\""
delete_dashboard: "kubectl -n iam delete po -l \"application=iam-dashboard,component=dashboard\""
delete_dashboard_api: "kubectl -n ems delete po -l \"application=ems-dashboard-api,component=api\""
delete_docker_registry: "kubectl -n openstack delete po -l \"release=docker-registry\""
delete_dozer_mistral_api: "kubectl -n openstack delete po -l \"\""
delete_dozer_mistral_server: "kubectl -n openstack delete po -l \"\""
delete_dozer_st2actionrunner: "kubectl -n openstack delete po -l \"\""
delete_dozer_st2api: "kubectl -n openstack delete po -l \"\""
delete_dozer_st2auth: "kubectl -n openstack delete po -l \"\""
delete_dozer_st2garbagecollector: "kubectl -n openstack delete po -l \"\""
delete_dozer_st2notifier: "kubectl -n openstack delete po -l \"\""
delete_dozer_st2resultstracker: "kubectl -n openstack delete po -l \"\""
delete_dozer_st2rulesengine: "kubectl -n openstack delete po -l \"\""
delete_dozer_st2sensorcontainer: "kubectl -n openstack delete po -l \"\""
delete_dozer_st2stream: "kubectl -n openstack delete po -l \"\""
delete_easystack_cache: "kubectl -n openstack delete po -l \"\""
delete_easystack_cache_api: |-
  kubectl -n openstack delete po -l "application=easystack-cache-api,component=server"
delete_easystack_dm: "kubectl -n openstack delete po -l \"\""
delete_easystack_hagent: "kubectl -n openstack delete po -l \"\""
delete_easystack_hagent_api: "kubectl -n openstack delete po -l \"\""
delete_easystack_vmm: "kubectl -n openstack delete po -l \"\""
delete_ecp_dashboard: "kubectl -n ems delete po -l \"application=ecp-dashboard,component=dashboard\""
delete_ecp_dashboard_api: "kubectl -n ems delete po -l \"application=ecp-dashboard-api,component=api\""
delete_eks_managed_dashboard: |-
  kubectl -n eks-managed delete po -l "application=eks-managed-dashboard,component=dashboard"
delete_eks_managed_dashboard_api: |-
  kubectl -n eks-managed delete po -l "application=eks-managed,component=dashboard-api"
delete_eks_webhook: "kubectl -n eks-managed delete po -l \"application=eks-webhook,component=api\""
delete_emla_apiserver: "kubectl -n openstack delete po -l \"\""
delete_esdm_api: "kubectl -n openstack delete po -l \"\""
delete_esguides: "kubectl -n openstack delete po -l \"application=esguides,component=server\""
delete_ess_automation: |-
  kubectl -n openstack delete po -l "application=automation,component=ess-automation"
delete_estack_hagent_dashboard: |-
  kubectl -n openstack delete po -l "application=estack-hagent-dashboard,component=dashboard"
delete_estack_hagent_dashboard_api: |-
  kubectl -n openstack delete po -l "application=estack-hagent,component=estack-hagent-dashboard-api"
delete_exporter: "kubectl -n alcubierre delete po -l \"application=alcubierre,component=exporter\""
delete_fluentbit: "kubectl -n openstack delete po -l \"application=fluentbit,component=daemon\""
delete_fluentd: "kubectl -n openstack delete po -l \"application=fluentd,component=internal\""
delete_fluentd_api: "kubectl -n openstack delete po -l \"application=fluentd,component=api\""
delete_glance_api: "kubectl -n openstack delete po -l \"application=glance,component=api\""
delete_glance_dashboard: |-
  kubectl -n openstack delete po -l "application=glance-dashboard,component=dashboard"
delete_glance_dashboard_api: |-
  kubectl -n openstack delete po -l "application=glance,component=glance-dashboard-api"
delete_glance_registry: "kubectl -n openstack delete po -l \"application=glance,component=registry\""
delete_gnocchi_api: "kubectl -n openstack delete po -l \"application=gnocchi,component=api\""
delete_gnocchi_metricd: "kubectl -n openstack delete po -l \"application=gnocchi,component=metricd\""
delete_gnocchi_statsd: "kubectl -n openstack delete po -l \"application=gnocchi,component=statsd\""
delete_grafana: "kubectl -n openstack delete po -l \"application=grafana,component=dashboard\""
delete_hagent_: "kubectl -n openstack delete po -l \"\""
delete_hagent_serve_heartbeat: "kubectl -n openstack delete po -l \"\""
delete_harbor_chartmuseum: |-
  kubectl -n container-registry delete po -l "chart=container-registry,component=chartmuseum,heritage=Tiller,release=container-registry"
delete_harbor_core: "kubectl -n container-registry delete po -l \"application=harbor,component=core\""
delete_harbor_database: |-
  kubectl -n container-registry delete po -l "chart=container-registry,component=database,heritage=Tiller,release=container-registry"
delete_harbor_jobservice: |-
  kubectl -n container-registry delete po -l "chart=container-registry,component=jobservice,heritage=Tiller,release=container-registry"
delete_harbor_redis: |-
  kubectl -n container-registry delete po -l "chart=container-registry,component=redis,heritage=Tiller,release=container-registry"
delete_harbor_registry: |-
  kubectl -n container-registry delete po -l "chart=container-registry,component=registry,harbor-core=harbor-registry,heritage=Tiller,release=container-registry"
delete_heapster: "kubectl -n kube-system delete po -l \"k8s-app=heapster\""
delete_horizon: "kubectl -n openstack delete po -l \"application=horizon,component=server\""
delete_ib_kubernetes: |-
  kubectl -n eks-managed delete po -l "application=ib-kubernetes,component=network"
delete_ingress_api: "kubectl -n kube-system delete po -l \"application=ingress,component=api\""
delete_ingress_error_pages: "kubectl -n kube-system delete po -l \"application=ingress,component=error-pages\""
delete_k8s_controller: "kubectl -n iam delete po -l \"application=iam-k8s-controller,component=api\""
delete_k8s_device_plugin: "kubectl -n openstack delete po -l \"\""
delete_k8s_keystone_auth: "kubectl -n kube-system delete po -l \"\""
delete_keepalived: "kubectl -n openstack delete po -l \"application=keepalived,component=server\""
delete_keystone_api: "kubectl -n openstack delete po -l \"application=keystone,component=api\""
delete_kube-apiserver-node-1: "kubectl -n kube-system delete po -l \"k8s-app=kube-apiserver,kubespray=v2\""
delete_kube-apiserver-node-2: "kubectl -n kube-system delete po -l \"k8s-app=kube-apiserver,kubespray=v2\""
delete_kube-apiserver-node-3: "kubectl -n kube-system delete po -l \"k8s-app=kube-apiserver,kubespray=v2\""
delete_kube-controller-manager-node-1: "kubectl -n kube-system delete po -l \"k8s-app=kube-controller-manager\""
delete_kube-controller-manager-node-2: "kubectl -n kube-system delete po -l \"k8s-app=kube-controller-manager\""
delete_kube-controller-manager-node-3: "kubectl -n kube-system delete po -l \"k8s-app=kube-controller-manager\""
delete_kube-proxy-node-1: "kubectl -n kube-system delete po -l \"k8s-app=kube-proxy\""
delete_kube-proxy-node-2: "kubectl -n kube-system delete po -l \"k8s-app=kube-proxy\""
delete_kube-proxy-node-3: "kubectl -n kube-system delete po -l \"k8s-app=kube-proxy\""
delete_kube-proxy-node-4: "kubectl -n kube-system delete po -l \"k8s-app=kube-proxy\""
delete_kube-proxy-node-5: "kubectl -n kube-system delete po -l \"k8s-app=kube-proxy\""
delete_kube-proxy-node-6: "kubectl -n kube-system delete po -l \"k8s-app=kube-proxy\""
delete_kube-scheduler-node-1: "kubectl -n kube-system delete po -l \"k8s-app=kube-scheduler\""
delete_kube-scheduler-node-2: "kubectl -n kube-system delete po -l \"k8s-app=kube-scheduler\""
delete_kube-scheduler-node-3: "kubectl -n kube-system delete po -l \"k8s-app=kube-scheduler\""
delete_kube_flannel: "kubectl -n kube-system delete po -l \"k8s-app=flannel,tier=node\""
delete_kube_multus_ds: "kubectl -n eks-managed delete po -l \"name=multus,tier=node\""
delete_kube_ovn_cni: "kubectl -n eks-managed delete po -l \"application=ovn,component=daemon\""
delete_kube_ovn_controller: "kubectl -n eks-managed delete po -l \"application=ovn,component=controller\""
delete_kube_state_metrics: |-
  kubectl -n openstack delete po -l "application=kube-state-metrics,component=exporter"
delete_libvirt: "kubectl -n openstack delete po -l \"application=libvirt,component=libvirt\""
delete_logsidecar_injector_deploy: |-
  kubectl -n eks-managed delete po -l "logging.es.io/logsidecar-injector=logsidecar-injector-deploy"
delete_manager: "kubectl -n alcubierre delete po -l \"application=alcubierre,component=manager\""
delete_manul: "kubectl -n alcubierre delete po -l \"application=alcubierre,component=manul\""
delete_mariadb: "kubectl -n openstack delete po -l \"application=mariadb,component=server\""
delete_memcached: "kubectl -n openstack delete po -l \"application=memcached,component=server\""
delete_metrics_server: |-
  kubectl -n kube-system delete po -l "app.kubernetes.io/name=metrics-server,version=v0.4.4"
delete_mgr: "kubectl -n ceph delete po -l \"application=ceph,component=mgr\""
delete_mon: "kubectl -n ceph delete po -l \"application=ceph,component=mon\""
delete_mongodb: "kubectl -n openstack delete po -l \"application=mongodb,component=server\""
delete_nginx-proxy-node-4: "kubectl -n kube-system delete po -l \"k8s-app=kube-nginx\""
delete_nginx-proxy-node-5: "kubectl -n kube-system delete po -l \"k8s-app=kube-nginx\""
delete_nginx-proxy-node-6: "kubectl -n kube-system delete po -l \"k8s-app=kube-nginx\""
delete_notification_center: "kubectl -n openstack delete po -l \"\""
delete_nova_api_metadata: "kubectl -n openstack delete po -l \"application=nova,component=metadata\""
delete_nova_api_osapi: "kubectl -n openstack delete po -l \"application=nova,component=os-api\""
delete_nova_compute: "kubectl -n openstack delete po -l \"application=nova,component=compute\""
delete_nova_conductor: "kubectl -n openstack delete po -l \"application=nova,component=conductor\""
delete_nova_dashboard: |-
  kubectl -n openstack delete po -l "application=nova-dashboard,component=dashboard"
delete_nova_dashboard_api: |-
  kubectl -n openstack delete po -l "application=nova,component=nova-dashboard-api"
delete_nova_maintenance: "kubectl -n openstack delete po -l \"application=nova,component=nova-maintenance\""
delete_nova_novncproxy: "kubectl -n openstack delete po -l \"application=nova,component=novnc-proxy\""
delete_nova_placement_api: "kubectl -n openstack delete po -l \"application=nova,component=placement\""
delete_nova_scheduler: "kubectl -n openstack delete po -l \"application=nova,component=scheduler\""
delete_oath_gateway: "kubectl -n ems delete po -l \"component=gateway\""
delete_operator: "kubectl -n ceph delete po -l \"application=ceph,component=ceph-operator\""
delete_ory_hydra: "kubectl -n iam delete po -l \"application=ory-hydra,component=api\""
delete_osd_0_: "kubectl -n ceph delete po -l \"application=ceph,component=osd\""
delete_osd_10_: "kubectl -n ceph delete po -l \"application=ceph,component=osd\""
delete_osd_11_: "kubectl -n ceph delete po -l \"application=ceph,component=osd\""
delete_osd_1_: "kubectl -n ceph delete po -l \"application=ceph,component=osd\""
delete_osd_2_: "kubectl -n ceph delete po -l \"application=ceph,component=osd\""
delete_osd_3_: "kubectl -n ceph delete po -l \"application=ceph,component=osd\""
delete_osd_4_: "kubectl -n ceph delete po -l \"application=ceph,component=osd\""
delete_osd_5_: "kubectl -n ceph delete po -l \"application=ceph,component=osd\""
delete_osd_6_: "kubectl -n ceph delete po -l \"application=ceph,component=osd\""
delete_osd_7_: "kubectl -n ceph delete po -l \"application=ceph,component=osd\""
delete_osd_8_: "kubectl -n ceph delete po -l \"application=ceph,component=osd\""
delete_osd_9_: "kubectl -n ceph delete po -l \"application=ceph,component=osd\""
delete_osd_isolation: "kubectl -n ceph delete po -l \"application=ceph,component=osd\""
delete_ota: "kubectl -n openstack delete po -l \"application=app,component=dota\""
delete_ota_dashboard: |-
  kubectl -n openstack delete po -l "application=ota-dashboard,component=dashboard"
delete_ota_openapi: "kubectl -n openstack delete po -l \"application=ota,component=openapi\""
delete_ovn_controller: "kubectl -n openstack delete po -l \"application=ovn,component=ovn-controller\""
delete_ovn_northd: "kubectl -n openstack delete po -l \"application=ovn,component=ovn-northd\""
delete_ovn_ovsdb_nb: "kubectl -n openstack delete po -l \"application=ovn,component=ovn-ovsdb-nb\""
delete_ovn_ovsdb_nb_relay: "kubectl -n openstack delete po -l \"application=ovn,component=ovn-ovsdb-nb-relay\""
delete_ovn_ovsdb_sb: "kubectl -n openstack delete po -l \"application=ovn,component=ovn-ovsdb-sb\""
delete_ovn_ovsdb_sb_leader_relay: |-
  kubectl -n openstack delete po -l "application=ovn,component=ovn-ovsdb-sb-leader-relay"
delete_ovn_ovsdb_sb_relay: "kubectl -n openstack delete po -l \"application=ovn,component=ovn-ovsdb-sb-relay\""
delete_ovn_tool: "kubectl -n openstack delete po -l \"application=ovn,component=ovn-tool\""
delete_ovn_webhook: "kubectl -n eks-managed delete po -l \"application=ovn-webhook,component=api\""
delete_peak_api: "kubectl -n ems delete po -l \"application=peak,component=api\""
delete_peak_cache: "kubectl -n ems delete po -l \"application=peak,component=cache\""
delete_postgresql: "kubectl -n openstack delete po -l \"application=postgresql,component=server\""
delete_process_exporter: |-
  kubectl -n openstack delete po -l "application=process_exporter,component=metrics"
delete_prometheus_ecms: |-
  kubectl -n openstack delete po -l "app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=prometheus,app.kubernetes.io/version=2.26.0,operator.prometheus.io/name=ecms,operator.prometheus.io/shard=0,prometheus=ecms"
delete_prometheus_exporter: |-
  kubectl -n openstack delete po -l "application=prometheus-openstack-exporter,component=exporter"
delete_prometheus_mysql_exporter: "kubectl -n openstack delete po -l \"application=mysql,component=exporter\""
delete_prometheus_operator: "kubectl -n openstack delete po -l \"release=prometheus\""
delete_prometheus_polling_exporter: |-
  kubectl -n openstack delete po -l "application=prometheus-polling-exporter,component=exporter"
delete_prometheus_rabbitmq_exporter: "kubectl -n openstack delete po -l \"application=rabbitmq,component=exporter\""
delete_proton_dashboard: |-
  kubectl -n openstack delete po -l "application=proton-dashboard,component=dashboard"
delete_proton_dashboard_api: |-
  kubectl -n openstack delete po -l "application=proton_dashboard_api,component=dashboard_api"
delete_proton_maintenance: |-
  kubectl -n openstack delete po -l "application=proton-maintenance,component=proton-maintenance"
delete_proton_ovn_gateway_monitor_agent: |-
  kubectl -n openstack delete po -l "application=proton,component=proton-ovn-gateway-monitor-agent"
delete_proton_ovn_metadata_agent: |-
  kubectl -n openstack delete po -l "application=proton,component=ovn-metadata-agent"
delete_proton_server: "kubectl -n openstack delete po -l \"application=proton,component=server\""
delete_rabbitmq: "kubectl -n openstack delete po -l \"application=rabbitmq,component=server\""
delete_rbdmirror: "kubectl -n ceph delete po -l \"application=ceph,component=rbdmirror\""
delete_redis: "kubectl -n openstack delete po -l \"application=redis,component=server\""
delete_rgw: "kubectl -n ceph delete po -l \"application=ceph,component=rgw\""
delete_roller_dashboard: |-
  kubectl -n openstack delete po -l "application=roller,component=roller-dashboard"
delete_saml: "kubectl -n iam delete po -l \"application=iam-saml,component=api\""
delete_secure_container_ecr_deploy: "kubectl -n eks-managed delete po -l \"name=secure-container-ecr-deploy\""
delete_sriov_network_config_daemon: |-
  kubectl -n eks-managed delete po -l "component=network,openshift.io/component=network,type=infra"
delete_sriov_network_operator: |-
  kubectl -n eks-managed delete po -l "application=sriov-operator,component=sriovapp"
delete_status_operator: "kubectl -n ems delete po -l \"application=status-operator,component=api\""
delete_target_: "kubectl -n alcubierre delete po -l \"application=alcubierre,component=target\""
delete_thanos_query: |-
  kubectl -n openstack delete po -l "application=prometheus,component=thanos-query"
delete_tiller_deploy: "kubectl -n kube-system delete po -l \"name=tiller\""
delete_whereabouts: "kubectl -n eks-managed delete po -l \"name=whereabouts,tier=node\""
exec__event-monitor: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c event-monitor -- bash
exec__ipmi-exporter: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ipmi-exporter -- bash
exec__node-exporter: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c node-exporter -- bash
exec__node-script-collector: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c node-script-collector -- bash
exec__smartmon-collector: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c smartmon-collector -- bash
exec_alertmanager_ecms_alertmanager: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "alertmanager=ecms,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=alertmanager,app.kubernetes.io/version=v0.21.0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c alertmanager -- bash
exec_alertmanager_ecms_config-reloader: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "alertmanager=ecms,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=alertmanager,app.kubernetes.io/version=v0.21.0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c config-reloader -- bash
exec_aodh_api_aodh-api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=aodh,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c aodh-api -- bash
exec_aodh_evaluator_aodh-evaluator: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=aodh,component=evaluator" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c aodh-evaluator -- bash
exec_aodh_listener_aodh-listener: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=aodh,component=listener" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c aodh-listener -- bash
exec_aodh_notifier_aodh-notifier: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=aodh,component=notifier" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c aodh-notifier -- bash
exec_api_iam-api: |-
  kubectl exec -it -n iam $(kubectl -n iam get po -owide -l "application=iam-api,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c iam-api -- bash
exec_auto_upgrade_auto-upgrade: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "application=auto-upgrade,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c auto-upgrade -- bash
exec_automation_operators_automation-operators: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=automation,component=automation-operators" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c automation-operators -- bash
exec_blackbox_exporter_blackbox-exporter: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=blackbox,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c blackbox-exporter -- bash
exec_busybox_openstack_busybox-openstack: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=busybox,component=busybox" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c busybox-openstack -- bash
exec_capsule_controller_manager_manager: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "application=capsule,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c manager -- bash
exec_ceilometer_api_ceilometer-api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ceilometer,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ceilometer-api -- bash
exec_ceilometer_central_ceilometer-central: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ceilometer,component=central" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ceilometer-central -- bash
exec_ceilometer_collector_ceilometer-collector: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ceilometer,component=collector" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ceilometer-collector -- bash
exec_ceilometer_compute_ceilometer-compute: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ceilometer,component=compute" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ceilometer-compute -- bash
exec_ceilometer_notification_ceilometer-notification: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ceilometer,component=notification" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ceilometer-notification -- bash
exec_chartmuseum_chartmuseum: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "release=chartmuseum" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c chartmuseum -- bash
exec_chrony_chrony: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=chrony,component=chrony" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c chrony -- bash
exec_cinder_api_cinder-api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=cinder,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c cinder-api -- bash
exec_cinder_dashboard_api_cinder-dashboard-api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=cinder,component=cinder-dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c cinder-dashboard-api -- bash
exec_cinder_dashboard_cinder-dashboard: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=cinder-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c cinder-dashboard -- bash
exec_cinder_scheduler_cinder-scheduler: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=cinder,component=scheduler" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c cinder-scheduler -- bash
exec_cinder_volume_cinder-volume: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=cinder,component=volume" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c cinder-volume -- bash
exec_cloud_product_operator_cloud-product-operator: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "application=cloud-product-operator,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c cloud-product-operator -- bash
exec_cluster_manager_cluster-manager: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "application=cluster-manager,component=operator" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c cluster-manager -- bash
exec_coaster_all_coaster-api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=coaster,component=all" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c coaster-api -- bash
exec_coaster_all_coaster-conductor: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=coaster,component=all" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c coaster-conductor -- bash
exec_coaster_all_coaster-other: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=coaster,component=all" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c coaster-other -- bash
exec_container_registry_dashboard_api_container-registry-dashboard-api: |-
  kubectl exec -it -n container-registry $(kubectl -n container-registry get po -owide -l "application=container-registry-dashboard-api,component=dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c container-registry-dashboard-api -- bash
exec_container_registry_dashboard_container-registry-dashboard: |-
  kubectl exec -it -n container-registry $(kubectl -n container-registry get po -owide -l "application=container-registry-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c container-registry-dashboard -- bash
exec_coredns_coredns: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-dns" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c coredns -- bash
exec_cpconfig_operator_cpconfig-operator: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "application=cpconfig-operator,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c cpconfig-operator -- bash
exec_dashboard_alcubierre-dashboard: |-
  kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "application=alcubierre-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c alcubierre-dashboard -- bash
exec_dashboard_api_ems-dashboard-api: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "application=ems-dashboard-api,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ems-dashboard-api -- bash
exec_dashboard_api_opa: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "application=ems-dashboard-api,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c opa -- bash
exec_dashboard_iam-dashboard: |-
  kubectl exec -it -n iam $(kubectl -n iam get po -owide -l "application=iam-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c iam-dashboard -- bash
exec_docker_registry_docker-registry: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "release=docker-registry" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c docker-registry -- bash
exec_docker_registry_image-manager: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "release=docker-registry" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c image-manager -- bash
exec_dozer_mistral_api_mistral-api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c mistral-api -- bash
exec_dozer_mistral_server_mistral-server: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c mistral-server -- bash
exec_dozer_st2actionrunner_st2actionrunner: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c st2actionrunner -- bash
exec_dozer_st2api_st2api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c st2api -- bash
exec_dozer_st2auth_st2auth: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c st2auth -- bash
exec_dozer_st2garbagecollector_st2garbagecollector: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c st2garbagecollector -- bash
exec_dozer_st2notifier_st2notifier: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c st2notifier -- bash
exec_dozer_st2resultstracker_st2resultstracker: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c st2resultstracker -- bash
exec_dozer_st2rulesengine_st2rulesengine: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c st2rulesengine -- bash
exec_dozer_st2sensorcontainer_st2sensorcontainer: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c st2sensorcontainer -- bash
exec_dozer_st2stream_st2stream: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c st2stream -- bash
exec_easystack_cache_api_easystack-cache-api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=easystack-cache-api,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c easystack-cache-api -- bash
exec_easystack_cache_easystack-cache: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c easystack-cache -- bash
exec_easystack_dm_easystack-dm: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c easystack-dm -- bash
exec_easystack_hagent_api_easystack-hagent-api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c easystack-hagent-api -- bash
exec_easystack_hagent_easystack-hagent: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c easystack-hagent -- bash
exec_easystack_vmm_easystack-vmm: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c easystack-vmm -- bash
exec_ecp_dashboard_api_ecp-dashboard-api: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "application=ecp-dashboard-api,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ecp-dashboard-api -- bash
exec_ecp_dashboard_ecp-dashboard: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "application=ecp-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ecp-dashboard -- bash
exec_eks_managed_dashboard_api_eks-managed: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "application=eks-managed,component=dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c eks-managed -- bash
exec_eks_managed_dashboard_eks-managed-dashboard: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "application=eks-managed-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c eks-managed-dashboard -- bash
exec_eks_webhook_eks-webhook: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "application=eks-webhook,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c eks-webhook -- bash
exec_emla_apiserver_emla-apiserver: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c emla-apiserver -- bash
exec_esdm_api_esdm-api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c esdm-api -- bash
exec_esguides_esguides: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=esguides,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c esguides -- bash
exec_ess_automation_ess-automation: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=automation,component=ess-automation" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ess-automation -- bash
exec_estack_hagent_dashboard_api_estack-hagent-dashboard-api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=estack-hagent,component=estack-hagent-dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c estack-hagent-dashboard-api -- bash
exec_estack_hagent_dashboard_estack-hagent-dashboard: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=estack-hagent-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c estack-hagent-dashboard -- bash
exec_exporter_alcubierre-exporter: |-
  kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c alcubierre-exporter -- bash
exec_fluentbit_fluentbit: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=fluentbit,component=daemon" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c fluentbit -- bash
exec_fluentd_api_fluentd-api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=fluentd,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c fluentd-api -- bash
exec_fluentd_fluentd: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=fluentd,component=internal" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c fluentd -- bash
exec_fluentd_httpd: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=fluentd,component=internal" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c httpd -- bash
exec_glance_api_glance-api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=glance,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c glance-api -- bash
exec_glance_dashboard_api_glance-dashboard-api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=glance,component=glance-dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c glance-dashboard-api -- bash
exec_glance_dashboard_glance-dashboard: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=glance-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c glance-dashboard -- bash
exec_glance_registry_glance-registry: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=glance,component=registry" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c glance-registry -- bash
exec_gnocchi_api_gnocchi-api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=gnocchi,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c gnocchi-api -- bash
exec_gnocchi_metricd_gnocchi-metricd: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=gnocchi,component=metricd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c gnocchi-metricd -- bash
exec_gnocchi_statsd_gnocchi-statsd: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=gnocchi,component=statsd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c gnocchi-statsd -- bash
exec_grafana_grafana: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=grafana,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c grafana -- bash
exec_hagent__hagent-node-agent: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c hagent-node-agent -- bash
exec_hagent_serve_heartbeat_hagent-serve-heartbeat: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c hagent-serve-heartbeat -- bash
exec_harbor_chartmuseum_chartmuseum: |-
  kubectl exec -it -n container-registry $(kubectl -n container-registry get po -owide -l "chart=container-registry,component=chartmuseum,heritage=Tiller,release=container-registry" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c chartmuseum -- bash
exec_harbor_core_core: |-
  kubectl exec -it -n container-registry $(kubectl -n container-registry get po -owide -l "application=harbor,component=core" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c core -- bash
exec_harbor_database_database: |-
  kubectl exec -it -n container-registry $(kubectl -n container-registry get po -owide -l "chart=container-registry,component=database,heritage=Tiller,release=container-registry" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c database -- bash
exec_harbor_jobservice_jobservice: |-
  kubectl exec -it -n container-registry $(kubectl -n container-registry get po -owide -l "chart=container-registry,component=jobservice,heritage=Tiller,release=container-registry" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c jobservice -- bash
exec_harbor_redis_redis: |-
  kubectl exec -it -n container-registry $(kubectl -n container-registry get po -owide -l "chart=container-registry,component=redis,heritage=Tiller,release=container-registry" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c redis -- bash
exec_harbor_registry_registry: |-
  kubectl exec -it -n container-registry $(kubectl -n container-registry get po -owide -l "chart=container-registry,component=registry,harbor-core=harbor-registry,heritage=Tiller,release=container-registry" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c registry -- bash
exec_harbor_registry_registryctl: |-
  kubectl exec -it -n container-registry $(kubectl -n container-registry get po -owide -l "chart=container-registry,component=registry,harbor-core=harbor-registry,heritage=Tiller,release=container-registry" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c registryctl -- bash
exec_heapster_heapster: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=heapster" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c heapster -- bash
exec_horizon_horizon: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=horizon,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c horizon -- bash
exec_horizon_nginx: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=horizon,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nginx -- bash
exec_ib_kubernetes_ib-kubernetes: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "application=ib-kubernetes,component=network" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ib-kubernetes -- bash
exec_ingress_api_ingress-api: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "application=ingress,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ingress-api -- bash
exec_ingress_error_pages_ingress-error-pages: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "application=ingress,component=error-pages" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ingress-error-pages -- bash
exec_k8s_controller_iam-k8s-controller: |-
  kubectl exec -it -n iam $(kubectl -n iam get po -owide -l "application=iam-k8s-controller,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c iam-k8s-controller -- bash
exec_k8s_device_plugin_k8s-device-plugin: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c k8s-device-plugin -- bash
exec_k8s_keystone_auth_k8s-keystone-auth: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c k8s-keystone-auth -- bash
exec_keepalived_keepalived: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=keepalived,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c keepalived -- bash
exec_keystone_api_keystone-api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=keystone,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c keystone-api -- bash
exec_kube-apiserver-node-1_kube-apiserver: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-apiserver,kubespray=v2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube-apiserver -- bash
exec_kube-apiserver-node-2_kube-apiserver: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-apiserver,kubespray=v2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube-apiserver -- bash
exec_kube-apiserver-node-3_kube-apiserver: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-apiserver,kubespray=v2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube-apiserver -- bash
exec_kube-controller-manager-node-1_kube-controller-manager: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-controller-manager" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube-controller-manager -- bash
exec_kube-controller-manager-node-2_kube-controller-manager: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-controller-manager" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube-controller-manager -- bash
exec_kube-controller-manager-node-3_kube-controller-manager: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-controller-manager" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube-controller-manager -- bash
exec_kube-proxy-node-1_kube-proxy: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube-proxy -- bash
exec_kube-proxy-node-2_kube-proxy: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube-proxy -- bash
exec_kube-proxy-node-3_kube-proxy: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube-proxy -- bash
exec_kube-proxy-node-4_kube-proxy: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube-proxy -- bash
exec_kube-proxy-node-5_kube-proxy: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube-proxy -- bash
exec_kube-proxy-node-6_kube-proxy: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube-proxy -- bash
exec_kube-scheduler-node-1_kube-scheduler: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-scheduler" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube-scheduler -- bash
exec_kube-scheduler-node-2_kube-scheduler: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-scheduler" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube-scheduler -- bash
exec_kube-scheduler-node-3_kube-scheduler: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-scheduler" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube-scheduler -- bash
exec_kube_flannel_install-cni: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=flannel,tier=node" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c install-cni -- bash
exec_kube_flannel_kube-flannel: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=flannel,tier=node" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube-flannel -- bash
exec_kube_multus_ds_kube-multus: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "name=multus,tier=node" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube-multus -- bash
exec_kube_ovn_cni_cni-server: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "application=ovn,component=daemon" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c cni-server -- bash
exec_kube_ovn_controller_controller: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "application=ovn,component=controller" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c controller -- bash
exec_kube_state_metrics_kube-state-metrics: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=kube-state-metrics,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube-state-metrics -- bash
exec_libvirt_libvirt: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=libvirt,component=libvirt" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c libvirt -- bash
exec_libvirt_libvirt-sync: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=libvirt,component=libvirt" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c libvirt-sync -- bash
exec_logsidecar_injector_deploy_logsidecar-injector: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "logging.es.io/logsidecar-injector=logsidecar-injector-deploy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c logsidecar-injector -- bash
exec_manager_alcubierre-manager: |-
  kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manager" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c alcubierre-manager -- bash
exec_manul_manul: |-
  kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c manul -- bash
exec_mariadb_mariadb: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=mariadb,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c mariadb -- bash
exec_memcached_memcached: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=memcached,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c memcached -- bash
exec_metrics_server_metrics-server: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "app.kubernetes.io/name=metrics-server,version=v0.4.4" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c metrics-server -- bash
exec_mgr_ceph-mgr: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=mgr" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ceph-mgr -- bash
exec_mon_ceph-mon: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=mon" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ceph-mon -- bash
exec_mongodb_mongodb: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=mongodb,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c mongodb -- bash
exec_nginx-proxy-node-4_nginx-proxy: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-nginx" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nginx-proxy -- bash
exec_nginx-proxy-node-5_nginx-proxy: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-nginx" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nginx-proxy -- bash
exec_nginx-proxy-node-6_nginx-proxy: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-nginx" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nginx-proxy -- bash
exec_notification_center_configmap-reload: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c configmap-reload -- bash
exec_notification_center_notification-center: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c notification-center -- bash
exec_nova_api_metadata_nova-api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=nova,component=metadata" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nova-api -- bash
exec_nova_api_osapi_nova-osapi: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=nova,component=os-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nova-osapi -- bash
exec_nova_compute_nova-compute: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=nova,component=compute" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nova-compute -- bash
exec_nova_compute_nova-compute-sync: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=nova,component=compute" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nova-compute-sync -- bash
exec_nova_conductor_nova-conductor: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=nova,component=conductor" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nova-conductor -- bash
exec_nova_dashboard_api_nova-dashboard-api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=nova,component=nova-dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nova-dashboard-api -- bash
exec_nova_dashboard_nova-dashboard: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=nova-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nova-dashboard -- bash
exec_nova_maintenance_nova-maintenance: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=nova,component=nova-maintenance" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nova-maintenance -- bash
exec_nova_novncproxy_nova-novncproxy: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=nova,component=novnc-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nova-novncproxy -- bash
exec_nova_placement_api_nova-placement-api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=nova,component=placement" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nova-placement-api -- bash
exec_nova_scheduler_nova-scheduler: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=nova,component=scheduler" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nova-scheduler -- bash
exec_oath_gateway_oath-backend: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "component=gateway" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c oath-backend -- bash
exec_oath_gateway_oathkeeper: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "component=gateway" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c oathkeeper -- bash
exec_operator_essvc: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=ceph-operator" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c essvc -- bash
exec_ory_hydra_hydra: |-
  kubectl exec -it -n iam $(kubectl -n iam get po -owide -l "application=ory-hydra,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c hydra -- bash
exec_osd_0__osd-create-pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd-create-pod -- bash
exec_osd_10__osd-create-pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd-create-pod -- bash
exec_osd_11__osd-create-pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd-create-pod -- bash
exec_osd_1__osd-create-pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd-create-pod -- bash
exec_osd_2__osd-create-pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd-create-pod -- bash
exec_osd_3__osd-create-pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd-create-pod -- bash
exec_osd_4__osd-create-pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd-create-pod -- bash
exec_osd_5__osd-create-pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd-create-pod -- bash
exec_osd_6__osd-create-pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd-create-pod -- bash
exec_osd_7__osd-create-pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd-create-pod -- bash
exec_osd_8__osd-create-pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd-create-pod -- bash
exec_osd_9__osd-create-pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd-create-pod -- bash
exec_osd_isolation_osd-auto-isolation: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd-auto-isolation -- bash
exec_ota_dashboard_ota-dashboard: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ota-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ota-dashboard -- bash
exec_ota_dota: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=app,component=dota" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c dota -- bash
exec_ota_openapi_nginx: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ota,component=openapi" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nginx -- bash
exec_ota_openapi_openapi: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ota,component=openapi" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c openapi -- bash
exec_ovn_controller_ovn-controller: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-controller" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ovn-controller -- bash
exec_ovn_northd_ovn-northd: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-northd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ovn-northd -- bash
exec_ovn_ovsdb_nb_ovn-ovsdb-nb: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-nb" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ovn-ovsdb-nb -- bash
exec_ovn_ovsdb_nb_relay_ovn-ovsdb-nb-relay: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-nb-relay" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ovn-ovsdb-nb-relay -- bash
exec_ovn_ovsdb_sb_leader_relay_ovn-ovsdb-sb-leader-relay: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-sb-leader-relay" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ovn-ovsdb-sb-leader-relay -- bash
exec_ovn_ovsdb_sb_ovn-ovsdb-sb: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-sb" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ovn-ovsdb-sb -- bash
exec_ovn_ovsdb_sb_relay_ovn-ovsdb-sb-relay: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-sb-relay" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ovn-ovsdb-sb-relay -- bash
exec_ovn_tool_ovn-tool: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-tool" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ovn-tool -- bash
exec_ovn_webhook_ovn-webhook: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "application=ovn-webhook,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ovn-webhook -- bash
exec_peak_api_peak-api: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "application=peak,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c peak-api -- bash
exec_peak_cache_peak-cache: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "application=peak,component=cache" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c peak-cache -- bash
exec_postgresql_postgresql: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=postgresql,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c postgresql -- bash
exec_process_exporter_process-exporter: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=process_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c process-exporter -- bash
exec_prometheus_ecms_config-reloader: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=prometheus,app.kubernetes.io/version=2.26.0,operator.prometheus.io/name=ecms,operator.prometheus.io/shard=0,prometheus=ecms" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c config-reloader -- bash
exec_prometheus_ecms_prometheus: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=prometheus,app.kubernetes.io/version=2.26.0,operator.prometheus.io/name=ecms,operator.prometheus.io/shard=0,prometheus=ecms" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c prometheus -- bash
exec_prometheus_ecms_thanos-sidecar: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=prometheus,app.kubernetes.io/version=2.26.0,operator.prometheus.io/name=ecms,operator.prometheus.io/shard=0,prometheus=ecms" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c thanos-sidecar -- bash
exec_prometheus_exporter_openstack-metrics-exporter: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=prometheus-openstack-exporter,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c openstack-metrics-exporter -- bash
exec_prometheus_mysql_exporter_mysql-exporter: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=mysql,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c mysql-exporter -- bash
exec_prometheus_operator_prometheus-operator: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "release=prometheus" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c prometheus-operator -- bash
exec_prometheus_polling_exporter_prometheus-polling-exporter: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=prometheus-polling-exporter,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c prometheus-polling-exporter -- bash
exec_prometheus_rabbitmq_exporter_rabbitmq-exporter: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=rabbitmq,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c rabbitmq-exporter -- bash
exec_proton_dashboard_api_proton-dashboard-api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=proton_dashboard_api,component=dashboard_api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c proton-dashboard-api -- bash
exec_proton_dashboard_proton-dashboard: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=proton-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c proton-dashboard -- bash
exec_proton_maintenance_proton-maintenance: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=proton-maintenance,component=proton-maintenance" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c proton-maintenance -- bash
exec_proton_ovn_gateway_monitor_agent_proton-ovn-gateway-monitor-agent: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=proton,component=proton-ovn-gateway-monitor-agent" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c proton-ovn-gateway-monitor-agent -- bash
exec_proton_ovn_metadata_agent_proton-ovn-metadata-agent: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=proton,component=ovn-metadata-agent" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c proton-ovn-metadata-agent -- bash
exec_proton_server_proton-server: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=proton,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c proton-server -- bash
exec_rabbitmq_rabbitmq: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=rabbitmq,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c rabbitmq -- bash
exec_rbdmirror_ceph-rbdmirror: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=rbdmirror" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ceph-rbdmirror -- bash
exec_redis_redis: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=redis,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c redis -- bash
exec_rgw_ceph-rgw: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=rgw" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ceph-rgw -- bash
exec_roller_dashboard_roller-dashboard: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=roller,component=roller-dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c roller-dashboard -- bash
exec_saml_iam-saml: |-
  kubectl exec -it -n iam $(kubectl -n iam get po -owide -l "application=iam-saml,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c iam-saml -- bash
exec_secure_container_ecr_deploy_ecr-deploy: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "name=secure-container-ecr-deploy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ecr-deploy -- bash
exec_sriov_network_config_daemon_sriov-cni: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "component=network,openshift.io/component=network,type=infra" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c sriov-cni -- bash
exec_sriov_network_config_daemon_sriov-infiniband-cni: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "component=network,openshift.io/component=network,type=infra" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c sriov-infiniband-cni -- bash
exec_sriov_network_config_daemon_sriov-network-config-daemon: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "component=network,openshift.io/component=network,type=infra" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c sriov-network-config-daemon -- bash
exec_sriov_network_operator_sriov-operator: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "application=sriov-operator,component=sriovapp" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c sriov-operator -- bash
exec_status_operator_status-operator: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "application=status-operator,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c status-operator -- bash
exec_target__alcubierre-target: |-
  kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=target" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c alcubierre-target -- bash
exec_thanos_query_thanos-query: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=prometheus,component=thanos-query" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c thanos-query -- bash
exec_tiller_deploy_tiller: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "name=tiller" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c tiller -- bash
exec_whereabouts_whereabouts: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "name=whereabouts,tier=node" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c whereabouts -- bash
get_: |-
  kubectl -n openstack get po -l "application=node_exporter,component=metrics" -owide
get_alertmanager_ecms: |-
  kubectl -n openstack get po -l "alertmanager=ecms,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=alertmanager,app.kubernetes.io/version=v0.21.0" -owide
get_aodh_api: "kubectl -n openstack get po -l \"application=aodh,component=api\" -owide"
get_aodh_evaluator: "kubectl -n openstack get po -l \"application=aodh,component=evaluator\"\
  \ -owide"
get_aodh_listener: "kubectl -n openstack get po -l \"application=aodh,component=listener\"\
  \ -owide"
get_aodh_notifier: "kubectl -n openstack get po -l \"application=aodh,component=notifier\"\
  \ -owide"
get_api: "kubectl -n iam get po -l \"application=iam-api,component=api\" -owide"
get_auto_upgrade: "kubectl -n ems get po -l \"application=auto-upgrade,component=api\"\
  \ -owide"
get_automation_operators: |-
  kubectl -n openstack get po -l "application=automation,component=automation-operators" -owide
get_blackbox_exporter: "kubectl -n openstack get po -l \"application=blackbox,component=exporter\"\
  \ -owide"
get_busybox_openstack: "kubectl -n openstack get po -l \"application=busybox,component=busybox\"\
  \ -owide"
get_capsule_controller_manager: "kubectl -n eks-managed get po -l \"application=capsule,component=api\"\
  \ -owide"
get_ceilometer_api: "kubectl -n openstack get po -l \"application=ceilometer,component=api\"\
  \ -owide"
get_ceilometer_central: "kubectl -n openstack get po -l \"application=ceilometer,component=central\"\
  \ -owide"
get_ceilometer_collector: |-
  kubectl -n openstack get po -l "application=ceilometer,component=collector" -owide
get_ceilometer_compute: "kubectl -n openstack get po -l \"application=ceilometer,component=compute\"\
  \ -owide"
get_ceilometer_notification: |-
  kubectl -n openstack get po -l "application=ceilometer,component=notification" -owide
get_chartmuseum: "kubectl -n openstack get po -l \"release=chartmuseum\" -owide"
get_chrony: "kubectl -n openstack get po -l \"application=chrony,component=chrony\"\
  \ -owide"
get_cinder_api: "kubectl -n openstack get po -l \"application=cinder,component=api\"\
  \ -owide"
get_cinder_dashboard: |-
  kubectl -n openstack get po -l "application=cinder-dashboard,component=dashboard" -owide
get_cinder_dashboard_api: |-
  kubectl -n openstack get po -l "application=cinder,component=cinder-dashboard-api" -owide
get_cinder_scheduler: "kubectl -n openstack get po -l \"application=cinder,component=scheduler\"\
  \ -owide"
get_cinder_volume: "kubectl -n openstack get po -l \"application=cinder,component=volume\"\
  \ -owide"
get_cloud_product_operator: |-
  kubectl -n ems get po -l "application=cloud-product-operator,component=api" -owide
get_cluster_manager: |-
  kubectl -n eks-managed get po -l "application=cluster-manager,component=operator" -owide
get_coaster_all: "kubectl -n openstack get po -l \"application=coaster,component=all\"\
  \ -owide"
get_container_registry_dashboard: |-
  kubectl -n container-registry get po -l "application=container-registry-dashboard,component=dashboard" -owide
get_container_registry_dashboard_api: |-
  kubectl -n container-registry get po -l "application=container-registry-dashboard-api,component=dashboard-api" -owide
get_coredns: "kubectl -n kube-system get po -l \"k8s-app=kube-dns\" -owide"
get_cpconfig_operator: "kubectl -n ems get po -l \"application=cpconfig-operator,component=api\"\
  \ -owide"
get_dashboard: "kubectl -n iam get po -l \"application=iam-dashboard,component=dashboard\"\
  \ -owide"
get_dashboard_api: "kubectl -n ems get po -l \"application=ems-dashboard-api,component=api\"\
  \ -owide"
get_docker_registry: "kubectl -n openstack get po -l \"release=docker-registry\" -owide"
get_dozer_mistral_api: "kubectl -n openstack get po -l \"\" -owide"
get_dozer_mistral_server: "kubectl -n openstack get po -l \"\" -owide"
get_dozer_st2actionrunner: "kubectl -n openstack get po -l \"\" -owide"
get_dozer_st2api: "kubectl -n openstack get po -l \"\" -owide"
get_dozer_st2auth: "kubectl -n openstack get po -l \"\" -owide"
get_dozer_st2garbagecollector: "kubectl -n openstack get po -l \"\" -owide"
get_dozer_st2notifier: "kubectl -n openstack get po -l \"\" -owide"
get_dozer_st2resultstracker: "kubectl -n openstack get po -l \"\" -owide"
get_dozer_st2rulesengine: "kubectl -n openstack get po -l \"\" -owide"
get_dozer_st2sensorcontainer: "kubectl -n openstack get po -l \"\" -owide"
get_dozer_st2stream: "kubectl -n openstack get po -l \"\" -owide"
get_easystack_cache: "kubectl -n openstack get po -l \"\" -owide"
get_easystack_cache_api: |-
  kubectl -n openstack get po -l "application=easystack-cache-api,component=server" -owide
get_easystack_dm: "kubectl -n openstack get po -l \"\" -owide"
get_easystack_hagent: "kubectl -n openstack get po -l \"\" -owide"
get_easystack_hagent_api: "kubectl -n openstack get po -l \"\" -owide"
get_easystack_vmm: "kubectl -n openstack get po -l \"\" -owide"
get_ecp_dashboard: "kubectl -n ems get po -l \"application=ecp-dashboard,component=dashboard\"\
  \ -owide"
get_ecp_dashboard_api: "kubectl -n ems get po -l \"application=ecp-dashboard-api,component=api\"\
  \ -owide"
get_eks_managed_dashboard: |-
  kubectl -n eks-managed get po -l "application=eks-managed-dashboard,component=dashboard" -owide
get_eks_managed_dashboard_api: |-
  kubectl -n eks-managed get po -l "application=eks-managed,component=dashboard-api" -owide
get_eks_webhook: "kubectl -n eks-managed get po -l \"application=eks-webhook,component=api\"\
  \ -owide"
get_emla_apiserver: "kubectl -n openstack get po -l \"\" -owide"
get_esdm_api: "kubectl -n openstack get po -l \"\" -owide"
get_esguides: "kubectl -n openstack get po -l \"application=esguides,component=server\"\
  \ -owide"
get_ess_automation: |-
  kubectl -n openstack get po -l "application=automation,component=ess-automation" -owide
get_estack_hagent_dashboard: |-
  kubectl -n openstack get po -l "application=estack-hagent-dashboard,component=dashboard" -owide
get_estack_hagent_dashboard_api: |-
  kubectl -n openstack get po -l "application=estack-hagent,component=estack-hagent-dashboard-api" -owide
get_exporter: |-
  kubectl -n alcubierre get po -l "application=alcubierre,component=exporter" -owide
get_fluentbit: "kubectl -n openstack get po -l \"application=fluentbit,component=daemon\"\
  \ -owide"
get_fluentd: "kubectl -n openstack get po -l \"application=fluentd,component=internal\"\
  \ -owide"
get_fluentd_api: "kubectl -n openstack get po -l \"application=fluentd,component=api\"\
  \ -owide"
get_glance_api: "kubectl -n openstack get po -l \"application=glance,component=api\"\
  \ -owide"
get_glance_dashboard: |-
  kubectl -n openstack get po -l "application=glance-dashboard,component=dashboard" -owide
get_glance_dashboard_api: |-
  kubectl -n openstack get po -l "application=glance,component=glance-dashboard-api" -owide
get_glance_registry: "kubectl -n openstack get po -l \"application=glance,component=registry\"\
  \ -owide"
get_gnocchi_api: "kubectl -n openstack get po -l \"application=gnocchi,component=api\"\
  \ -owide"
get_gnocchi_metricd: "kubectl -n openstack get po -l \"application=gnocchi,component=metricd\"\
  \ -owide"
get_gnocchi_statsd: "kubectl -n openstack get po -l \"application=gnocchi,component=statsd\"\
  \ -owide"
get_grafana: "kubectl -n openstack get po -l \"application=grafana,component=dashboard\"\
  \ -owide"
get_hagent_: "kubectl -n openstack get po -l \"\" -owide"
get_hagent_serve_heartbeat: "kubectl -n openstack get po -l \"\" -owide"
get_harbor_chartmuseum: |-
  kubectl -n container-registry get po -l "chart=container-registry,component=chartmuseum,heritage=Tiller,release=container-registry" -owide
get_harbor_core: |-
  kubectl -n container-registry get po -l "application=harbor,component=core" -owide
get_harbor_database: |-
  kubectl -n container-registry get po -l "chart=container-registry,component=database,heritage=Tiller,release=container-registry" -owide
get_harbor_jobservice: |-
  kubectl -n container-registry get po -l "chart=container-registry,component=jobservice,heritage=Tiller,release=container-registry" -owide
get_harbor_redis: |-
  kubectl -n container-registry get po -l "chart=container-registry,component=redis,heritage=Tiller,release=container-registry" -owide
get_harbor_registry: |-
  kubectl -n container-registry get po -l "chart=container-registry,component=registry,harbor-core=harbor-registry,heritage=Tiller,release=container-registry" -owide
get_heapster: "kubectl -n kube-system get po -l \"k8s-app=heapster\" -owide"
get_horizon: "kubectl -n openstack get po -l \"application=horizon,component=server\"\
  \ -owide"
get_ib_kubernetes: |-
  kubectl -n eks-managed get po -l "application=ib-kubernetes,component=network" -owide
get_ingress_api: "kubectl -n kube-system get po -l \"application=ingress,component=api\"\
  \ -owide"
get_ingress_error_pages: |-
  kubectl -n kube-system get po -l "application=ingress,component=error-pages" -owide
get_k8s_controller: "kubectl -n iam get po -l \"application=iam-k8s-controller,component=api\"\
  \ -owide"
get_k8s_device_plugin: "kubectl -n openstack get po -l \"\" -owide"
get_k8s_keystone_auth: "kubectl -n kube-system get po -l \"\" -owide"
get_keepalived: "kubectl -n openstack get po -l \"application=keepalived,component=server\"\
  \ -owide"
get_keystone_api: "kubectl -n openstack get po -l \"application=keystone,component=api\"\
  \ -owide"
get_kube-apiserver-node-1: "kubectl -n kube-system get po -l \"k8s-app=kube-apiserver,kubespray=v2\"\
  \ -owide"
get_kube-apiserver-node-2: "kubectl -n kube-system get po -l \"k8s-app=kube-apiserver,kubespray=v2\"\
  \ -owide"
get_kube-apiserver-node-3: "kubectl -n kube-system get po -l \"k8s-app=kube-apiserver,kubespray=v2\"\
  \ -owide"
get_kube-controller-manager-node-1: "kubectl -n kube-system get po -l \"k8s-app=kube-controller-manager\"\
  \ -owide"
get_kube-controller-manager-node-2: "kubectl -n kube-system get po -l \"k8s-app=kube-controller-manager\"\
  \ -owide"
get_kube-controller-manager-node-3: "kubectl -n kube-system get po -l \"k8s-app=kube-controller-manager\"\
  \ -owide"
get_kube-proxy-node-1: "kubectl -n kube-system get po -l \"k8s-app=kube-proxy\" -owide"
get_kube-proxy-node-2: "kubectl -n kube-system get po -l \"k8s-app=kube-proxy\" -owide"
get_kube-proxy-node-3: "kubectl -n kube-system get po -l \"k8s-app=kube-proxy\" -owide"
get_kube-proxy-node-4: "kubectl -n kube-system get po -l \"k8s-app=kube-proxy\" -owide"
get_kube-proxy-node-5: "kubectl -n kube-system get po -l \"k8s-app=kube-proxy\" -owide"
get_kube-proxy-node-6: "kubectl -n kube-system get po -l \"k8s-app=kube-proxy\" -owide"
get_kube-scheduler-node-1: "kubectl -n kube-system get po -l \"k8s-app=kube-scheduler\"\
  \ -owide"
get_kube-scheduler-node-2: "kubectl -n kube-system get po -l \"k8s-app=kube-scheduler\"\
  \ -owide"
get_kube-scheduler-node-3: "kubectl -n kube-system get po -l \"k8s-app=kube-scheduler\"\
  \ -owide"
get_kube_flannel: "kubectl -n kube-system get po -l \"k8s-app=flannel,tier=node\"\
  \ -owide"
get_kube_multus_ds: "kubectl -n eks-managed get po -l \"name=multus,tier=node\" -owide"
get_kube_ovn_cni: "kubectl -n eks-managed get po -l \"application=ovn,component=daemon\"\
  \ -owide"
get_kube_ovn_controller: "kubectl -n eks-managed get po -l \"application=ovn,component=controller\"\
  \ -owide"
get_kube_state_metrics: |-
  kubectl -n openstack get po -l "application=kube-state-metrics,component=exporter" -owide
get_libvirt: "kubectl -n openstack get po -l \"application=libvirt,component=libvirt\"\
  \ -owide"
get_logsidecar_injector_deploy: |-
  kubectl -n eks-managed get po -l "logging.es.io/logsidecar-injector=logsidecar-injector-deploy" -owide
get_manager: |-
  kubectl -n alcubierre get po -l "application=alcubierre,component=manager" -owide
get_manul: "kubectl -n alcubierre get po -l \"application=alcubierre,component=manul\"\
  \ -owide"
get_mariadb: "kubectl -n openstack get po -l \"application=mariadb,component=server\"\
  \ -owide"
get_memcached: "kubectl -n openstack get po -l \"application=memcached,component=server\"\
  \ -owide"
get_metrics_server: |-
  kubectl -n kube-system get po -l "app.kubernetes.io/name=metrics-server,version=v0.4.4" -owide
get_mgr: "kubectl -n ceph get po -l \"application=ceph,component=mgr\" -owide"
get_mon: "kubectl -n ceph get po -l \"application=ceph,component=mon\" -owide"
get_mongodb: "kubectl -n openstack get po -l \"application=mongodb,component=server\"\
  \ -owide"
get_nginx-proxy-node-4: "kubectl -n kube-system get po -l \"k8s-app=kube-nginx\" -owide"
get_nginx-proxy-node-5: "kubectl -n kube-system get po -l \"k8s-app=kube-nginx\" -owide"
get_nginx-proxy-node-6: "kubectl -n kube-system get po -l \"k8s-app=kube-nginx\" -owide"
get_notification_center: "kubectl -n openstack get po -l \"\" -owide"
get_nova_api_metadata: "kubectl -n openstack get po -l \"application=nova,component=metadata\"\
  \ -owide"
get_nova_api_osapi: "kubectl -n openstack get po -l \"application=nova,component=os-api\"\
  \ -owide"
get_nova_compute: "kubectl -n openstack get po -l \"application=nova,component=compute\"\
  \ -owide"
get_nova_conductor: "kubectl -n openstack get po -l \"application=nova,component=conductor\"\
  \ -owide"
get_nova_dashboard: |-
  kubectl -n openstack get po -l "application=nova-dashboard,component=dashboard" -owide
get_nova_dashboard_api: |-
  kubectl -n openstack get po -l "application=nova,component=nova-dashboard-api" -owide
get_nova_maintenance: |-
  kubectl -n openstack get po -l "application=nova,component=nova-maintenance" -owide
get_nova_novncproxy: "kubectl -n openstack get po -l \"application=nova,component=novnc-proxy\"\
  \ -owide"
get_nova_placement_api: "kubectl -n openstack get po -l \"application=nova,component=placement\"\
  \ -owide"
get_nova_scheduler: "kubectl -n openstack get po -l \"application=nova,component=scheduler\"\
  \ -owide"
get_oath_gateway: "kubectl -n ems get po -l \"component=gateway\" -owide"
get_operator: "kubectl -n ceph get po -l \"application=ceph,component=ceph-operator\"\
  \ -owide"
get_ory_hydra: "kubectl -n iam get po -l \"application=ory-hydra,component=api\" -owide"
get_osd_0_: "kubectl -n ceph get po -l \"application=ceph,component=osd\" -owide"
get_osd_10_: "kubectl -n ceph get po -l \"application=ceph,component=osd\" -owide"
get_osd_11_: "kubectl -n ceph get po -l \"application=ceph,component=osd\" -owide"
get_osd_1_: "kubectl -n ceph get po -l \"application=ceph,component=osd\" -owide"
get_osd_2_: "kubectl -n ceph get po -l \"application=ceph,component=osd\" -owide"
get_osd_3_: "kubectl -n ceph get po -l \"application=ceph,component=osd\" -owide"
get_osd_4_: "kubectl -n ceph get po -l \"application=ceph,component=osd\" -owide"
get_osd_5_: "kubectl -n ceph get po -l \"application=ceph,component=osd\" -owide"
get_osd_6_: "kubectl -n ceph get po -l \"application=ceph,component=osd\" -owide"
get_osd_7_: "kubectl -n ceph get po -l \"application=ceph,component=osd\" -owide"
get_osd_8_: "kubectl -n ceph get po -l \"application=ceph,component=osd\" -owide"
get_osd_9_: "kubectl -n ceph get po -l \"application=ceph,component=osd\" -owide"
get_osd_isolation: "kubectl -n ceph get po -l \"application=ceph,component=osd\" -owide"
get_ota: "kubectl -n openstack get po -l \"application=app,component=dota\" -owide"
get_ota_dashboard: |-
  kubectl -n openstack get po -l "application=ota-dashboard,component=dashboard" -owide
get_ota_openapi: "kubectl -n openstack get po -l \"application=ota,component=openapi\"\
  \ -owide"
get_ovn_controller: "kubectl -n openstack get po -l \"application=ovn,component=ovn-controller\"\
  \ -owide"
get_ovn_northd: "kubectl -n openstack get po -l \"application=ovn,component=ovn-northd\"\
  \ -owide"
get_ovn_ovsdb_nb: "kubectl -n openstack get po -l \"application=ovn,component=ovn-ovsdb-nb\"\
  \ -owide"
get_ovn_ovsdb_nb_relay: |-
  kubectl -n openstack get po -l "application=ovn,component=ovn-ovsdb-nb-relay" -owide
get_ovn_ovsdb_sb: "kubectl -n openstack get po -l \"application=ovn,component=ovn-ovsdb-sb\"\
  \ -owide"
get_ovn_ovsdb_sb_leader_relay: |-
  kubectl -n openstack get po -l "application=ovn,component=ovn-ovsdb-sb-leader-relay" -owide
get_ovn_ovsdb_sb_relay: |-
  kubectl -n openstack get po -l "application=ovn,component=ovn-ovsdb-sb-relay" -owide
get_ovn_tool: "kubectl -n openstack get po -l \"application=ovn,component=ovn-tool\"\
  \ -owide"
get_ovn_webhook: "kubectl -n eks-managed get po -l \"application=ovn-webhook,component=api\"\
  \ -owide"
get_peak_api: "kubectl -n ems get po -l \"application=peak,component=api\" -owide"
get_peak_cache: "kubectl -n ems get po -l \"application=peak,component=cache\" -owide"
get_postgresql: "kubectl -n openstack get po -l \"application=postgresql,component=server\"\
  \ -owide"
get_process_exporter: |-
  kubectl -n openstack get po -l "application=process_exporter,component=metrics" -owide
get_prometheus_ecms: |-
  kubectl -n openstack get po -l "app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=prometheus,app.kubernetes.io/version=2.26.0,operator.prometheus.io/name=ecms,operator.prometheus.io/shard=0,prometheus=ecms" -owide
get_prometheus_exporter: |-
  kubectl -n openstack get po -l "application=prometheus-openstack-exporter,component=exporter" -owide
get_prometheus_mysql_exporter: "kubectl -n openstack get po -l \"application=mysql,component=exporter\"\
  \ -owide"
get_prometheus_operator: "kubectl -n openstack get po -l \"release=prometheus\" -owide"
get_prometheus_polling_exporter: |-
  kubectl -n openstack get po -l "application=prometheus-polling-exporter,component=exporter" -owide
get_prometheus_rabbitmq_exporter: "kubectl -n openstack get po -l \"application=rabbitmq,component=exporter\"\
  \ -owide"
get_proton_dashboard: |-
  kubectl -n openstack get po -l "application=proton-dashboard,component=dashboard" -owide
get_proton_dashboard_api: |-
  kubectl -n openstack get po -l "application=proton_dashboard_api,component=dashboard_api" -owide
get_proton_maintenance: |-
  kubectl -n openstack get po -l "application=proton-maintenance,component=proton-maintenance" -owide
get_proton_ovn_gateway_monitor_agent: |-
  kubectl -n openstack get po -l "application=proton,component=proton-ovn-gateway-monitor-agent" -owide
get_proton_ovn_metadata_agent: |-
  kubectl -n openstack get po -l "application=proton,component=ovn-metadata-agent" -owide
get_proton_server: "kubectl -n openstack get po -l \"application=proton,component=server\"\
  \ -owide"
get_rabbitmq: "kubectl -n openstack get po -l \"application=rabbitmq,component=server\"\
  \ -owide"
get_rbdmirror: "kubectl -n ceph get po -l \"application=ceph,component=rbdmirror\"\
  \ -owide"
get_redis: "kubectl -n openstack get po -l \"application=redis,component=server\"\
  \ -owide"
get_rgw: "kubectl -n ceph get po -l \"application=ceph,component=rgw\" -owide"
get_roller_dashboard: |-
  kubectl -n openstack get po -l "application=roller,component=roller-dashboard" -owide
get_saml: "kubectl -n iam get po -l \"application=iam-saml,component=api\" -owide"
get_secure_container_ecr_deploy: "kubectl -n eks-managed get po -l \"name=secure-container-ecr-deploy\"\
  \ -owide"
get_sriov_network_config_daemon: |-
  kubectl -n eks-managed get po -l "component=network,openshift.io/component=network,type=infra" -owide
get_sriov_network_operator: |-
  kubectl -n eks-managed get po -l "application=sriov-operator,component=sriovapp" -owide
get_status_operator: "kubectl -n ems get po -l \"application=status-operator,component=api\"\
  \ -owide"
get_target_: "kubectl -n alcubierre get po -l \"application=alcubierre,component=target\"\
  \ -owide"
get_thanos_query: |-
  kubectl -n openstack get po -l "application=prometheus,component=thanos-query" -owide
get_tiller_deploy: "kubectl -n kube-system get po -l \"name=tiller\" -owide"
get_whereabouts: "kubectl -n eks-managed get po -l \"name=whereabouts,tier=node\"\
  \ -owide"
logs__event-monitor: |-
  for p in $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c event-monitor $p;done
logs__ipmi-exporter: |-
  for p in $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ipmi-exporter $p;done
logs__node-exporter: |-
  for p in $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c node-exporter $p;done
logs__node-script-collector: |-
  for p in $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c node-script-collector $p;done
logs__smartmon-collector: |-
  for p in $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c smartmon-collector $p;done
logs_alertmanager_ecms_alertmanager: |-
  for p in $(kubectl -n openstack get po -owide -l "alertmanager=ecms,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=alertmanager,app.kubernetes.io/version=v0.21.0" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c alertmanager $p;done
logs_alertmanager_ecms_config-reloader: |-
  for p in $(kubectl -n openstack get po -owide -l "alertmanager=ecms,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=alertmanager,app.kubernetes.io/version=v0.21.0" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c config-reloader $p;done
logs_aodh_api_aodh-api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=aodh,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c aodh-api $p;done
logs_aodh_evaluator_aodh-evaluator: |-
  for p in $(kubectl -n openstack get po -owide -l "application=aodh,component=evaluator" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c aodh-evaluator $p;done
logs_aodh_listener_aodh-listener: |-
  for p in $(kubectl -n openstack get po -owide -l "application=aodh,component=listener" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c aodh-listener $p;done
logs_aodh_notifier_aodh-notifier: |-
  for p in $(kubectl -n openstack get po -owide -l "application=aodh,component=notifier" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c aodh-notifier $p;done
logs_api_iam-api: |-
  for p in $(kubectl -n iam get po -owide -l "application=iam-api,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n iam logs -c iam-api $p;done
logs_auto_upgrade_auto-upgrade: |-
  for p in $(kubectl -n ems get po -owide -l "application=auto-upgrade,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c auto-upgrade $p;done
logs_automation_operators_automation-operators: |-
  for p in $(kubectl -n openstack get po -owide -l "application=automation,component=automation-operators" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c automation-operators $p;done
logs_blackbox_exporter_blackbox-exporter: |-
  for p in $(kubectl -n openstack get po -owide -l "application=blackbox,component=exporter" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c blackbox-exporter $p;done
logs_busybox_openstack_busybox-openstack: |-
  for p in $(kubectl -n openstack get po -owide -l "application=busybox,component=busybox" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c busybox-openstack $p;done
logs_capsule_controller_manager_manager: |-
  for p in $(kubectl -n eks-managed get po -owide -l "application=capsule,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c manager $p;done
logs_ceilometer_api_ceilometer-api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ceilometer,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ceilometer-api $p;done
logs_ceilometer_central_ceilometer-central: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ceilometer,component=central" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ceilometer-central $p;done
logs_ceilometer_collector_ceilometer-collector: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ceilometer,component=collector" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ceilometer-collector $p;done
logs_ceilometer_compute_ceilometer-compute: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ceilometer,component=compute" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ceilometer-compute $p;done
logs_ceilometer_notification_ceilometer-notification: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ceilometer,component=notification" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ceilometer-notification $p;done
logs_chartmuseum_chartmuseum: |-
  for p in $(kubectl -n openstack get po -owide -l "release=chartmuseum" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c chartmuseum $p;done
logs_chrony_chrony: |-
  for p in $(kubectl -n openstack get po -owide -l "application=chrony,component=chrony" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c chrony $p;done
logs_cinder_api_cinder-api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=cinder,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c cinder-api $p;done
logs_cinder_dashboard_api_cinder-dashboard-api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=cinder,component=cinder-dashboard-api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c cinder-dashboard-api $p;done
logs_cinder_dashboard_cinder-dashboard: |-
  for p in $(kubectl -n openstack get po -owide -l "application=cinder-dashboard,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c cinder-dashboard $p;done
logs_cinder_scheduler_cinder-scheduler: |-
  for p in $(kubectl -n openstack get po -owide -l "application=cinder,component=scheduler" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c cinder-scheduler $p;done
logs_cinder_volume_cinder-volume: |-
  for p in $(kubectl -n openstack get po -owide -l "application=cinder,component=volume" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c cinder-volume $p;done
logs_cloud_product_operator_cloud-product-operator: |-
  for p in $(kubectl -n ems get po -owide -l "application=cloud-product-operator,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c cloud-product-operator $p;done
logs_cluster_manager_cluster-manager: |-
  for p in $(kubectl -n eks-managed get po -owide -l "application=cluster-manager,component=operator" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c cluster-manager $p;done
logs_coaster_all_coaster-api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=coaster,component=all" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c coaster-api $p;done
logs_coaster_all_coaster-conductor: |-
  for p in $(kubectl -n openstack get po -owide -l "application=coaster,component=all" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c coaster-conductor $p;done
logs_coaster_all_coaster-other: |-
  for p in $(kubectl -n openstack get po -owide -l "application=coaster,component=all" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c coaster-other $p;done
logs_container_registry_dashboard_api_container-registry-dashboard-api: |-
  for p in $(kubectl -n container-registry get po -owide -l "application=container-registry-dashboard-api,component=dashboard-api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n container-registry logs -c container-registry-dashboard-api $p;done
logs_container_registry_dashboard_container-registry-dashboard: |-
  for p in $(kubectl -n container-registry get po -owide -l "application=container-registry-dashboard,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n container-registry logs -c container-registry-dashboard $p;done
logs_coredns_coredns: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-dns" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c coredns $p;done
logs_cpconfig_operator_cpconfig-operator: |-
  for p in $(kubectl -n ems get po -owide -l "application=cpconfig-operator,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c cpconfig-operator $p;done
logs_dashboard_alcubierre-dashboard: |-
  for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre-dashboard,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n alcubierre logs -c alcubierre-dashboard $p;done
logs_dashboard_api_ems-dashboard-api: |-
  for p in $(kubectl -n ems get po -owide -l "application=ems-dashboard-api,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c ems-dashboard-api $p;done
logs_dashboard_api_opa: |-
  for p in $(kubectl -n ems get po -owide -l "application=ems-dashboard-api,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c opa $p;done
logs_dashboard_iam-dashboard: |-
  for p in $(kubectl -n iam get po -owide -l "application=iam-dashboard,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n iam logs -c iam-dashboard $p;done
logs_docker_registry_docker-registry: |-
  for p in $(kubectl -n openstack get po -owide -l "release=docker-registry" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c docker-registry $p;done
logs_docker_registry_image-manager: |-
  for p in $(kubectl -n openstack get po -owide -l "release=docker-registry" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c image-manager $p;done
logs_dozer_mistral_api_mistral-api: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c mistral-api $p;done
logs_dozer_mistral_server_mistral-server: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c mistral-server $p;done
logs_dozer_st2actionrunner_st2actionrunner: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c st2actionrunner $p;done
logs_dozer_st2api_st2api: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c st2api $p;done
logs_dozer_st2auth_st2auth: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c st2auth $p;done
logs_dozer_st2garbagecollector_st2garbagecollector: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c st2garbagecollector $p;done
logs_dozer_st2notifier_st2notifier: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c st2notifier $p;done
logs_dozer_st2resultstracker_st2resultstracker: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c st2resultstracker $p;done
logs_dozer_st2rulesengine_st2rulesengine: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c st2rulesengine $p;done
logs_dozer_st2sensorcontainer_st2sensorcontainer: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c st2sensorcontainer $p;done
logs_dozer_st2stream_st2stream: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c st2stream $p;done
logs_easystack_cache_api_easystack-cache-api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=easystack-cache-api,component=server" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c easystack-cache-api $p;done
logs_easystack_cache_easystack-cache: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c easystack-cache $p;done
logs_easystack_dm_easystack-dm: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c easystack-dm $p;done
logs_easystack_hagent_api_easystack-hagent-api: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c easystack-hagent-api $p;done
logs_easystack_hagent_easystack-hagent: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c easystack-hagent $p;done
logs_easystack_vmm_easystack-vmm: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c easystack-vmm $p;done
logs_ecp_dashboard_api_ecp-dashboard-api: |-
  for p in $(kubectl -n ems get po -owide -l "application=ecp-dashboard-api,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c ecp-dashboard-api $p;done
logs_ecp_dashboard_ecp-dashboard: |-
  for p in $(kubectl -n ems get po -owide -l "application=ecp-dashboard,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c ecp-dashboard $p;done
logs_eks_managed_dashboard_api_eks-managed: |-
  for p in $(kubectl -n eks-managed get po -owide -l "application=eks-managed,component=dashboard-api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c eks-managed $p;done
logs_eks_managed_dashboard_eks-managed-dashboard: |-
  for p in $(kubectl -n eks-managed get po -owide -l "application=eks-managed-dashboard,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c eks-managed-dashboard $p;done
logs_eks_webhook_eks-webhook: |-
  for p in $(kubectl -n eks-managed get po -owide -l "application=eks-webhook,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c eks-webhook $p;done
logs_emla_apiserver_emla-apiserver: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c emla-apiserver $p;done
logs_esdm_api_esdm-api: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c esdm-api $p;done
logs_esguides_esguides: |-
  for p in $(kubectl -n openstack get po -owide -l "application=esguides,component=server" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c esguides $p;done
logs_ess_automation_ess-automation: |-
  for p in $(kubectl -n openstack get po -owide -l "application=automation,component=ess-automation" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ess-automation $p;done
logs_estack_hagent_dashboard_api_estack-hagent-dashboard-api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=estack-hagent,component=estack-hagent-dashboard-api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c estack-hagent-dashboard-api $p;done
logs_estack_hagent_dashboard_estack-hagent-dashboard: |-
  for p in $(kubectl -n openstack get po -owide -l "application=estack-hagent-dashboard,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c estack-hagent-dashboard $p;done
logs_exporter_alcubierre-exporter: |-
  for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=exporter" --no-headers -o custom-columns=":metadata.name" );do kubectl -n alcubierre logs -c alcubierre-exporter $p;done
logs_fluentbit_fluentbit: |-
  for p in $(kubectl -n openstack get po -owide -l "application=fluentbit,component=daemon" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c fluentbit $p;done
logs_fluentd_api_fluentd-api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=fluentd,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c fluentd-api $p;done
logs_fluentd_fluentd: |-
  for p in $(kubectl -n openstack get po -owide -l "application=fluentd,component=internal" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c fluentd $p;done
logs_fluentd_httpd: |-
  for p in $(kubectl -n openstack get po -owide -l "application=fluentd,component=internal" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c httpd $p;done
logs_glance_api_glance-api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=glance,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c glance-api $p;done
logs_glance_dashboard_api_glance-dashboard-api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=glance,component=glance-dashboard-api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c glance-dashboard-api $p;done
logs_glance_dashboard_glance-dashboard: |-
  for p in $(kubectl -n openstack get po -owide -l "application=glance-dashboard,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c glance-dashboard $p;done
logs_glance_registry_glance-registry: |-
  for p in $(kubectl -n openstack get po -owide -l "application=glance,component=registry" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c glance-registry $p;done
logs_gnocchi_api_gnocchi-api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=gnocchi,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c gnocchi-api $p;done
logs_gnocchi_metricd_gnocchi-metricd: |-
  for p in $(kubectl -n openstack get po -owide -l "application=gnocchi,component=metricd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c gnocchi-metricd $p;done
logs_gnocchi_statsd_gnocchi-statsd: |-
  for p in $(kubectl -n openstack get po -owide -l "application=gnocchi,component=statsd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c gnocchi-statsd $p;done
logs_grafana_grafana: |-
  for p in $(kubectl -n openstack get po -owide -l "application=grafana,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c grafana $p;done
logs_hagent__hagent-node-agent: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c hagent-node-agent $p;done
logs_hagent_serve_heartbeat_hagent-serve-heartbeat: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c hagent-serve-heartbeat $p;done
logs_harbor_chartmuseum_chartmuseum: |-
  for p in $(kubectl -n container-registry get po -owide -l "chart=container-registry,component=chartmuseum,heritage=Tiller,release=container-registry" --no-headers -o custom-columns=":metadata.name" );do kubectl -n container-registry logs -c chartmuseum $p;done
logs_harbor_core_core: |-
  for p in $(kubectl -n container-registry get po -owide -l "application=harbor,component=core" --no-headers -o custom-columns=":metadata.name" );do kubectl -n container-registry logs -c core $p;done
logs_harbor_database_database: |-
  for p in $(kubectl -n container-registry get po -owide -l "chart=container-registry,component=database,heritage=Tiller,release=container-registry" --no-headers -o custom-columns=":metadata.name" );do kubectl -n container-registry logs -c database $p;done
logs_harbor_jobservice_jobservice: |-
  for p in $(kubectl -n container-registry get po -owide -l "chart=container-registry,component=jobservice,heritage=Tiller,release=container-registry" --no-headers -o custom-columns=":metadata.name" );do kubectl -n container-registry logs -c jobservice $p;done
logs_harbor_redis_redis: |-
  for p in $(kubectl -n container-registry get po -owide -l "chart=container-registry,component=redis,heritage=Tiller,release=container-registry" --no-headers -o custom-columns=":metadata.name" );do kubectl -n container-registry logs -c redis $p;done
logs_harbor_registry_registry: |-
  for p in $(kubectl -n container-registry get po -owide -l "chart=container-registry,component=registry,harbor-core=harbor-registry,heritage=Tiller,release=container-registry" --no-headers -o custom-columns=":metadata.name" );do kubectl -n container-registry logs -c registry $p;done
logs_harbor_registry_registryctl: |-
  for p in $(kubectl -n container-registry get po -owide -l "chart=container-registry,component=registry,harbor-core=harbor-registry,heritage=Tiller,release=container-registry" --no-headers -o custom-columns=":metadata.name" );do kubectl -n container-registry logs -c registryctl $p;done
logs_heapster_heapster: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=heapster" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c heapster $p;done
logs_horizon_horizon: |-
  for p in $(kubectl -n openstack get po -owide -l "application=horizon,component=server" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c horizon $p;done
logs_horizon_nginx: |-
  for p in $(kubectl -n openstack get po -owide -l "application=horizon,component=server" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nginx $p;done
logs_ib_kubernetes_ib-kubernetes: |-
  for p in $(kubectl -n eks-managed get po -owide -l "application=ib-kubernetes,component=network" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c ib-kubernetes $p;done
logs_ingress_api_ingress-api: |-
  for p in $(kubectl -n kube-system get po -owide -l "application=ingress,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c ingress-api $p;done
logs_ingress_error_pages_ingress-error-pages: |-
  for p in $(kubectl -n kube-system get po -owide -l "application=ingress,component=error-pages" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c ingress-error-pages $p;done
logs_k8s_controller_iam-k8s-controller: |-
  for p in $(kubectl -n iam get po -owide -l "application=iam-k8s-controller,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n iam logs -c iam-k8s-controller $p;done
logs_k8s_device_plugin_k8s-device-plugin: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c k8s-device-plugin $p;done
logs_k8s_keystone_auth_k8s-keystone-auth: |-
  for p in $(kubectl -n kube-system get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c k8s-keystone-auth $p;done
logs_keepalived_keepalived: |-
  for p in $(kubectl -n openstack get po -owide -l "application=keepalived,component=server" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c keepalived $p;done
logs_keystone_api_keystone-api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=keystone,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c keystone-api $p;done
logs_kube-apiserver-node-1_kube-apiserver: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-apiserver,kubespray=v2" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube-apiserver $p;done
logs_kube-apiserver-node-2_kube-apiserver: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-apiserver,kubespray=v2" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube-apiserver $p;done
logs_kube-apiserver-node-3_kube-apiserver: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-apiserver,kubespray=v2" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube-apiserver $p;done
logs_kube-controller-manager-node-1_kube-controller-manager: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-controller-manager" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube-controller-manager $p;done
logs_kube-controller-manager-node-2_kube-controller-manager: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-controller-manager" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube-controller-manager $p;done
logs_kube-controller-manager-node-3_kube-controller-manager: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-controller-manager" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube-controller-manager $p;done
logs_kube-proxy-node-1_kube-proxy: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube-proxy $p;done
logs_kube-proxy-node-2_kube-proxy: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube-proxy $p;done
logs_kube-proxy-node-3_kube-proxy: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube-proxy $p;done
logs_kube-proxy-node-4_kube-proxy: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube-proxy $p;done
logs_kube-proxy-node-5_kube-proxy: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube-proxy $p;done
logs_kube-proxy-node-6_kube-proxy: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube-proxy $p;done
logs_kube-scheduler-node-1_kube-scheduler: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-scheduler" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube-scheduler $p;done
logs_kube-scheduler-node-2_kube-scheduler: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-scheduler" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube-scheduler $p;done
logs_kube-scheduler-node-3_kube-scheduler: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-scheduler" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube-scheduler $p;done
logs_kube_flannel_install-cni: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=flannel,tier=node" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c install-cni $p;done
logs_kube_flannel_kube-flannel: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=flannel,tier=node" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube-flannel $p;done
logs_kube_multus_ds_kube-multus: |-
  for p in $(kubectl -n eks-managed get po -owide -l "name=multus,tier=node" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c kube-multus $p;done
logs_kube_ovn_cni_cni-server: |-
  for p in $(kubectl -n eks-managed get po -owide -l "application=ovn,component=daemon" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c cni-server $p;done
logs_kube_ovn_controller_controller: |-
  for p in $(kubectl -n eks-managed get po -owide -l "application=ovn,component=controller" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c controller $p;done
logs_kube_state_metrics_kube-state-metrics: |-
  for p in $(kubectl -n openstack get po -owide -l "application=kube-state-metrics,component=exporter" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c kube-state-metrics $p;done
logs_libvirt_libvirt: |-
  for p in $(kubectl -n openstack get po -owide -l "application=libvirt,component=libvirt" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c libvirt $p;done
logs_libvirt_libvirt-sync: |-
  for p in $(kubectl -n openstack get po -owide -l "application=libvirt,component=libvirt" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c libvirt-sync $p;done
logs_logsidecar_injector_deploy_logsidecar-injector: |-
  for p in $(kubectl -n eks-managed get po -owide -l "logging.es.io/logsidecar-injector=logsidecar-injector-deploy" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c logsidecar-injector $p;done
logs_manager_alcubierre-manager: |-
  for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manager" --no-headers -o custom-columns=":metadata.name" );do kubectl -n alcubierre logs -c alcubierre-manager $p;done
logs_manul_manul: |-
  for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o custom-columns=":metadata.name" );do kubectl -n alcubierre logs -c manul $p;done
logs_mariadb_mariadb: |-
  for p in $(kubectl -n openstack get po -owide -l "application=mariadb,component=server" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c mariadb $p;done
logs_memcached_memcached: |-
  for p in $(kubectl -n openstack get po -owide -l "application=memcached,component=server" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c memcached $p;done
logs_metrics_server_metrics-server: |-
  for p in $(kubectl -n kube-system get po -owide -l "app.kubernetes.io/name=metrics-server,version=v0.4.4" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c metrics-server $p;done
logs_mgr_ceph-mgr: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=mgr" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c ceph-mgr $p;done
logs_mon_ceph-mon: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=mon" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c ceph-mon $p;done
logs_mongodb_mongodb: |-
  for p in $(kubectl -n openstack get po -owide -l "application=mongodb,component=server" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c mongodb $p;done
logs_nginx-proxy-node-4_nginx-proxy: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-nginx" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c nginx-proxy $p;done
logs_nginx-proxy-node-5_nginx-proxy: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-nginx" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c nginx-proxy $p;done
logs_nginx-proxy-node-6_nginx-proxy: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-nginx" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c nginx-proxy $p;done
logs_notification_center_configmap-reload: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c configmap-reload $p;done
logs_notification_center_notification-center: |-
  for p in $(kubectl -n openstack get po -owide -l "" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c notification-center $p;done
logs_nova_api_metadata_nova-api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=nova,component=metadata" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nova-api $p;done
logs_nova_api_osapi_nova-osapi: |-
  for p in $(kubectl -n openstack get po -owide -l "application=nova,component=os-api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nova-osapi $p;done
logs_nova_compute_nova-compute: |-
  for p in $(kubectl -n openstack get po -owide -l "application=nova,component=compute" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nova-compute $p;done
logs_nova_compute_nova-compute-sync: |-
  for p in $(kubectl -n openstack get po -owide -l "application=nova,component=compute" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nova-compute-sync $p;done
logs_nova_conductor_nova-conductor: |-
  for p in $(kubectl -n openstack get po -owide -l "application=nova,component=conductor" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nova-conductor $p;done
logs_nova_dashboard_api_nova-dashboard-api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=nova,component=nova-dashboard-api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nova-dashboard-api $p;done
logs_nova_dashboard_nova-dashboard: |-
  for p in $(kubectl -n openstack get po -owide -l "application=nova-dashboard,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nova-dashboard $p;done
logs_nova_maintenance_nova-maintenance: |-
  for p in $(kubectl -n openstack get po -owide -l "application=nova,component=nova-maintenance" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nova-maintenance $p;done
logs_nova_novncproxy_nova-novncproxy: |-
  for p in $(kubectl -n openstack get po -owide -l "application=nova,component=novnc-proxy" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nova-novncproxy $p;done
logs_nova_placement_api_nova-placement-api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=nova,component=placement" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nova-placement-api $p;done
logs_nova_scheduler_nova-scheduler: |-
  for p in $(kubectl -n openstack get po -owide -l "application=nova,component=scheduler" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nova-scheduler $p;done
logs_oath_gateway_oath-backend: |-
  for p in $(kubectl -n ems get po -owide -l "component=gateway" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c oath-backend $p;done
logs_oath_gateway_oathkeeper: |-
  for p in $(kubectl -n ems get po -owide -l "component=gateway" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c oathkeeper $p;done
logs_operator_essvc: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=ceph-operator" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c essvc $p;done
logs_ory_hydra_hydra: |-
  for p in $(kubectl -n iam get po -owide -l "application=ory-hydra,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n iam logs -c hydra $p;done
logs_osd_0__osd-create-pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd-create-pod $p;done
logs_osd_10__osd-create-pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd-create-pod $p;done
logs_osd_11__osd-create-pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd-create-pod $p;done
logs_osd_1__osd-create-pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd-create-pod $p;done
logs_osd_2__osd-create-pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd-create-pod $p;done
logs_osd_3__osd-create-pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd-create-pod $p;done
logs_osd_4__osd-create-pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd-create-pod $p;done
logs_osd_5__osd-create-pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd-create-pod $p;done
logs_osd_6__osd-create-pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd-create-pod $p;done
logs_osd_7__osd-create-pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd-create-pod $p;done
logs_osd_8__osd-create-pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd-create-pod $p;done
logs_osd_9__osd-create-pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd-create-pod $p;done
logs_osd_isolation_osd-auto-isolation: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd-auto-isolation $p;done
logs_ota_dashboard_ota-dashboard: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ota-dashboard,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ota-dashboard $p;done
logs_ota_dota: |-
  for p in $(kubectl -n openstack get po -owide -l "application=app,component=dota" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c dota $p;done
logs_ota_openapi_nginx: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ota,component=openapi" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nginx $p;done
logs_ota_openapi_openapi: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ota,component=openapi" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c openapi $p;done
logs_ovn_controller_ovn-controller: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-controller" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ovn-controller $p;done
logs_ovn_northd_ovn-northd: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-northd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ovn-northd $p;done
logs_ovn_ovsdb_nb_ovn-ovsdb-nb: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-nb" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ovn-ovsdb-nb $p;done
logs_ovn_ovsdb_nb_relay_ovn-ovsdb-nb-relay: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-nb-relay" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ovn-ovsdb-nb-relay $p;done
logs_ovn_ovsdb_sb_leader_relay_ovn-ovsdb-sb-leader-relay: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-sb-leader-relay" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ovn-ovsdb-sb-leader-relay $p;done
logs_ovn_ovsdb_sb_ovn-ovsdb-sb: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-sb" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ovn-ovsdb-sb $p;done
logs_ovn_ovsdb_sb_relay_ovn-ovsdb-sb-relay: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-sb-relay" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ovn-ovsdb-sb-relay $p;done
logs_ovn_tool_ovn-tool: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-tool" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ovn-tool $p;done
logs_ovn_webhook_ovn-webhook: |-
  for p in $(kubectl -n eks-managed get po -owide -l "application=ovn-webhook,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c ovn-webhook $p;done
logs_peak_api_peak-api: |-
  for p in $(kubectl -n ems get po -owide -l "application=peak,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c peak-api $p;done
logs_peak_cache_peak-cache: |-
  for p in $(kubectl -n ems get po -owide -l "application=peak,component=cache" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c peak-cache $p;done
logs_postgresql_postgresql: |-
  for p in $(kubectl -n openstack get po -owide -l "application=postgresql,component=server" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c postgresql $p;done
logs_process_exporter_process-exporter: |-
  for p in $(kubectl -n openstack get po -owide -l "application=process_exporter,component=metrics" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c process-exporter $p;done
logs_prometheus_ecms_config-reloader: |-
  for p in $(kubectl -n openstack get po -owide -l "app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=prometheus,app.kubernetes.io/version=2.26.0,operator.prometheus.io/name=ecms,operator.prometheus.io/shard=0,prometheus=ecms" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c config-reloader $p;done
logs_prometheus_ecms_prometheus: |-
  for p in $(kubectl -n openstack get po -owide -l "app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=prometheus,app.kubernetes.io/version=2.26.0,operator.prometheus.io/name=ecms,operator.prometheus.io/shard=0,prometheus=ecms" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c prometheus $p;done
logs_prometheus_ecms_thanos-sidecar: |-
  for p in $(kubectl -n openstack get po -owide -l "app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=prometheus,app.kubernetes.io/version=2.26.0,operator.prometheus.io/name=ecms,operator.prometheus.io/shard=0,prometheus=ecms" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c thanos-sidecar $p;done
logs_prometheus_exporter_openstack-metrics-exporter: |-
  for p in $(kubectl -n openstack get po -owide -l "application=prometheus-openstack-exporter,component=exporter" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c openstack-metrics-exporter $p;done
logs_prometheus_mysql_exporter_mysql-exporter: |-
  for p in $(kubectl -n openstack get po -owide -l "application=mysql,component=exporter" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c mysql-exporter $p;done
logs_prometheus_operator_prometheus-operator: |-
  for p in $(kubectl -n openstack get po -owide -l "release=prometheus" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c prometheus-operator $p;done
logs_prometheus_polling_exporter_prometheus-polling-exporter: |-
  for p in $(kubectl -n openstack get po -owide -l "application=prometheus-polling-exporter,component=exporter" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c prometheus-polling-exporter $p;done
logs_prometheus_rabbitmq_exporter_rabbitmq-exporter: |-
  for p in $(kubectl -n openstack get po -owide -l "application=rabbitmq,component=exporter" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c rabbitmq-exporter $p;done
logs_proton_dashboard_api_proton-dashboard-api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=proton_dashboard_api,component=dashboard_api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c proton-dashboard-api $p;done
logs_proton_dashboard_proton-dashboard: |-
  for p in $(kubectl -n openstack get po -owide -l "application=proton-dashboard,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c proton-dashboard $p;done
logs_proton_maintenance_proton-maintenance: |-
  for p in $(kubectl -n openstack get po -owide -l "application=proton-maintenance,component=proton-maintenance" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c proton-maintenance $p;done
logs_proton_ovn_gateway_monitor_agent_proton-ovn-gateway-monitor-agent: |-
  for p in $(kubectl -n openstack get po -owide -l "application=proton,component=proton-ovn-gateway-monitor-agent" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c proton-ovn-gateway-monitor-agent $p;done
logs_proton_ovn_metadata_agent_proton-ovn-metadata-agent: |-
  for p in $(kubectl -n openstack get po -owide -l "application=proton,component=ovn-metadata-agent" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c proton-ovn-metadata-agent $p;done
logs_proton_server_proton-server: |-
  for p in $(kubectl -n openstack get po -owide -l "application=proton,component=server" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c proton-server $p;done
logs_rabbitmq_rabbitmq: |-
  for p in $(kubectl -n openstack get po -owide -l "application=rabbitmq,component=server" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c rabbitmq $p;done
logs_rbdmirror_ceph-rbdmirror: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=rbdmirror" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c ceph-rbdmirror $p;done
logs_redis_redis: |-
  for p in $(kubectl -n openstack get po -owide -l "application=redis,component=server" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c redis $p;done
logs_rgw_ceph-rgw: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=rgw" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c ceph-rgw $p;done
logs_roller_dashboard_roller-dashboard: |-
  for p in $(kubectl -n openstack get po -owide -l "application=roller,component=roller-dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c roller-dashboard $p;done
logs_saml_iam-saml: |-
  for p in $(kubectl -n iam get po -owide -l "application=iam-saml,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n iam logs -c iam-saml $p;done
logs_secure_container_ecr_deploy_ecr-deploy: |-
  for p in $(kubectl -n eks-managed get po -owide -l "name=secure-container-ecr-deploy" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c ecr-deploy $p;done
logs_sriov_network_config_daemon_sriov-cni: |-
  for p in $(kubectl -n eks-managed get po -owide -l "component=network,openshift.io/component=network,type=infra" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c sriov-cni $p;done
logs_sriov_network_config_daemon_sriov-infiniband-cni: |-
  for p in $(kubectl -n eks-managed get po -owide -l "component=network,openshift.io/component=network,type=infra" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c sriov-infiniband-cni $p;done
logs_sriov_network_config_daemon_sriov-network-config-daemon: |-
  for p in $(kubectl -n eks-managed get po -owide -l "component=network,openshift.io/component=network,type=infra" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c sriov-network-config-daemon $p;done
logs_sriov_network_operator_sriov-operator: |-
  for p in $(kubectl -n eks-managed get po -owide -l "application=sriov-operator,component=sriovapp" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c sriov-operator $p;done
logs_status_operator_status-operator: |-
  for p in $(kubectl -n ems get po -owide -l "application=status-operator,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c status-operator $p;done
logs_target__alcubierre-target: |-
  for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=target" --no-headers -o custom-columns=":metadata.name" );do kubectl -n alcubierre logs -c alcubierre-target $p;done
logs_thanos_query_thanos-query: |-
  for p in $(kubectl -n openstack get po -owide -l "application=prometheus,component=thanos-query" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c thanos-query $p;done
logs_tiller_deploy_tiller: |-
  for p in $(kubectl -n kube-system get po -owide -l "name=tiller" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c tiller $p;done
logs_whereabouts_whereabouts: |-
  for p in $(kubectl -n eks-managed get po -owide -l "name=whereabouts,tier=node" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c whereabouts $p;done
tail__event-monitor: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c event-monitor
tail__ipmi-exporter: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ipmi-exporter
tail__node-exporter: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c node-exporter
tail__node-script-collector: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c node-script-collector
tail__smartmon-collector: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c smartmon-collector
tail_alertmanager_ecms_alertmanager: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "alertmanager=ecms,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=alertmanager,app.kubernetes.io/version=v0.21.0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c alertmanager
tail_alertmanager_ecms_config-reloader: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "alertmanager=ecms,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=alertmanager,app.kubernetes.io/version=v0.21.0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c config-reloader
tail_aodh_api_aodh-api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=aodh,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c aodh-api
tail_aodh_evaluator_aodh-evaluator: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=aodh,component=evaluator" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c aodh-evaluator
tail_aodh_listener_aodh-listener: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=aodh,component=listener" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c aodh-listener
tail_aodh_notifier_aodh-notifier: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=aodh,component=notifier" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c aodh-notifier
tail_api_iam-api: |-
  kubectl -n iam logs $(kubectl -n iam get po -owide -l "application=iam-api,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c iam-api
tail_auto_upgrade_auto-upgrade: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "application=auto-upgrade,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c auto-upgrade
tail_automation_operators_automation-operators: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=automation,component=automation-operators" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c automation-operators
tail_blackbox_exporter_blackbox-exporter: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=blackbox,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c blackbox-exporter
tail_busybox_openstack_busybox-openstack: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=busybox,component=busybox" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c busybox-openstack
tail_capsule_controller_manager_manager: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "application=capsule,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c manager
tail_ceilometer_api_ceilometer-api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ceilometer,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ceilometer-api
tail_ceilometer_central_ceilometer-central: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ceilometer,component=central" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ceilometer-central
tail_ceilometer_collector_ceilometer-collector: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ceilometer,component=collector" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ceilometer-collector
tail_ceilometer_compute_ceilometer-compute: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ceilometer,component=compute" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ceilometer-compute
tail_ceilometer_notification_ceilometer-notification: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ceilometer,component=notification" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ceilometer-notification
tail_chartmuseum_chartmuseum: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "release=chartmuseum" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c chartmuseum
tail_chrony_chrony: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=chrony,component=chrony" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c chrony
tail_cinder_api_cinder-api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=cinder,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c cinder-api
tail_cinder_dashboard_api_cinder-dashboard-api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=cinder,component=cinder-dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c cinder-dashboard-api
tail_cinder_dashboard_cinder-dashboard: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=cinder-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c cinder-dashboard
tail_cinder_scheduler_cinder-scheduler: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=cinder,component=scheduler" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c cinder-scheduler
tail_cinder_volume_cinder-volume: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=cinder,component=volume" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c cinder-volume
tail_cloud_product_operator_cloud-product-operator: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "application=cloud-product-operator,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c cloud-product-operator
tail_cluster_manager_cluster-manager: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "application=cluster-manager,component=operator" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c cluster-manager
tail_coaster_all_coaster-api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=coaster,component=all" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c coaster-api
tail_coaster_all_coaster-conductor: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=coaster,component=all" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c coaster-conductor
tail_coaster_all_coaster-other: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=coaster,component=all" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c coaster-other
tail_container_registry_dashboard_api_container-registry-dashboard-api: |-
  kubectl -n container-registry logs $(kubectl -n container-registry get po -owide -l "application=container-registry-dashboard-api,component=dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c container-registry-dashboard-api
tail_container_registry_dashboard_container-registry-dashboard: |-
  kubectl -n container-registry logs $(kubectl -n container-registry get po -owide -l "application=container-registry-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c container-registry-dashboard
tail_coredns_coredns: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-dns" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c coredns
tail_cpconfig_operator_cpconfig-operator: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "application=cpconfig-operator,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c cpconfig-operator
tail_dashboard_alcubierre-dashboard: |-
  kubectl -n alcubierre logs $(kubectl -n alcubierre get po -owide -l "application=alcubierre-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c alcubierre-dashboard
tail_dashboard_api_ems-dashboard-api: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "application=ems-dashboard-api,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ems-dashboard-api
tail_dashboard_api_opa: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "application=ems-dashboard-api,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c opa
tail_dashboard_iam-dashboard: |-
  kubectl -n iam logs $(kubectl -n iam get po -owide -l "application=iam-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c iam-dashboard
tail_docker_registry_docker-registry: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "release=docker-registry" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c docker-registry
tail_docker_registry_image-manager: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "release=docker-registry" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c image-manager
tail_dozer_mistral_api_mistral-api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c mistral-api
tail_dozer_mistral_server_mistral-server: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c mistral-server
tail_dozer_st2actionrunner_st2actionrunner: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c st2actionrunner
tail_dozer_st2api_st2api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c st2api
tail_dozer_st2auth_st2auth: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c st2auth
tail_dozer_st2garbagecollector_st2garbagecollector: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c st2garbagecollector
tail_dozer_st2notifier_st2notifier: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c st2notifier
tail_dozer_st2resultstracker_st2resultstracker: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c st2resultstracker
tail_dozer_st2rulesengine_st2rulesengine: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c st2rulesengine
tail_dozer_st2sensorcontainer_st2sensorcontainer: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c st2sensorcontainer
tail_dozer_st2stream_st2stream: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c st2stream
tail_easystack_cache_api_easystack-cache-api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=easystack-cache-api,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c easystack-cache-api
tail_easystack_cache_easystack-cache: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c easystack-cache
tail_easystack_dm_easystack-dm: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c easystack-dm
tail_easystack_hagent_api_easystack-hagent-api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c easystack-hagent-api
tail_easystack_hagent_easystack-hagent: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c easystack-hagent
tail_easystack_vmm_easystack-vmm: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c easystack-vmm
tail_ecp_dashboard_api_ecp-dashboard-api: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "application=ecp-dashboard-api,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ecp-dashboard-api
tail_ecp_dashboard_ecp-dashboard: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "application=ecp-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ecp-dashboard
tail_eks_managed_dashboard_api_eks-managed: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "application=eks-managed,component=dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c eks-managed
tail_eks_managed_dashboard_eks-managed-dashboard: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "application=eks-managed-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c eks-managed-dashboard
tail_eks_webhook_eks-webhook: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "application=eks-webhook,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c eks-webhook
tail_emla_apiserver_emla-apiserver: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c emla-apiserver
tail_esdm_api_esdm-api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c esdm-api
tail_esguides_esguides: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=esguides,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c esguides
tail_ess_automation_ess-automation: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=automation,component=ess-automation" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ess-automation
tail_estack_hagent_dashboard_api_estack-hagent-dashboard-api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=estack-hagent,component=estack-hagent-dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c estack-hagent-dashboard-api
tail_estack_hagent_dashboard_estack-hagent-dashboard: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=estack-hagent-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c estack-hagent-dashboard
tail_exporter_alcubierre-exporter: |-
  kubectl -n alcubierre logs $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c alcubierre-exporter
tail_fluentbit_fluentbit: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=fluentbit,component=daemon" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c fluentbit
tail_fluentd_api_fluentd-api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=fluentd,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c fluentd-api
tail_fluentd_fluentd: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=fluentd,component=internal" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c fluentd
tail_fluentd_httpd: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=fluentd,component=internal" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c httpd
tail_glance_api_glance-api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=glance,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c glance-api
tail_glance_dashboard_api_glance-dashboard-api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=glance,component=glance-dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c glance-dashboard-api
tail_glance_dashboard_glance-dashboard: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=glance-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c glance-dashboard
tail_glance_registry_glance-registry: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=glance,component=registry" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c glance-registry
tail_gnocchi_api_gnocchi-api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=gnocchi,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c gnocchi-api
tail_gnocchi_metricd_gnocchi-metricd: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=gnocchi,component=metricd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c gnocchi-metricd
tail_gnocchi_statsd_gnocchi-statsd: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=gnocchi,component=statsd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c gnocchi-statsd
tail_grafana_grafana: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=grafana,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c grafana
tail_hagent__hagent-node-agent: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c hagent-node-agent
tail_hagent_serve_heartbeat_hagent-serve-heartbeat: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c hagent-serve-heartbeat
tail_harbor_chartmuseum_chartmuseum: |-
  kubectl -n container-registry logs $(kubectl -n container-registry get po -owide -l "chart=container-registry,component=chartmuseum,heritage=Tiller,release=container-registry" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c chartmuseum
tail_harbor_core_core: |-
  kubectl -n container-registry logs $(kubectl -n container-registry get po -owide -l "application=harbor,component=core" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c core
tail_harbor_database_database: |-
  kubectl -n container-registry logs $(kubectl -n container-registry get po -owide -l "chart=container-registry,component=database,heritage=Tiller,release=container-registry" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c database
tail_harbor_jobservice_jobservice: |-
  kubectl -n container-registry logs $(kubectl -n container-registry get po -owide -l "chart=container-registry,component=jobservice,heritage=Tiller,release=container-registry" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c jobservice
tail_harbor_redis_redis: |-
  kubectl -n container-registry logs $(kubectl -n container-registry get po -owide -l "chart=container-registry,component=redis,heritage=Tiller,release=container-registry" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c redis
tail_harbor_registry_registry: |-
  kubectl -n container-registry logs $(kubectl -n container-registry get po -owide -l "chart=container-registry,component=registry,harbor-core=harbor-registry,heritage=Tiller,release=container-registry" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c registry
tail_harbor_registry_registryctl: |-
  kubectl -n container-registry logs $(kubectl -n container-registry get po -owide -l "chart=container-registry,component=registry,harbor-core=harbor-registry,heritage=Tiller,release=container-registry" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c registryctl
tail_heapster_heapster: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=heapster" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c heapster
tail_horizon_horizon: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=horizon,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c horizon
tail_horizon_nginx: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=horizon,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nginx
tail_ib_kubernetes_ib-kubernetes: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "application=ib-kubernetes,component=network" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ib-kubernetes
tail_ingress_api_ingress-api: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "application=ingress,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ingress-api
tail_ingress_error_pages_ingress-error-pages: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "application=ingress,component=error-pages" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ingress-error-pages
tail_k8s_controller_iam-k8s-controller: |-
  kubectl -n iam logs $(kubectl -n iam get po -owide -l "application=iam-k8s-controller,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c iam-k8s-controller
tail_k8s_device_plugin_k8s-device-plugin: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c k8s-device-plugin
tail_k8s_keystone_auth_k8s-keystone-auth: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c k8s-keystone-auth
tail_keepalived_keepalived: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=keepalived,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c keepalived
tail_keystone_api_keystone-api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=keystone,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c keystone-api
tail_kube-apiserver-node-1_kube-apiserver: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-apiserver,kubespray=v2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube-apiserver
tail_kube-apiserver-node-2_kube-apiserver: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-apiserver,kubespray=v2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube-apiserver
tail_kube-apiserver-node-3_kube-apiserver: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-apiserver,kubespray=v2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube-apiserver
tail_kube-controller-manager-node-1_kube-controller-manager: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-controller-manager" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube-controller-manager
tail_kube-controller-manager-node-2_kube-controller-manager: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-controller-manager" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube-controller-manager
tail_kube-controller-manager-node-3_kube-controller-manager: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-controller-manager" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube-controller-manager
tail_kube-proxy-node-1_kube-proxy: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube-proxy
tail_kube-proxy-node-2_kube-proxy: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube-proxy
tail_kube-proxy-node-3_kube-proxy: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube-proxy
tail_kube-proxy-node-4_kube-proxy: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube-proxy
tail_kube-proxy-node-5_kube-proxy: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube-proxy
tail_kube-proxy-node-6_kube-proxy: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube-proxy
tail_kube-scheduler-node-1_kube-scheduler: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-scheduler" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube-scheduler
tail_kube-scheduler-node-2_kube-scheduler: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-scheduler" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube-scheduler
tail_kube-scheduler-node-3_kube-scheduler: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-scheduler" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube-scheduler
tail_kube_flannel_install-cni: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=flannel,tier=node" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c install-cni
tail_kube_flannel_kube-flannel: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=flannel,tier=node" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube-flannel
tail_kube_multus_ds_kube-multus: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "name=multus,tier=node" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube-multus
tail_kube_ovn_cni_cni-server: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "application=ovn,component=daemon" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c cni-server
tail_kube_ovn_controller_controller: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "application=ovn,component=controller" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c controller
tail_kube_state_metrics_kube-state-metrics: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=kube-state-metrics,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube-state-metrics
tail_libvirt_libvirt: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=libvirt,component=libvirt" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c libvirt
tail_libvirt_libvirt-sync: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=libvirt,component=libvirt" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c libvirt-sync
tail_logsidecar_injector_deploy_logsidecar-injector: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "logging.es.io/logsidecar-injector=logsidecar-injector-deploy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c logsidecar-injector
tail_manager_alcubierre-manager: |-
  kubectl -n alcubierre logs $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manager" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c alcubierre-manager
tail_manul_manul: |-
  kubectl -n alcubierre logs $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c manul
tail_mariadb_mariadb: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=mariadb,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c mariadb
tail_memcached_memcached: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=memcached,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c memcached
tail_metrics_server_metrics-server: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "app.kubernetes.io/name=metrics-server,version=v0.4.4" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c metrics-server
tail_mgr_ceph-mgr: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=mgr" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ceph-mgr
tail_mon_ceph-mon: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=mon" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ceph-mon
tail_mongodb_mongodb: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=mongodb,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c mongodb
tail_nginx-proxy-node-4_nginx-proxy: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-nginx" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nginx-proxy
tail_nginx-proxy-node-5_nginx-proxy: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-nginx" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nginx-proxy
tail_nginx-proxy-node-6_nginx-proxy: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-nginx" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nginx-proxy
tail_notification_center_configmap-reload: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c configmap-reload
tail_notification_center_notification-center: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c notification-center
tail_nova_api_metadata_nova-api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=nova,component=metadata" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nova-api
tail_nova_api_osapi_nova-osapi: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=nova,component=os-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nova-osapi
tail_nova_compute_nova-compute: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=nova,component=compute" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nova-compute
tail_nova_compute_nova-compute-sync: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=nova,component=compute" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nova-compute-sync
tail_nova_conductor_nova-conductor: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=nova,component=conductor" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nova-conductor
tail_nova_dashboard_api_nova-dashboard-api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=nova,component=nova-dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nova-dashboard-api
tail_nova_dashboard_nova-dashboard: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=nova-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nova-dashboard
tail_nova_maintenance_nova-maintenance: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=nova,component=nova-maintenance" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nova-maintenance
tail_nova_novncproxy_nova-novncproxy: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=nova,component=novnc-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nova-novncproxy
tail_nova_placement_api_nova-placement-api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=nova,component=placement" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nova-placement-api
tail_nova_scheduler_nova-scheduler: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=nova,component=scheduler" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nova-scheduler
tail_oath_gateway_oath-backend: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "component=gateway" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c oath-backend
tail_oath_gateway_oathkeeper: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "component=gateway" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c oathkeeper
tail_operator_essvc: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=ceph-operator" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c essvc
tail_ory_hydra_hydra: |-
  kubectl -n iam logs $(kubectl -n iam get po -owide -l "application=ory-hydra,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c hydra
tail_osd_0__osd-create-pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd-create-pod
tail_osd_10__osd-create-pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd-create-pod
tail_osd_11__osd-create-pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd-create-pod
tail_osd_1__osd-create-pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd-create-pod
tail_osd_2__osd-create-pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd-create-pod
tail_osd_3__osd-create-pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd-create-pod
tail_osd_4__osd-create-pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd-create-pod
tail_osd_5__osd-create-pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd-create-pod
tail_osd_6__osd-create-pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd-create-pod
tail_osd_7__osd-create-pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd-create-pod
tail_osd_8__osd-create-pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd-create-pod
tail_osd_9__osd-create-pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd-create-pod
tail_osd_isolation_osd-auto-isolation: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd-auto-isolation
tail_ota_dashboard_ota-dashboard: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ota-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ota-dashboard
tail_ota_dota: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=app,component=dota" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c dota
tail_ota_openapi_nginx: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ota,component=openapi" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nginx
tail_ota_openapi_openapi: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ota,component=openapi" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c openapi
tail_ovn_controller_ovn-controller: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-controller" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ovn-controller
tail_ovn_northd_ovn-northd: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-northd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ovn-northd
tail_ovn_ovsdb_nb_ovn-ovsdb-nb: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-nb" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ovn-ovsdb-nb
tail_ovn_ovsdb_nb_relay_ovn-ovsdb-nb-relay: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-nb-relay" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ovn-ovsdb-nb-relay
tail_ovn_ovsdb_sb_leader_relay_ovn-ovsdb-sb-leader-relay: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-sb-leader-relay" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ovn-ovsdb-sb-leader-relay
tail_ovn_ovsdb_sb_ovn-ovsdb-sb: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-sb" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ovn-ovsdb-sb
tail_ovn_ovsdb_sb_relay_ovn-ovsdb-sb-relay: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-sb-relay" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ovn-ovsdb-sb-relay
tail_ovn_tool_ovn-tool: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-tool" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ovn-tool
tail_ovn_webhook_ovn-webhook: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "application=ovn-webhook,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ovn-webhook
tail_peak_api_peak-api: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "application=peak,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c peak-api
tail_peak_cache_peak-cache: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "application=peak,component=cache" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c peak-cache
tail_postgresql_postgresql: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=postgresql,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c postgresql
tail_process_exporter_process-exporter: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=process_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c process-exporter
tail_prometheus_ecms_config-reloader: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=prometheus,app.kubernetes.io/version=2.26.0,operator.prometheus.io/name=ecms,operator.prometheus.io/shard=0,prometheus=ecms" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c config-reloader
tail_prometheus_ecms_prometheus: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=prometheus,app.kubernetes.io/version=2.26.0,operator.prometheus.io/name=ecms,operator.prometheus.io/shard=0,prometheus=ecms" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c prometheus
tail_prometheus_ecms_thanos-sidecar: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=prometheus,app.kubernetes.io/version=2.26.0,operator.prometheus.io/name=ecms,operator.prometheus.io/shard=0,prometheus=ecms" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c thanos-sidecar
tail_prometheus_exporter_openstack-metrics-exporter: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=prometheus-openstack-exporter,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c openstack-metrics-exporter
tail_prometheus_mysql_exporter_mysql-exporter: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=mysql,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c mysql-exporter
tail_prometheus_operator_prometheus-operator: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "release=prometheus" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c prometheus-operator
tail_prometheus_polling_exporter_prometheus-polling-exporter: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=prometheus-polling-exporter,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c prometheus-polling-exporter
tail_prometheus_rabbitmq_exporter_rabbitmq-exporter: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=rabbitmq,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c rabbitmq-exporter
tail_proton_dashboard_api_proton-dashboard-api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=proton_dashboard_api,component=dashboard_api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c proton-dashboard-api
tail_proton_dashboard_proton-dashboard: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=proton-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c proton-dashboard
tail_proton_maintenance_proton-maintenance: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=proton-maintenance,component=proton-maintenance" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c proton-maintenance
tail_proton_ovn_gateway_monitor_agent_proton-ovn-gateway-monitor-agent: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=proton,component=proton-ovn-gateway-monitor-agent" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c proton-ovn-gateway-monitor-agent
tail_proton_ovn_metadata_agent_proton-ovn-metadata-agent: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=proton,component=ovn-metadata-agent" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c proton-ovn-metadata-agent
tail_proton_server_proton-server: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=proton,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c proton-server
tail_rabbitmq_rabbitmq: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=rabbitmq,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c rabbitmq
tail_rbdmirror_ceph-rbdmirror: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=rbdmirror" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ceph-rbdmirror
tail_redis_redis: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=redis,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c redis
tail_rgw_ceph-rgw: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=rgw" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ceph-rgw
tail_roller_dashboard_roller-dashboard: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=roller,component=roller-dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c roller-dashboard
tail_saml_iam-saml: |-
  kubectl -n iam logs $(kubectl -n iam get po -owide -l "application=iam-saml,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c iam-saml
tail_secure_container_ecr_deploy_ecr-deploy: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "name=secure-container-ecr-deploy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ecr-deploy
tail_sriov_network_config_daemon_sriov-cni: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "component=network,openshift.io/component=network,type=infra" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c sriov-cni
tail_sriov_network_config_daemon_sriov-infiniband-cni: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "component=network,openshift.io/component=network,type=infra" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c sriov-infiniband-cni
tail_sriov_network_config_daemon_sriov-network-config-daemon: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "component=network,openshift.io/component=network,type=infra" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c sriov-network-config-daemon
tail_sriov_network_operator_sriov-operator: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "application=sriov-operator,component=sriovapp" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c sriov-operator
tail_status_operator_status-operator: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "application=status-operator,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c status-operator
tail_target__alcubierre-target: |-
  kubectl -n alcubierre logs $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=target" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c alcubierre-target
tail_thanos_query_thanos-query: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=prometheus,component=thanos-query" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c thanos-query
tail_tiller_deploy_tiller: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "name=tiller" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c tiller
tail_whereabouts_whereabouts: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "name=whereabouts,tier=node" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c whereabouts
