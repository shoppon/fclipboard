delete_pod_alcubierre_dashboard: |-
  kubectl -n alcubierre delete po -l application=alcubierre-dashboard,component=dashboard
delete_pod_alcubierre_exporter: "kubectl -n alcubierre delete po -l application=alcubierre,component=exporter"
delete_pod_alcubierre_manager: "kubectl -n alcubierre delete po -l application=alcubierre,component=manager"
delete_pod_alcubierre_manul: "kubectl -n alcubierre delete po -l application=alcubierre,component=manul"
delete_pod_alcubierre_target_node_1: |-
  kubectl -n alcubierre delete po -l app=alcubierre-target-node-1,application=alcubierre,component=target
delete_pod_alcubierre_target_node_2: |-
  kubectl -n alcubierre delete po -l app=alcubierre-target-node-2,application=alcubierre,component=target
delete_pod_alcubierre_target_node_3: |-
  kubectl -n alcubierre delete po -l app=alcubierre-target-node-3,application=alcubierre,component=target
delete_pod_alertmanager_ecms: |-
  kubectl -n openstack delete po -l alertmanager=ecms,app=alertmanager,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=alertmanager,app.kubernetes.io/version=v0.21.0,statefulset.kubernetes.io/pod-name=alertmanager-ecms-2
delete_pod_aodh_api: "kubectl -n openstack delete po -l application=aodh,component=api"
delete_pod_aodh_evaluator: "kubectl -n openstack delete po -l application=aodh,component=evaluator"
delete_pod_aodh_listener: "kubectl -n openstack delete po -l application=aodh,component=listener"
delete_pod_aodh_notifier: "kubectl -n openstack delete po -l application=aodh,component=notifier"
delete_pod_auto_upgrade: "kubectl -n ems delete po -l application=auto-upgrade,component=api"
delete_pod_automation_operators: |-
  kubectl -n openstack delete po -l application=automation,component=automation-operators
delete_pod_blackbox_exporter: "kubectl -n openstack delete po -l application=blackbox,component=exporter"
delete_pod_busybox_openstack: "kubectl -n openstack delete po -l application=busybox,component=busybox"
delete_pod_capsule_controller_manager: "kubectl -n eks-managed delete po -l application=capsule,component=api"
delete_pod_ceilometer_api: "kubectl -n openstack delete po -l application=ceilometer,component=api"
delete_pod_ceilometer_central: "kubectl -n openstack delete po -l application=ceilometer,component=central"
delete_pod_ceilometer_collector: "kubectl -n openstack delete po -l application=ceilometer,component=collector"
delete_pod_ceilometer_compute: "kubectl -n openstack delete po -l application=ceilometer,component=compute"
delete_pod_ceilometer_notification: "kubectl -n openstack delete po -l application=ceilometer,component=notification"
delete_pod_ceph_mgr: "kubectl -n ceph delete po -l application=ceph,component=mgr"
delete_pod_ceph_mon: "kubectl -n ceph delete po -l application=ceph,component=mon"
delete_pod_ceph_operator: "kubectl -n ceph delete po -l application=ceph,component=ceph-operator"
delete_pod_ceph_osd_0_node_2: "kubectl -n ceph delete po -l application=ceph,component=osd"
delete_pod_ceph_osd_10_node_1: "kubectl -n ceph delete po -l application=ceph,component=osd"
delete_pod_ceph_osd_11_node_1: "kubectl -n ceph delete po -l application=ceph,component=osd"
delete_pod_ceph_osd_1_node_2: "kubectl -n ceph delete po -l application=ceph,component=osd"
delete_pod_ceph_osd_2_node_2: "kubectl -n ceph delete po -l application=ceph,component=osd"
delete_pod_ceph_osd_3_node_2: "kubectl -n ceph delete po -l application=ceph,component=osd"
delete_pod_ceph_osd_4_node_3: "kubectl -n ceph delete po -l application=ceph,component=osd"
delete_pod_ceph_osd_5_node_3: "kubectl -n ceph delete po -l application=ceph,component=osd"
delete_pod_ceph_osd_6_node_3: "kubectl -n ceph delete po -l application=ceph,component=osd"
delete_pod_ceph_osd_7_node_3: "kubectl -n ceph delete po -l application=ceph,component=osd"
delete_pod_ceph_osd_8_node_1: "kubectl -n ceph delete po -l application=ceph,component=osd"
delete_pod_ceph_osd_9_node_1: "kubectl -n ceph delete po -l application=ceph,component=osd"
delete_pod_ceph_osd_isolation: "kubectl -n ceph delete po -l application=ceph,component=osd"
delete_pod_ceph_rbdmirror: "kubectl -n ceph delete po -l application=ceph,component=rbdmirror"
delete_pod_ceph_rgw: "kubectl -n ceph delete po -l application=ceph,component=rgw"
delete_pod_chartmuseum: |-
  kubectl -n openstack delete po -l app=chartmuseum,release=chartmuseum,statefulset.kubernetes.io/pod-name=chartmuseum-0
delete_pod_chrony: "kubectl -n openstack delete po -l application=chrony,component=chrony"
delete_pod_cinder_api: "kubectl -n openstack delete po -l application=cinder,component=api"
delete_pod_cinder_dashboard: |-
  kubectl -n openstack delete po -l application=cinder-dashboard,component=dashboard
delete_pod_cinder_dashboard_api: |-
  kubectl -n openstack delete po -l application=cinder,component=cinder-dashboard-api
delete_pod_cinder_scheduler: "kubectl -n openstack delete po -l application=cinder,component=scheduler"
delete_pod_cinder_volume: "kubectl -n openstack delete po -l application=cinder,component=volume"
delete_pod_cloud_product_operator: "kubectl -n ems delete po -l application=cloud-product-operator,component=api"
delete_pod_cluster_manager: |-
  kubectl -n eks-managed delete po -l application=cluster-manager,component=operator
delete_pod_coaster_all: |-
  kubectl -n openstack delete po -l application=coaster,component=all,statefulset.kubernetes.io/pod-name=coaster-all-0
delete_pod_container_registry_dashboard: |-
  kubectl -n container-registry delete po -l application=container-registry-dashboard,component=dashboard
delete_pod_container_registry_dashboard_api: |-
  kubectl -n container-registry delete po -l application=container-registry-dashboard-api,component=dashboard-api
delete_pod_coredns: "kubectl -n kube-system delete po -l k8s-app=kube-dns"
delete_pod_cpconfig_operator: "kubectl -n ems delete po -l application=cpconfig-operator,component=api"
delete_pod_docker_registry: |-
  kubectl -n openstack delete po -l app=docker-registry,release=docker-registry,statefulset.kubernetes.io/pod-name=docker-registry-0
delete_pod_dozer_mistral_api: "kubectl -n openstack delete po -l app=dozer-mistral-api"
delete_pod_dozer_mistral_server: "kubectl -n openstack delete po -l app=dozer-mistral-server"
delete_pod_dozer_st2actionrunner: "kubectl -n openstack delete po -l app=dozer-st2actionrunner"
delete_pod_dozer_st2api: "kubectl -n openstack delete po -l app=dozer-st2api"
delete_pod_dozer_st2auth: "kubectl -n openstack delete po -l app=dozer-st2auth"
delete_pod_dozer_st2garbagecollector: "kubectl -n openstack delete po -l app=dozer-st2garbagecollector"
delete_pod_dozer_st2notifier: "kubectl -n openstack delete po -l app=dozer-st2notifier"
delete_pod_dozer_st2resultstracker: "kubectl -n openstack delete po -l app=dozer-st2resultstracker"
delete_pod_dozer_st2rulesengine: "kubectl -n openstack delete po -l app=dozer-st2rulesengine"
delete_pod_dozer_st2sensorcontainer: "kubectl -n openstack delete po -l app=dozer-st2sensorcontainer"
delete_pod_dozer_st2stream: "kubectl -n openstack delete po -l app=dozer-st2stream"
delete_pod_easystack_cache: "kubectl -n openstack delete po -l app=easystack-cache"
delete_pod_easystack_cache_api: |-
  kubectl -n openstack delete po -l application=easystack-cache-api,component=server
delete_pod_easystack_dm: "kubectl -n openstack delete po -l app=easystack-dm"
delete_pod_easystack_hagent: "kubectl -n openstack delete po -l app=easystack-hagent"
delete_pod_easystack_hagent_api: "kubectl -n openstack delete po -l app=easystack-hagent-api"
delete_pod_easystack_vmm: "kubectl -n openstack delete po -l app=easystack-vmm"
delete_pod_ecp_dashboard: "kubectl -n ems delete po -l application=ecp-dashboard,component=dashboard"
delete_pod_ecp_dashboard_api: "kubectl -n ems delete po -l application=ecp-dashboard-api,component=api"
delete_pod_eks_managed_dashboard: |-
  kubectl -n eks-managed delete po -l application=eks-managed-dashboard,component=dashboard
delete_pod_eks_managed_dashboard_api: |-
  kubectl -n eks-managed delete po -l application=eks-managed,component=dashboard-api
delete_pod_eks_webhook: "kubectl -n eks-managed delete po -l application=eks-webhook,component=api"
delete_pod_emla_apiserver: "kubectl -n openstack delete po -l app=emla-apiserver"
delete_pod_ems_dashboard_api: "kubectl -n ems delete po -l application=ems-dashboard-api,component=api"
delete_pod_esdm_api: "kubectl -n openstack delete po -l app=esdm-api"
delete_pod_esguides: "kubectl -n openstack delete po -l application=esguides,component=server"
delete_pod_ess_automation: |-
  kubectl -n openstack delete po -l application=automation,component=ess-automation
delete_pod_estack_hagent_dashboard: |-
  kubectl -n openstack delete po -l application=estack-hagent-dashboard,component=dashboard
delete_pod_estack_hagent_dashboard_api: |-
  kubectl -n openstack delete po -l application=estack-hagent,component=estack-hagent-dashboard-api
delete_pod_fluentbit: "kubectl -n openstack delete po -l application=fluentbit,component=daemon"
delete_pod_fluentd: |-
  kubectl -n openstack delete po -l application=fluentd,component=internal,statefulset.kubernetes.io/pod-name=fluentd-2
delete_pod_fluentd_api: "kubectl -n openstack delete po -l application=fluentd,component=api"
delete_pod_glance_api: "kubectl -n openstack delete po -l application=glance,component=api"
delete_pod_glance_dashboard: |-
  kubectl -n openstack delete po -l application=glance-dashboard,component=dashboard
delete_pod_glance_dashboard_api: |-
  kubectl -n openstack delete po -l application=glance,component=glance-dashboard-api
delete_pod_glance_registry: "kubectl -n openstack delete po -l application=glance,component=registry"
delete_pod_gnocchi_api: "kubectl -n openstack delete po -l application=gnocchi,component=api"
delete_pod_gnocchi_metricd: "kubectl -n openstack delete po -l application=gnocchi,component=metricd"
delete_pod_gnocchi_statsd: "kubectl -n openstack delete po -l application=gnocchi,component=statsd"
delete_pod_grafana: "kubectl -n openstack delete po -l application=grafana,component=dashboard"
delete_pod_hagent_node_agent: "kubectl -n openstack delete po -l app=hagent-node-agent"
delete_pod_hagent_serve_heartbeat: "kubectl -n openstack delete po -l app=hagent-serve-heartbeat"
delete_pod_harbor_chartmuseum: |-
  kubectl -n container-registry delete po -l app=harbor,chart=container-registry,component=chartmuseum,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-chartmuseum-0
delete_pod_harbor_core: "kubectl -n container-registry delete po -l application=harbor,component=core"
delete_pod_harbor_database: |-
  kubectl -n container-registry delete po -l app=harbor,chart=container-registry,component=database,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-database-0
delete_pod_harbor_jobservice: |-
  kubectl -n container-registry delete po -l app=harbor,chart=container-registry,component=jobservice,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-jobservice-0
delete_pod_harbor_redis: |-
  kubectl -n container-registry delete po -l app=harbor,chart=container-registry,component=redis,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-redis-0
delete_pod_harbor_registry: |-
  kubectl -n container-registry delete po -l app=harbor,chart=container-registry,component=registry,harbor-core=harbor-registry,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-registry-0
delete_pod_heapster: "kubectl -n kube-system delete po -l k8s-app=heapster"
delete_pod_horizon: "kubectl -n openstack delete po -l application=horizon,component=server"
delete_pod_iam_api: "kubectl -n iam delete po -l application=iam-api,component=api"
delete_pod_iam_dashboard: "kubectl -n iam delete po -l application=iam-dashboard,component=dashboard"
delete_pod_iam_k8s_controller: "kubectl -n iam delete po -l application=iam-k8s-controller,component=api"
delete_pod_iam_saml: "kubectl -n iam delete po -l application=iam-saml,component=api"
delete_pod_ib_kubernetes: "kubectl -n eks-managed delete po -l application=ib-kubernetes,component=network"
delete_pod_ingress_api: |-
  kubectl -n kube-system delete po -l app=ingress-api,application=ingress,component=api
delete_pod_ingress_error_pages: "kubectl -n kube-system delete po -l application=ingress,component=error-pages"
delete_pod_k8s_device_plugin: "kubectl -n openstack delete po -l app=k8s-device-plugin"
delete_pod_k8s_keystone_auth: "kubectl -n kube-system delete po -l app=k8s-keystone-auth"
delete_pod_keepalived: "kubectl -n openstack delete po -l application=keepalived,component=server"
delete_pod_keystone_api: "kubectl -n openstack delete po -l application=keystone,component=api"
delete_pod_kube-apiserver-node-1: "kubectl -n kube-system delete po -l k8s-app=kube-apiserver,kubespray=v2"
delete_pod_kube-apiserver-node-2: "kubectl -n kube-system delete po -l k8s-app=kube-apiserver,kubespray=v2"
delete_pod_kube-apiserver-node-3: "kubectl -n kube-system delete po -l k8s-app=kube-apiserver,kubespray=v2"
delete_pod_kube-controller-manager-node-1: "kubectl -n kube-system delete po -l k8s-app=kube-controller-manager"
delete_pod_kube-controller-manager-node-2: "kubectl -n kube-system delete po -l k8s-app=kube-controller-manager"
delete_pod_kube-controller-manager-node-3: "kubectl -n kube-system delete po -l k8s-app=kube-controller-manager"
delete_pod_kube-proxy-node-1: "kubectl -n kube-system delete po -l k8s-app=kube-proxy"
delete_pod_kube-proxy-node-2: "kubectl -n kube-system delete po -l k8s-app=kube-proxy"
delete_pod_kube-proxy-node-3: "kubectl -n kube-system delete po -l k8s-app=kube-proxy"
delete_pod_kube-proxy-node-4: "kubectl -n kube-system delete po -l k8s-app=kube-proxy"
delete_pod_kube-proxy-node-5: "kubectl -n kube-system delete po -l k8s-app=kube-proxy"
delete_pod_kube-proxy-node-6: "kubectl -n kube-system delete po -l k8s-app=kube-proxy"
delete_pod_kube-scheduler-node-1: "kubectl -n kube-system delete po -l k8s-app=kube-scheduler"
delete_pod_kube-scheduler-node-2: "kubectl -n kube-system delete po -l k8s-app=kube-scheduler"
delete_pod_kube-scheduler-node-3: "kubectl -n kube-system delete po -l k8s-app=kube-scheduler"
delete_pod_kube_flannel: "kubectl -n kube-system delete po -l k8s-app=flannel,tier=node"
delete_pod_kube_multus_ds: "kubectl -n eks-managed delete po -l app=multus,name=multus,tier=node"
delete_pod_kube_ovn_cni: "kubectl -n eks-managed delete po -l application=ovn,component=daemon"
delete_pod_kube_ovn_controller: "kubectl -n eks-managed delete po -l application=ovn,component=controller"
delete_pod_kube_state_metrics: |-
  kubectl -n openstack delete po -l application=kube-state-metrics,component=exporter
delete_pod_libvirt: "kubectl -n openstack delete po -l application=libvirt,component=libvirt"
delete_pod_logsidecar_injector_deploy: |-
  kubectl -n eks-managed delete po -l logging.es.io/logsidecar-injector=logsidecar-injector-deploy
delete_pod_mariadb: |-
  kubectl -n openstack delete po -l application=mariadb,component=server,statefulset.kubernetes.io/pod-name=mariadb-2
delete_pod_memcached: "kubectl -n openstack delete po -l application=memcached,component=server"
delete_pod_metrics_server: |-
  kubectl -n kube-system delete po -l app.kubernetes.io/name=metrics-server,version=v0.4.4
delete_pod_mongodb: |-
  kubectl -n openstack delete po -l application=mongodb,component=server,statefulset.kubernetes.io/pod-name=mongodb-0
delete_pod_nginx-proxy-node-4: "kubectl -n kube-system delete po -l k8s-app=kube-nginx"
delete_pod_nginx-proxy-node-5: "kubectl -n kube-system delete po -l k8s-app=kube-nginx"
delete_pod_nginx-proxy-node-6: "kubectl -n kube-system delete po -l k8s-app=kube-nginx"
delete_pod_node_exporter: "kubectl -n openstack delete po -l application=node_exporter,component=metrics"
delete_pod_notification_center: "kubectl -n openstack delete po -l app=notification-center"
delete_pod_nova_api_metadata: "kubectl -n openstack delete po -l application=nova,component=metadata"
delete_pod_nova_api_osapi: "kubectl -n openstack delete po -l application=nova,component=os-api"
delete_pod_nova_compute: "kubectl -n openstack delete po -l application=nova,component=compute"
delete_pod_nova_conductor: "kubectl -n openstack delete po -l application=nova,component=conductor"
delete_pod_nova_dashboard: "kubectl -n openstack delete po -l application=nova-dashboard,component=dashboard"
delete_pod_nova_dashboard_api: "kubectl -n openstack delete po -l application=nova,component=nova-dashboard-api"
delete_pod_nova_maintenance: "kubectl -n openstack delete po -l application=nova,component=nova-maintenance"
delete_pod_nova_novncproxy: "kubectl -n openstack delete po -l application=nova,component=novnc-proxy"
delete_pod_nova_placement_api: "kubectl -n openstack delete po -l application=nova,component=placement"
delete_pod_nova_scheduler: "kubectl -n openstack delete po -l application=nova,component=scheduler"
delete_pod_oath_gateway: "kubectl -n ems delete po -l app=oath,component=gateway"
delete_pod_ory_hydra: "kubectl -n iam delete po -l application=ory-hydra,component=api"
delete_pod_ota: |-
  kubectl -n openstack delete po -l application=app,component=dota,statefulset.kubernetes.io/pod-name=ota-0
delete_pod_ota_dashboard: "kubectl -n openstack delete po -l application=ota-dashboard,component=dashboard"
delete_pod_ota_openapi: |-
  kubectl -n openstack delete po -l application=ota,component=openapi,statefulset.kubernetes.io/pod-name=ota-openapi-0
delete_pod_ovn_controller: "kubectl -n openstack delete po -l application=ovn,component=ovn-controller"
delete_pod_ovn_northd: |-
  kubectl -n openstack delete po -l application=ovn,component=ovn-northd,statefulset.kubernetes.io/pod-name=ovn-northd-2
delete_pod_ovn_ovsdb_nb: |-
  kubectl -n openstack delete po -l application=ovn,component=ovn-ovsdb-nb,statefulset.kubernetes.io/pod-name=ovn-ovsdb-nb-2
delete_pod_ovn_ovsdb_nb_relay: "kubectl -n openstack delete po -l application=ovn,component=ovn-ovsdb-nb-relay"
delete_pod_ovn_ovsdb_sb: |-
  kubectl -n openstack delete po -l application=ovn,component=ovn-ovsdb-sb,statefulset.kubernetes.io/pod-name=ovn-ovsdb-sb-2
delete_pod_ovn_ovsdb_sb_leader_relay: |-
  kubectl -n openstack delete po -l application=ovn,component=ovn-ovsdb-sb-leader-relay
delete_pod_ovn_ovsdb_sb_relay: "kubectl -n openstack delete po -l application=ovn,component=ovn-ovsdb-sb-relay"
delete_pod_ovn_tool: |-
  kubectl -n openstack delete po -l application=ovn,component=ovn-tool,statefulset.kubernetes.io/pod-name=ovn-tool-0
delete_pod_ovn_webhook: "kubectl -n eks-managed delete po -l application=ovn-webhook,component=api"
delete_pod_peak_api: "kubectl -n ems delete po -l application=peak,component=api"
delete_pod_peak_cache: "kubectl -n ems delete po -l application=peak,component=cache"
delete_pod_postgresql: |-
  kubectl -n openstack delete po -l application=postgresql,component=server,statefulset.kubernetes.io/pod-name=postgresql-0
delete_pod_process_exporter: "kubectl -n openstack delete po -l application=process_exporter,component=metrics"
delete_pod_prometheus_ecms: |-
  kubectl -n openstack delete po -l app=prometheus,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=prometheus,app.kubernetes.io/version=2.26.0,operator.prometheus.io/name=ecms,operator.prometheus.io/shard=0,prometheus=ecms,statefulset.kubernetes.io/pod-name=prometheus-ecms-1
delete_pod_prometheus_mysql_exporter: "kubectl -n openstack delete po -l application=mysql,component=exporter"
delete_pod_prometheus_openstack_exporter: |-
  kubectl -n openstack delete po -l application=prometheus-openstack-exporter,component=exporter
delete_pod_prometheus_operator: "kubectl -n openstack delete po -l app=prometheus-operator,release=prometheus"
delete_pod_prometheus_polling_exporter: |-
  kubectl -n openstack delete po -l application=prometheus-polling-exporter,component=exporter
delete_pod_prometheus_rabbitmq_exporter: "kubectl -n openstack delete po -l application=rabbitmq,component=exporter"
delete_pod_proton_dashboard: |-
  kubectl -n openstack delete po -l application=proton-dashboard,component=dashboard
delete_pod_proton_dashboard_api: |-
  kubectl -n openstack delete po -l application=proton_dashboard_api,component=dashboard_api
delete_pod_proton_maintenance: |-
  kubectl -n openstack delete po -l application=proton-maintenance,component=proton-maintenance
delete_pod_proton_ovn_gateway_monitor_agent: |-
  kubectl -n openstack delete po -l application=proton,component=proton-ovn-gateway-monitor-agent
delete_pod_proton_ovn_metadata_agent: |-
  kubectl -n openstack delete po -l application=proton,component=ovn-metadata-agent
delete_pod_proton_server: "kubectl -n openstack delete po -l application=proton,component=server"
delete_pod_rabbitmq: |-
  kubectl -n openstack delete po -l application=rabbitmq,component=server,statefulset.kubernetes.io/pod-name=rabbitmq-2
delete_pod_redis: "kubectl -n openstack delete po -l application=redis,component=server"
delete_pod_roller_dashboard: "kubectl -n openstack delete po -l application=roller,component=roller-dashboard"
delete_pod_secure_container_ecr_deploy: |-
  kubectl -n eks-managed delete po -l app=ecr-deploy,name=secure-container-ecr-deploy
delete_pod_sriov_network_config_daemon: |-
  kubectl -n eks-managed delete po -l app=sriov-network-config-daemon,component=network,openshift.io/component=network,type=infra
delete_pod_sriov_network_operator: |-
  kubectl -n eks-managed delete po -l application=sriov-operator,component=sriovapp
delete_pod_status_operator: "kubectl -n ems delete po -l application=status-operator,component=api"
delete_pod_thanos_query: "kubectl -n openstack delete po -l application=prometheus,component=thanos-query"
delete_pod_tiller_deploy: "kubectl -n kube-system delete po -l app=helm,name=tiller"
delete_pod_whereabouts: "kubectl -n eks-managed delete po -l app=whereabouts,name=whereabouts,tier=node"
exec_pod_alcubierre_dashboard_alcubierre_dashboard: |-
  kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "application=alcubierre-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c alcubierre_dashboard -- bash
exec_pod_alcubierre_exporter_alcubierre_exporter: |-
  kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c alcubierre_exporter -- bash
exec_pod_alcubierre_manager_alcubierre_manager: |-
  kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manager" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c alcubierre_manager -- bash
exec_pod_alcubierre_manul_manul: |-
  kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c manul -- bash
exec_pod_alcubierre_target_node_1_alcubierre_target: |-
  kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "app=alcubierre-target-node-1,application=alcubierre,component=target" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c alcubierre_target -- bash
exec_pod_alcubierre_target_node_2_alcubierre_target: |-
  kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "app=alcubierre-target-node-2,application=alcubierre,component=target" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c alcubierre_target -- bash
exec_pod_alcubierre_target_node_3_alcubierre_target: |-
  kubectl exec -it -n alcubierre $(kubectl -n alcubierre get po -owide -l "app=alcubierre-target-node-3,application=alcubierre,component=target" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c alcubierre_target -- bash
exec_pod_alertmanager_ecms_alertmanager: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "alertmanager=ecms,app=alertmanager,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=alertmanager,app.kubernetes.io/version=v0.21.0,statefulset.kubernetes.io/pod-name=alertmanager-ecms-2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c alertmanager -- bash
exec_pod_alertmanager_ecms_config_reloader: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "alertmanager=ecms,app=alertmanager,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=alertmanager,app.kubernetes.io/version=v0.21.0,statefulset.kubernetes.io/pod-name=alertmanager-ecms-2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c config_reloader -- bash
exec_pod_aodh_api_aodh_api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=aodh,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c aodh_api -- bash
exec_pod_aodh_evaluator_aodh_evaluator: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=aodh,component=evaluator" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c aodh_evaluator -- bash
exec_pod_aodh_listener_aodh_listener: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=aodh,component=listener" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c aodh_listener -- bash
exec_pod_aodh_notifier_aodh_notifier: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=aodh,component=notifier" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c aodh_notifier -- bash
exec_pod_auto_upgrade_auto_upgrade: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "application=auto-upgrade,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c auto_upgrade -- bash
exec_pod_automation_operators_automation_operators: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=automation,component=automation-operators" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c automation_operators -- bash
exec_pod_blackbox_exporter_blackbox_exporter: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=blackbox,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c blackbox_exporter -- bash
exec_pod_busybox_openstack_busybox_openstack: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=busybox,component=busybox" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c busybox_openstack -- bash
exec_pod_capsule_controller_manager_manager: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "application=capsule,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c manager -- bash
exec_pod_ceilometer_api_ceilometer_api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ceilometer,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ceilometer_api -- bash
exec_pod_ceilometer_central_ceilometer_central: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ceilometer,component=central" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ceilometer_central -- bash
exec_pod_ceilometer_collector_ceilometer_collector: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ceilometer,component=collector" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ceilometer_collector -- bash
exec_pod_ceilometer_compute_ceilometer_compute: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ceilometer,component=compute" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ceilometer_compute -- bash
exec_pod_ceilometer_notification_ceilometer_notification: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ceilometer,component=notification" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ceilometer_notification -- bash
exec_pod_ceph_mgr_ceph_mgr: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=mgr" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ceph_mgr -- bash
exec_pod_ceph_mon_ceph_mon: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=mon" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ceph_mon -- bash
exec_pod_ceph_operator_essvc: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=ceph-operator" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c essvc -- bash
exec_pod_ceph_osd_0_node_2_osd_create_pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd_create_pod -- bash
exec_pod_ceph_osd_10_node_1_osd_create_pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd_create_pod -- bash
exec_pod_ceph_osd_11_node_1_osd_create_pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd_create_pod -- bash
exec_pod_ceph_osd_1_node_2_osd_create_pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd_create_pod -- bash
exec_pod_ceph_osd_2_node_2_osd_create_pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd_create_pod -- bash
exec_pod_ceph_osd_3_node_2_osd_create_pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd_create_pod -- bash
exec_pod_ceph_osd_4_node_3_osd_create_pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd_create_pod -- bash
exec_pod_ceph_osd_5_node_3_osd_create_pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd_create_pod -- bash
exec_pod_ceph_osd_6_node_3_osd_create_pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd_create_pod -- bash
exec_pod_ceph_osd_7_node_3_osd_create_pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd_create_pod -- bash
exec_pod_ceph_osd_8_node_1_osd_create_pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd_create_pod -- bash
exec_pod_ceph_osd_9_node_1_osd_create_pod: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd_create_pod -- bash
exec_pod_ceph_osd_isolation_osd_auto_isolation: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c osd_auto_isolation -- bash
exec_pod_ceph_rbdmirror_ceph_rbdmirror: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=rbdmirror" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ceph_rbdmirror -- bash
exec_pod_ceph_rgw_ceph_rgw: |-
  kubectl exec -it -n ceph $(kubectl -n ceph get po -owide -l "application=ceph,component=rgw" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ceph_rgw -- bash
exec_pod_chartmuseum_chartmuseum: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=chartmuseum,release=chartmuseum,statefulset.kubernetes.io/pod-name=chartmuseum-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c chartmuseum -- bash
exec_pod_chrony_chrony: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=chrony,component=chrony" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c chrony -- bash
exec_pod_cinder_api_cinder_api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=cinder,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c cinder_api -- bash
exec_pod_cinder_dashboard_api_cinder_dashboard_api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=cinder,component=cinder-dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c cinder_dashboard_api -- bash
exec_pod_cinder_dashboard_cinder_dashboard: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=cinder-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c cinder_dashboard -- bash
exec_pod_cinder_scheduler_cinder_scheduler: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=cinder,component=scheduler" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c cinder_scheduler -- bash
exec_pod_cinder_volume_cinder_volume: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=cinder,component=volume" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c cinder_volume -- bash
exec_pod_cloud_product_operator_cloud_product_operator: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "application=cloud-product-operator,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c cloud_product_operator -- bash
exec_pod_cluster_manager_cluster_manager: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "application=cluster-manager,component=operator" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c cluster_manager -- bash
exec_pod_coaster_all_coaster_api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=coaster,component=all,statefulset.kubernetes.io/pod-name=coaster-all-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c coaster_api -- bash
exec_pod_coaster_all_coaster_conductor: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=coaster,component=all,statefulset.kubernetes.io/pod-name=coaster-all-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c coaster_conductor -- bash
exec_pod_coaster_all_coaster_other: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=coaster,component=all,statefulset.kubernetes.io/pod-name=coaster-all-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c coaster_other -- bash
exec_pod_container_registry_dashboard_api_container_registry_dashboard_api: |-
  kubectl exec -it -n container-registry $(kubectl -n container-registry get po -owide -l "application=container-registry-dashboard-api,component=dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c container_registry_dashboard_api -- bash
exec_pod_container_registry_dashboard_container_registry_dashboard: |-
  kubectl exec -it -n container-registry $(kubectl -n container-registry get po -owide -l "application=container-registry-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c container_registry_dashboard -- bash
exec_pod_coredns_coredns: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-dns" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c coredns -- bash
exec_pod_cpconfig_operator_cpconfig_operator: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "application=cpconfig-operator,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c cpconfig_operator -- bash
exec_pod_docker_registry_docker_registry: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=docker-registry,release=docker-registry,statefulset.kubernetes.io/pod-name=docker-registry-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c docker_registry -- bash
exec_pod_docker_registry_image_manager: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=docker-registry,release=docker-registry,statefulset.kubernetes.io/pod-name=docker-registry-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c image_manager -- bash
exec_pod_dozer_mistral_api_mistral_api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=dozer-mistral-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c mistral_api -- bash
exec_pod_dozer_mistral_server_mistral_server: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=dozer-mistral-server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c mistral_server -- bash
exec_pod_dozer_st2actionrunner_st2actionrunner: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=dozer-st2actionrunner" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c st2actionrunner -- bash
exec_pod_dozer_st2api_st2api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=dozer-st2api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c st2api -- bash
exec_pod_dozer_st2auth_st2auth: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=dozer-st2auth" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c st2auth -- bash
exec_pod_dozer_st2garbagecollector_st2garbagecollector: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=dozer-st2garbagecollector" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c st2garbagecollector -- bash
exec_pod_dozer_st2notifier_st2notifier: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=dozer-st2notifier" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c st2notifier -- bash
exec_pod_dozer_st2resultstracker_st2resultstracker: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=dozer-st2resultstracker" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c st2resultstracker -- bash
exec_pod_dozer_st2rulesengine_st2rulesengine: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=dozer-st2rulesengine" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c st2rulesengine -- bash
exec_pod_dozer_st2sensorcontainer_st2sensorcontainer: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=dozer-st2sensorcontainer" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c st2sensorcontainer -- bash
exec_pod_dozer_st2stream_st2stream: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=dozer-st2stream" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c st2stream -- bash
exec_pod_easystack_cache_api_easystack_cache_api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=easystack-cache-api,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c easystack_cache_api -- bash
exec_pod_easystack_cache_easystack_cache: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=easystack-cache" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c easystack_cache -- bash
exec_pod_easystack_dm_easystack_dm: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=easystack-dm" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c easystack_dm -- bash
exec_pod_easystack_hagent_api_easystack_hagent_api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=easystack-hagent-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c easystack_hagent_api -- bash
exec_pod_easystack_hagent_easystack_hagent: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=easystack-hagent" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c easystack_hagent -- bash
exec_pod_easystack_vmm_easystack_vmm: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=easystack-vmm" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c easystack_vmm -- bash
exec_pod_ecp_dashboard_api_ecp_dashboard_api: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "application=ecp-dashboard-api,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ecp_dashboard_api -- bash
exec_pod_ecp_dashboard_ecp_dashboard: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "application=ecp-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ecp_dashboard -- bash
exec_pod_eks_managed_dashboard_api_eks_managed: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "application=eks-managed,component=dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c eks_managed -- bash
exec_pod_eks_managed_dashboard_eks_managed_dashboard: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "application=eks-managed-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c eks_managed_dashboard -- bash
exec_pod_eks_webhook_eks_webhook: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "application=eks-webhook,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c eks_webhook -- bash
exec_pod_emla_apiserver_emla_apiserver: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=emla-apiserver" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c emla_apiserver -- bash
exec_pod_ems_dashboard_api_ems_dashboard_api: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "application=ems-dashboard-api,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ems_dashboard_api -- bash
exec_pod_ems_dashboard_api_opa: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "application=ems-dashboard-api,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c opa -- bash
exec_pod_esdm_api_esdm_api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=esdm-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c esdm_api -- bash
exec_pod_esguides_esguides: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=esguides,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c esguides -- bash
exec_pod_ess_automation_ess_automation: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=automation,component=ess-automation" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ess_automation -- bash
exec_pod_estack_hagent_dashboard_api_estack_hagent_dashboard_api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=estack-hagent,component=estack-hagent-dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c estack_hagent_dashboard_api -- bash
exec_pod_estack_hagent_dashboard_estack_hagent_dashboard: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=estack-hagent-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c estack_hagent_dashboard -- bash
exec_pod_fluentbit_fluentbit: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=fluentbit,component=daemon" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c fluentbit -- bash
exec_pod_fluentd_api_fluentd_api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=fluentd,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c fluentd_api -- bash
exec_pod_fluentd_fluentd: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=fluentd,component=internal,statefulset.kubernetes.io/pod-name=fluentd-2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c fluentd -- bash
exec_pod_fluentd_httpd: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=fluentd,component=internal,statefulset.kubernetes.io/pod-name=fluentd-2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c httpd -- bash
exec_pod_glance_api_glance_api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=glance,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c glance_api -- bash
exec_pod_glance_dashboard_api_glance_dashboard_api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=glance,component=glance-dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c glance_dashboard_api -- bash
exec_pod_glance_dashboard_glance_dashboard: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=glance-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c glance_dashboard -- bash
exec_pod_glance_registry_glance_registry: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=glance,component=registry" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c glance_registry -- bash
exec_pod_gnocchi_api_gnocchi_api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=gnocchi,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c gnocchi_api -- bash
exec_pod_gnocchi_metricd_gnocchi_metricd: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=gnocchi,component=metricd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c gnocchi_metricd -- bash
exec_pod_gnocchi_statsd_gnocchi_statsd: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=gnocchi,component=statsd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c gnocchi_statsd -- bash
exec_pod_grafana_grafana: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=grafana,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c grafana -- bash
exec_pod_hagent_node_agent_hagent_node_agent: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=hagent-node-agent" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c hagent_node_agent -- bash
exec_pod_hagent_serve_heartbeat_hagent_serve_heartbeat: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=hagent-serve-heartbeat" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c hagent_serve_heartbeat -- bash
exec_pod_harbor_chartmuseum_chartmuseum: |-
  kubectl exec -it -n container-registry $(kubectl -n container-registry get po -owide -l "app=harbor,chart=container-registry,component=chartmuseum,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-chartmuseum-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c chartmuseum -- bash
exec_pod_harbor_core_core: |-
  kubectl exec -it -n container-registry $(kubectl -n container-registry get po -owide -l "application=harbor,component=core" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c core -- bash
exec_pod_harbor_database_database: |-
  kubectl exec -it -n container-registry $(kubectl -n container-registry get po -owide -l "app=harbor,chart=container-registry,component=database,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-database-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c database -- bash
exec_pod_harbor_jobservice_jobservice: |-
  kubectl exec -it -n container-registry $(kubectl -n container-registry get po -owide -l "app=harbor,chart=container-registry,component=jobservice,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-jobservice-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c jobservice -- bash
exec_pod_harbor_redis_redis: |-
  kubectl exec -it -n container-registry $(kubectl -n container-registry get po -owide -l "app=harbor,chart=container-registry,component=redis,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-redis-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c redis -- bash
exec_pod_harbor_registry_registry: |-
  kubectl exec -it -n container-registry $(kubectl -n container-registry get po -owide -l "app=harbor,chart=container-registry,component=registry,harbor-core=harbor-registry,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-registry-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c registry -- bash
exec_pod_harbor_registry_registryctl: |-
  kubectl exec -it -n container-registry $(kubectl -n container-registry get po -owide -l "app=harbor,chart=container-registry,component=registry,harbor-core=harbor-registry,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-registry-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c registryctl -- bash
exec_pod_heapster_heapster: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=heapster" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c heapster -- bash
exec_pod_horizon_horizon: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=horizon,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c horizon -- bash
exec_pod_horizon_nginx: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=horizon,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nginx -- bash
exec_pod_iam_api_iam_api: |-
  kubectl exec -it -n iam $(kubectl -n iam get po -owide -l "application=iam-api,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c iam_api -- bash
exec_pod_iam_dashboard_iam_dashboard: |-
  kubectl exec -it -n iam $(kubectl -n iam get po -owide -l "application=iam-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c iam_dashboard -- bash
exec_pod_iam_k8s_controller_iam_k8s_controller: |-
  kubectl exec -it -n iam $(kubectl -n iam get po -owide -l "application=iam-k8s-controller,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c iam_k8s_controller -- bash
exec_pod_iam_saml_iam_saml: |-
  kubectl exec -it -n iam $(kubectl -n iam get po -owide -l "application=iam-saml,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c iam_saml -- bash
exec_pod_ib_kubernetes_ib_kubernetes: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "application=ib-kubernetes,component=network" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ib_kubernetes -- bash
exec_pod_ingress_api_ingress_api: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "app=ingress-api,application=ingress,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ingress_api -- bash
exec_pod_ingress_error_pages_ingress_error_pages: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "application=ingress,component=error-pages" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ingress_error_pages -- bash
exec_pod_k8s_device_plugin_k8s_device_plugin: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=k8s-device-plugin" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c k8s_device_plugin -- bash
exec_pod_k8s_keystone_auth_k8s_keystone_auth: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "app=k8s-keystone-auth" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c k8s_keystone_auth -- bash
exec_pod_keepalived_keepalived: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=keepalived,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c keepalived -- bash
exec_pod_keystone_api_keystone_api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=keystone,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c keystone_api -- bash
exec_pod_kube-apiserver-node-1_kube_apiserver: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-apiserver,kubespray=v2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube_apiserver -- bash
exec_pod_kube-apiserver-node-2_kube_apiserver: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-apiserver,kubespray=v2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube_apiserver -- bash
exec_pod_kube-apiserver-node-3_kube_apiserver: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-apiserver,kubespray=v2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube_apiserver -- bash
exec_pod_kube-controller-manager-node-1_kube_controller_manager: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-controller-manager" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube_controller_manager -- bash
exec_pod_kube-controller-manager-node-2_kube_controller_manager: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-controller-manager" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube_controller_manager -- bash
exec_pod_kube-controller-manager-node-3_kube_controller_manager: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-controller-manager" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube_controller_manager -- bash
exec_pod_kube-proxy-node-1_kube_proxy: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube_proxy -- bash
exec_pod_kube-proxy-node-2_kube_proxy: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube_proxy -- bash
exec_pod_kube-proxy-node-3_kube_proxy: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube_proxy -- bash
exec_pod_kube-proxy-node-4_kube_proxy: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube_proxy -- bash
exec_pod_kube-proxy-node-5_kube_proxy: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube_proxy -- bash
exec_pod_kube-proxy-node-6_kube_proxy: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube_proxy -- bash
exec_pod_kube-scheduler-node-1_kube_scheduler: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-scheduler" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube_scheduler -- bash
exec_pod_kube-scheduler-node-2_kube_scheduler: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-scheduler" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube_scheduler -- bash
exec_pod_kube-scheduler-node-3_kube_scheduler: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-scheduler" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube_scheduler -- bash
exec_pod_kube_flannel_install_cni: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=flannel,tier=node" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c install_cni -- bash
exec_pod_kube_flannel_kube_flannel: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=flannel,tier=node" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube_flannel -- bash
exec_pod_kube_multus_ds_kube_multus: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "app=multus,name=multus,tier=node" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube_multus -- bash
exec_pod_kube_ovn_cni_cni_server: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "application=ovn,component=daemon" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c cni_server -- bash
exec_pod_kube_ovn_controller_controller: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "application=ovn,component=controller" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c controller -- bash
exec_pod_kube_state_metrics_kube_state_metrics: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=kube-state-metrics,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c kube_state_metrics -- bash
exec_pod_libvirt_libvirt: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=libvirt,component=libvirt" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c libvirt -- bash
exec_pod_libvirt_libvirt_sync: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=libvirt,component=libvirt" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c libvirt_sync -- bash
exec_pod_logsidecar_injector_deploy_logsidecar_injector: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "logging.es.io/logsidecar-injector=logsidecar-injector-deploy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c logsidecar_injector -- bash
exec_pod_mariadb_mariadb: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=mariadb,component=server,statefulset.kubernetes.io/pod-name=mariadb-2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c mariadb -- bash
exec_pod_memcached_memcached: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=memcached,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c memcached -- bash
exec_pod_metrics_server_metrics_server: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "app.kubernetes.io/name=metrics-server,version=v0.4.4" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c metrics_server -- bash
exec_pod_mongodb_mongodb: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=mongodb,component=server,statefulset.kubernetes.io/pod-name=mongodb-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c mongodb -- bash
exec_pod_nginx-proxy-node-4_nginx_proxy: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-nginx" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nginx_proxy -- bash
exec_pod_nginx-proxy-node-5_nginx_proxy: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-nginx" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nginx_proxy -- bash
exec_pod_nginx-proxy-node-6_nginx_proxy: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "k8s-app=kube-nginx" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nginx_proxy -- bash
exec_pod_node_exporter_event_monitor: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c event_monitor -- bash
exec_pod_node_exporter_ipmi_exporter: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ipmi_exporter -- bash
exec_pod_node_exporter_node_exporter: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c node_exporter -- bash
exec_pod_node_exporter_node_script_collector: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c node_script_collector -- bash
exec_pod_node_exporter_smartmon_collector: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c smartmon_collector -- bash
exec_pod_notification_center_configmap_reload: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=notification-center" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c configmap_reload -- bash
exec_pod_notification_center_notification_center: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=notification-center" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c notification_center -- bash
exec_pod_nova_api_metadata_nova_api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=nova,component=metadata" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nova_api -- bash
exec_pod_nova_api_osapi_nova_osapi: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=nova,component=os-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nova_osapi -- bash
exec_pod_nova_compute_nova_compute: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=nova,component=compute" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nova_compute -- bash
exec_pod_nova_compute_nova_compute_sync: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=nova,component=compute" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nova_compute_sync -- bash
exec_pod_nova_conductor_nova_conductor: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=nova,component=conductor" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nova_conductor -- bash
exec_pod_nova_dashboard_api_nova_dashboard_api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=nova,component=nova-dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nova_dashboard_api -- bash
exec_pod_nova_dashboard_nova_dashboard: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=nova-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nova_dashboard -- bash
exec_pod_nova_maintenance_nova_maintenance: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=nova,component=nova-maintenance" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nova_maintenance -- bash
exec_pod_nova_novncproxy_nova_novncproxy: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=nova,component=novnc-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nova_novncproxy -- bash
exec_pod_nova_placement_api_nova_placement_api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=nova,component=placement" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nova_placement_api -- bash
exec_pod_nova_scheduler_nova_scheduler: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=nova,component=scheduler" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nova_scheduler -- bash
exec_pod_oath_gateway_oath_backend: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "app=oath,component=gateway" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c oath_backend -- bash
exec_pod_oath_gateway_oathkeeper: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "app=oath,component=gateway" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c oathkeeper -- bash
exec_pod_ory_hydra_hydra: |-
  kubectl exec -it -n iam $(kubectl -n iam get po -owide -l "application=ory-hydra,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c hydra -- bash
exec_pod_ota_dashboard_ota_dashboard: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ota-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ota_dashboard -- bash
exec_pod_ota_dota: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=app,component=dota,statefulset.kubernetes.io/pod-name=ota-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c dota -- bash
exec_pod_ota_openapi_nginx: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ota,component=openapi,statefulset.kubernetes.io/pod-name=ota-openapi-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c nginx -- bash
exec_pod_ota_openapi_openapi: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ota,component=openapi,statefulset.kubernetes.io/pod-name=ota-openapi-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c openapi -- bash
exec_pod_ovn_controller_ovn_controller: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-controller" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ovn_controller -- bash
exec_pod_ovn_northd_ovn_northd: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-northd,statefulset.kubernetes.io/pod-name=ovn-northd-2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ovn_northd -- bash
exec_pod_ovn_ovsdb_nb_ovn_ovsdb_nb: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-nb,statefulset.kubernetes.io/pod-name=ovn-ovsdb-nb-2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ovn_ovsdb_nb -- bash
exec_pod_ovn_ovsdb_nb_relay_ovn_ovsdb_nb_relay: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-nb-relay" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ovn_ovsdb_nb_relay -- bash
exec_pod_ovn_ovsdb_sb_leader_relay_ovn_ovsdb_sb_leader_relay: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-sb-leader-relay" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ovn_ovsdb_sb_leader_relay -- bash
exec_pod_ovn_ovsdb_sb_ovn_ovsdb_sb: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-sb,statefulset.kubernetes.io/pod-name=ovn-ovsdb-sb-2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ovn_ovsdb_sb -- bash
exec_pod_ovn_ovsdb_sb_relay_ovn_ovsdb_sb_relay: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-sb-relay" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ovn_ovsdb_sb_relay -- bash
exec_pod_ovn_tool_ovn_tool: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-tool,statefulset.kubernetes.io/pod-name=ovn-tool-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ovn_tool -- bash
exec_pod_ovn_webhook_ovn_webhook: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "application=ovn-webhook,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ovn_webhook -- bash
exec_pod_peak_api_peak_api: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "application=peak,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c peak_api -- bash
exec_pod_peak_cache_peak_cache: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "application=peak,component=cache" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c peak_cache -- bash
exec_pod_postgresql_postgresql: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=postgresql,component=server,statefulset.kubernetes.io/pod-name=postgresql-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c postgresql -- bash
exec_pod_process_exporter_process_exporter: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=process_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c process_exporter -- bash
exec_pod_prometheus_ecms_config_reloader: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=prometheus,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=prometheus,app.kubernetes.io/version=2.26.0,operator.prometheus.io/name=ecms,operator.prometheus.io/shard=0,prometheus=ecms,statefulset.kubernetes.io/pod-name=prometheus-ecms-1" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c config_reloader -- bash
exec_pod_prometheus_ecms_prometheus: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=prometheus,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=prometheus,app.kubernetes.io/version=2.26.0,operator.prometheus.io/name=ecms,operator.prometheus.io/shard=0,prometheus=ecms,statefulset.kubernetes.io/pod-name=prometheus-ecms-1" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c prometheus -- bash
exec_pod_prometheus_ecms_thanos_sidecar: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=prometheus,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=prometheus,app.kubernetes.io/version=2.26.0,operator.prometheus.io/name=ecms,operator.prometheus.io/shard=0,prometheus=ecms,statefulset.kubernetes.io/pod-name=prometheus-ecms-1" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c thanos_sidecar -- bash
exec_pod_prometheus_mysql_exporter_mysql_exporter: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=mysql,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c mysql_exporter -- bash
exec_pod_prometheus_openstack_exporter_openstack_metrics_exporter: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=prometheus-openstack-exporter,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c openstack_metrics_exporter -- bash
exec_pod_prometheus_operator_prometheus_operator: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "app=prometheus-operator,release=prometheus" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c prometheus_operator -- bash
exec_pod_prometheus_polling_exporter_prometheus_polling_exporter: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=prometheus-polling-exporter,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c prometheus_polling_exporter -- bash
exec_pod_prometheus_rabbitmq_exporter_rabbitmq_exporter: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=rabbitmq,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c rabbitmq_exporter -- bash
exec_pod_proton_dashboard_api_proton_dashboard_api: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=proton_dashboard_api,component=dashboard_api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c proton_dashboard_api -- bash
exec_pod_proton_dashboard_proton_dashboard: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=proton-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c proton_dashboard -- bash
exec_pod_proton_maintenance_proton_maintenance: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=proton-maintenance,component=proton-maintenance" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c proton_maintenance -- bash
exec_pod_proton_ovn_gateway_monitor_agent_proton_ovn_gateway_monitor_agent: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=proton,component=proton-ovn-gateway-monitor-agent" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c proton_ovn_gateway_monitor_agent -- bash
exec_pod_proton_ovn_metadata_agent_proton_ovn_metadata_agent: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=proton,component=ovn-metadata-agent" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c proton_ovn_metadata_agent -- bash
exec_pod_proton_server_proton_server: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=proton,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c proton_server -- bash
exec_pod_rabbitmq_rabbitmq: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=rabbitmq,component=server,statefulset.kubernetes.io/pod-name=rabbitmq-2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c rabbitmq -- bash
exec_pod_redis_redis: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=redis,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c redis -- bash
exec_pod_roller_dashboard_roller_dashboard: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=roller,component=roller-dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c roller_dashboard -- bash
exec_pod_secure_container_ecr_deploy_ecr_deploy: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "app=ecr-deploy,name=secure-container-ecr-deploy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c ecr_deploy -- bash
exec_pod_sriov_network_config_daemon_sriov_cni: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "app=sriov-network-config-daemon,component=network,openshift.io/component=network,type=infra" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c sriov_cni -- bash
exec_pod_sriov_network_config_daemon_sriov_infiniband_cni: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "app=sriov-network-config-daemon,component=network,openshift.io/component=network,type=infra" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c sriov_infiniband_cni -- bash
exec_pod_sriov_network_config_daemon_sriov_network_config_daemon: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "app=sriov-network-config-daemon,component=network,openshift.io/component=network,type=infra" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c sriov_network_config_daemon -- bash
exec_pod_sriov_network_operator_sriov_operator: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "application=sriov-operator,component=sriovapp" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c sriov_operator -- bash
exec_pod_status_operator_status_operator: |-
  kubectl exec -it -n ems $(kubectl -n ems get po -owide -l "application=status-operator,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c status_operator -- bash
exec_pod_thanos_query_thanos_query: |-
  kubectl exec -it -n openstack $(kubectl -n openstack get po -owide -l "application=prometheus,component=thanos-query" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c thanos_query -- bash
exec_pod_tiller_deploy_tiller: |-
  kubectl exec -it -n kube-system $(kubectl -n kube-system get po -owide -l "app=helm,name=tiller" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c tiller -- bash
exec_pod_whereabouts_whereabouts: |-
  kubectl exec -it -n eks-managed $(kubectl -n eks-managed get po -owide -l "app=whereabouts,name=whereabouts,tier=node" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -c whereabouts -- bash
get_pod_alcubierre_dashboard: |-
  kubectl -n alcubierre get po -l application=alcubierre-dashboard,component=dashboard -owide
get_pod_alcubierre_exporter:
  "kubectl -n alcubierre get po -l application=alcubierre,component=exporter\
  \ -owide"
get_pod_alcubierre_manager:
  "kubectl -n alcubierre get po -l application=alcubierre,component=manager\
  \ -owide"
get_pod_alcubierre_manul:
  "kubectl -n alcubierre get po -l application=alcubierre,component=manul\
  \ -owide"
get_pod_alcubierre_target_node_1: |-
  kubectl -n alcubierre get po -l app=alcubierre-target-node-1,application=alcubierre,component=target -owide
get_pod_alcubierre_target_node_2: |-
  kubectl -n alcubierre get po -l app=alcubierre-target-node-2,application=alcubierre,component=target -owide
get_pod_alcubierre_target_node_3: |-
  kubectl -n alcubierre get po -l app=alcubierre-target-node-3,application=alcubierre,component=target -owide
get_pod_alertmanager_ecms: |-
  kubectl -n openstack get po -l alertmanager=ecms,app=alertmanager,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=alertmanager,app.kubernetes.io/version=v0.21.0,statefulset.kubernetes.io/pod-name=alertmanager-ecms-2 -owide
get_pod_aodh_api: "kubectl -n openstack get po -l application=aodh,component=api -owide"
get_pod_aodh_evaluator:
  "kubectl -n openstack get po -l application=aodh,component=evaluator\
  \ -owide"
get_pod_aodh_listener:
  "kubectl -n openstack get po -l application=aodh,component=listener\
  \ -owide"
get_pod_aodh_notifier:
  "kubectl -n openstack get po -l application=aodh,component=notifier\
  \ -owide"
get_pod_auto_upgrade:
  "kubectl -n ems get po -l application=auto-upgrade,component=api\
  \ -owide"
get_pod_automation_operators: |-
  kubectl -n openstack get po -l application=automation,component=automation-operators -owide
get_pod_blackbox_exporter:
  "kubectl -n openstack get po -l application=blackbox,component=exporter\
  \ -owide"
get_pod_busybox_openstack:
  "kubectl -n openstack get po -l application=busybox,component=busybox\
  \ -owide"
get_pod_capsule_controller_manager:
  "kubectl -n eks-managed get po -l application=capsule,component=api\
  \ -owide"
get_pod_ceilometer_api:
  "kubectl -n openstack get po -l application=ceilometer,component=api\
  \ -owide"
get_pod_ceilometer_central:
  "kubectl -n openstack get po -l application=ceilometer,component=central\
  \ -owide"
get_pod_ceilometer_collector:
  "kubectl -n openstack get po -l application=ceilometer,component=collector\
  \ -owide"
get_pod_ceilometer_compute:
  "kubectl -n openstack get po -l application=ceilometer,component=compute\
  \ -owide"
get_pod_ceilometer_notification: |-
  kubectl -n openstack get po -l application=ceilometer,component=notification -owide
get_pod_ceph_mgr: "kubectl -n ceph get po -l application=ceph,component=mgr -owide"
get_pod_ceph_mon: "kubectl -n ceph get po -l application=ceph,component=mon -owide"
get_pod_ceph_operator:
  "kubectl -n ceph get po -l application=ceph,component=ceph-operator\
  \ -owide"
get_pod_ceph_osd_0_node_2:
  "kubectl -n ceph get po -l application=ceph,component=osd\
  \ -owide"
get_pod_ceph_osd_10_node_1:
  "kubectl -n ceph get po -l application=ceph,component=osd\
  \ -owide"
get_pod_ceph_osd_11_node_1:
  "kubectl -n ceph get po -l application=ceph,component=osd\
  \ -owide"
get_pod_ceph_osd_1_node_2:
  "kubectl -n ceph get po -l application=ceph,component=osd\
  \ -owide"
get_pod_ceph_osd_2_node_2:
  "kubectl -n ceph get po -l application=ceph,component=osd\
  \ -owide"
get_pod_ceph_osd_3_node_2:
  "kubectl -n ceph get po -l application=ceph,component=osd\
  \ -owide"
get_pod_ceph_osd_4_node_3:
  "kubectl -n ceph get po -l application=ceph,component=osd\
  \ -owide"
get_pod_ceph_osd_5_node_3:
  "kubectl -n ceph get po -l application=ceph,component=osd\
  \ -owide"
get_pod_ceph_osd_6_node_3:
  "kubectl -n ceph get po -l application=ceph,component=osd\
  \ -owide"
get_pod_ceph_osd_7_node_3:
  "kubectl -n ceph get po -l application=ceph,component=osd\
  \ -owide"
get_pod_ceph_osd_8_node_1:
  "kubectl -n ceph get po -l application=ceph,component=osd\
  \ -owide"
get_pod_ceph_osd_9_node_1:
  "kubectl -n ceph get po -l application=ceph,component=osd\
  \ -owide"
get_pod_ceph_osd_isolation:
  "kubectl -n ceph get po -l application=ceph,component=osd\
  \ -owide"
get_pod_ceph_rbdmirror:
  "kubectl -n ceph get po -l application=ceph,component=rbdmirror\
  \ -owide"
get_pod_ceph_rgw: "kubectl -n ceph get po -l application=ceph,component=rgw -owide"
get_pod_chartmuseum: |-
  kubectl -n openstack get po -l app=chartmuseum,release=chartmuseum,statefulset.kubernetes.io/pod-name=chartmuseum-0 -owide
get_pod_chrony:
  "kubectl -n openstack get po -l application=chrony,component=chrony\
  \ -owide"
get_pod_cinder_api:
  "kubectl -n openstack get po -l application=cinder,component=api\
  \ -owide"
get_pod_cinder_dashboard: |-
  kubectl -n openstack get po -l application=cinder-dashboard,component=dashboard -owide
get_pod_cinder_dashboard_api: |-
  kubectl -n openstack get po -l application=cinder,component=cinder-dashboard-api -owide
get_pod_cinder_scheduler:
  "kubectl -n openstack get po -l application=cinder,component=scheduler\
  \ -owide"
get_pod_cinder_volume:
  "kubectl -n openstack get po -l application=cinder,component=volume\
  \ -owide"
get_pod_cloud_product_operator:
  "kubectl -n ems get po -l application=cloud-product-operator,component=api\
  \ -owide"
get_pod_cluster_manager: |-
  kubectl -n eks-managed get po -l application=cluster-manager,component=operator -owide
get_pod_coaster_all: |-
  kubectl -n openstack get po -l application=coaster,component=all,statefulset.kubernetes.io/pod-name=coaster-all-0 -owide
get_pod_container_registry_dashboard: |-
  kubectl -n container-registry get po -l application=container-registry-dashboard,component=dashboard -owide
get_pod_container_registry_dashboard_api: |-
  kubectl -n container-registry get po -l application=container-registry-dashboard-api,component=dashboard-api -owide
get_pod_coredns: "kubectl -n kube-system get po -l k8s-app=kube-dns -owide"
get_pod_cpconfig_operator:
  "kubectl -n ems get po -l application=cpconfig-operator,component=api\
  \ -owide"
get_pod_docker_registry: |-
  kubectl -n openstack get po -l app=docker-registry,release=docker-registry,statefulset.kubernetes.io/pod-name=docker-registry-0 -owide
get_pod_dozer_mistral_api: "kubectl -n openstack get po -l app=dozer-mistral-api -owide"
get_pod_dozer_mistral_server:
  "kubectl -n openstack get po -l app=dozer-mistral-server\
  \ -owide"
get_pod_dozer_st2actionrunner:
  "kubectl -n openstack get po -l app=dozer-st2actionrunner\
  \ -owide"
get_pod_dozer_st2api: "kubectl -n openstack get po -l app=dozer-st2api -owide"
get_pod_dozer_st2auth: "kubectl -n openstack get po -l app=dozer-st2auth -owide"
get_pod_dozer_st2garbagecollector:
  "kubectl -n openstack get po -l app=dozer-st2garbagecollector\
  \ -owide"
get_pod_dozer_st2notifier: "kubectl -n openstack get po -l app=dozer-st2notifier -owide"
get_pod_dozer_st2resultstracker:
  "kubectl -n openstack get po -l app=dozer-st2resultstracker\
  \ -owide"
get_pod_dozer_st2rulesengine:
  "kubectl -n openstack get po -l app=dozer-st2rulesengine\
  \ -owide"
get_pod_dozer_st2sensorcontainer:
  "kubectl -n openstack get po -l app=dozer-st2sensorcontainer\
  \ -owide"
get_pod_dozer_st2stream: "kubectl -n openstack get po -l app=dozer-st2stream -owide"
get_pod_easystack_cache: "kubectl -n openstack get po -l app=easystack-cache -owide"
get_pod_easystack_cache_api: |-
  kubectl -n openstack get po -l application=easystack-cache-api,component=server -owide
get_pod_easystack_dm: "kubectl -n openstack get po -l app=easystack-dm -owide"
get_pod_easystack_hagent: "kubectl -n openstack get po -l app=easystack-hagent -owide"
get_pod_easystack_hagent_api:
  "kubectl -n openstack get po -l app=easystack-hagent-api\
  \ -owide"
get_pod_easystack_vmm: "kubectl -n openstack get po -l app=easystack-vmm -owide"
get_pod_ecp_dashboard:
  "kubectl -n ems get po -l application=ecp-dashboard,component=dashboard\
  \ -owide"
get_pod_ecp_dashboard_api:
  "kubectl -n ems get po -l application=ecp-dashboard-api,component=api\
  \ -owide"
get_pod_eks_managed_dashboard: |-
  kubectl -n eks-managed get po -l application=eks-managed-dashboard,component=dashboard -owide
get_pod_eks_managed_dashboard_api: |-
  kubectl -n eks-managed get po -l application=eks-managed,component=dashboard-api -owide
get_pod_eks_webhook:
  "kubectl -n eks-managed get po -l application=eks-webhook,component=api\
  \ -owide"
get_pod_emla_apiserver: "kubectl -n openstack get po -l app=emla-apiserver -owide"
get_pod_ems_dashboard_api:
  "kubectl -n ems get po -l application=ems-dashboard-api,component=api\
  \ -owide"
get_pod_esdm_api: "kubectl -n openstack get po -l app=esdm-api -owide"
get_pod_esguides:
  "kubectl -n openstack get po -l application=esguides,component=server\
  \ -owide"
get_pod_ess_automation: |-
  kubectl -n openstack get po -l application=automation,component=ess-automation -owide
get_pod_estack_hagent_dashboard: |-
  kubectl -n openstack get po -l application=estack-hagent-dashboard,component=dashboard -owide
get_pod_estack_hagent_dashboard_api: |-
  kubectl -n openstack get po -l application=estack-hagent,component=estack-hagent-dashboard-api -owide
get_pod_fluentbit:
  "kubectl -n openstack get po -l application=fluentbit,component=daemon\
  \ -owide"
get_pod_fluentd: |-
  kubectl -n openstack get po -l application=fluentd,component=internal,statefulset.kubernetes.io/pod-name=fluentd-2 -owide
get_pod_fluentd_api:
  "kubectl -n openstack get po -l application=fluentd,component=api\
  \ -owide"
get_pod_glance_api:
  "kubectl -n openstack get po -l application=glance,component=api\
  \ -owide"
get_pod_glance_dashboard: |-
  kubectl -n openstack get po -l application=glance-dashboard,component=dashboard -owide
get_pod_glance_dashboard_api: |-
  kubectl -n openstack get po -l application=glance,component=glance-dashboard-api -owide
get_pod_glance_registry:
  "kubectl -n openstack get po -l application=glance,component=registry\
  \ -owide"
get_pod_gnocchi_api:
  "kubectl -n openstack get po -l application=gnocchi,component=api\
  \ -owide"
get_pod_gnocchi_metricd:
  "kubectl -n openstack get po -l application=gnocchi,component=metricd\
  \ -owide"
get_pod_gnocchi_statsd:
  "kubectl -n openstack get po -l application=gnocchi,component=statsd\
  \ -owide"
get_pod_grafana:
  "kubectl -n openstack get po -l application=grafana,component=dashboard\
  \ -owide"
get_pod_hagent_node_agent: "kubectl -n openstack get po -l app=hagent-node-agent -owide"
get_pod_hagent_serve_heartbeat:
  "kubectl -n openstack get po -l app=hagent-serve-heartbeat\
  \ -owide"
get_pod_harbor_chartmuseum: |-
  kubectl -n container-registry get po -l app=harbor,chart=container-registry,component=chartmuseum,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-chartmuseum-0 -owide
get_pod_harbor_core:
  "kubectl -n container-registry get po -l application=harbor,component=core\
  \ -owide"
get_pod_harbor_database: |-
  kubectl -n container-registry get po -l app=harbor,chart=container-registry,component=database,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-database-0 -owide
get_pod_harbor_jobservice: |-
  kubectl -n container-registry get po -l app=harbor,chart=container-registry,component=jobservice,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-jobservice-0 -owide
get_pod_harbor_redis: |-
  kubectl -n container-registry get po -l app=harbor,chart=container-registry,component=redis,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-redis-0 -owide
get_pod_harbor_registry: |-
  kubectl -n container-registry get po -l app=harbor,chart=container-registry,component=registry,harbor-core=harbor-registry,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-registry-0 -owide
get_pod_heapster: "kubectl -n kube-system get po -l k8s-app=heapster -owide"
get_pod_horizon:
  "kubectl -n openstack get po -l application=horizon,component=server\
  \ -owide"
get_pod_iam_api: "kubectl -n iam get po -l application=iam-api,component=api -owide"
get_pod_iam_dashboard:
  "kubectl -n iam get po -l application=iam-dashboard,component=dashboard\
  \ -owide"
get_pod_iam_k8s_controller:
  "kubectl -n iam get po -l application=iam-k8s-controller,component=api\
  \ -owide"
get_pod_iam_saml: "kubectl -n iam get po -l application=iam-saml,component=api -owide"
get_pod_ib_kubernetes: |-
  kubectl -n eks-managed get po -l application=ib-kubernetes,component=network -owide
get_pod_ingress_api: |-
  kubectl -n kube-system get po -l app=ingress-api,application=ingress,component=api -owide
get_pod_ingress_error_pages: |-
  kubectl -n kube-system get po -l application=ingress,component=error-pages -owide
get_pod_k8s_device_plugin: "kubectl -n openstack get po -l app=k8s-device-plugin -owide"
get_pod_k8s_keystone_auth:
  "kubectl -n kube-system get po -l app=k8s-keystone-auth\
  \ -owide"
get_pod_keepalived:
  "kubectl -n openstack get po -l application=keepalived,component=server\
  \ -owide"
get_pod_keystone_api:
  "kubectl -n openstack get po -l application=keystone,component=api\
  \ -owide"
get_pod_kube-apiserver-node-1:
  "kubectl -n kube-system get po -l k8s-app=kube-apiserver,kubespray=v2\
  \ -owide"
get_pod_kube-apiserver-node-2:
  "kubectl -n kube-system get po -l k8s-app=kube-apiserver,kubespray=v2\
  \ -owide"
get_pod_kube-apiserver-node-3:
  "kubectl -n kube-system get po -l k8s-app=kube-apiserver,kubespray=v2\
  \ -owide"
get_pod_kube-controller-manager-node-1:
  "kubectl -n kube-system get po -l k8s-app=kube-controller-manager\
  \ -owide"
get_pod_kube-controller-manager-node-2:
  "kubectl -n kube-system get po -l k8s-app=kube-controller-manager\
  \ -owide"
get_pod_kube-controller-manager-node-3:
  "kubectl -n kube-system get po -l k8s-app=kube-controller-manager\
  \ -owide"
get_pod_kube-proxy-node-1: "kubectl -n kube-system get po -l k8s-app=kube-proxy -owide"
get_pod_kube-proxy-node-2: "kubectl -n kube-system get po -l k8s-app=kube-proxy -owide"
get_pod_kube-proxy-node-3: "kubectl -n kube-system get po -l k8s-app=kube-proxy -owide"
get_pod_kube-proxy-node-4: "kubectl -n kube-system get po -l k8s-app=kube-proxy -owide"
get_pod_kube-proxy-node-5: "kubectl -n kube-system get po -l k8s-app=kube-proxy -owide"
get_pod_kube-proxy-node-6: "kubectl -n kube-system get po -l k8s-app=kube-proxy -owide"
get_pod_kube-scheduler-node-1:
  "kubectl -n kube-system get po -l k8s-app=kube-scheduler\
  \ -owide"
get_pod_kube-scheduler-node-2:
  "kubectl -n kube-system get po -l k8s-app=kube-scheduler\
  \ -owide"
get_pod_kube-scheduler-node-3:
  "kubectl -n kube-system get po -l k8s-app=kube-scheduler\
  \ -owide"
get_pod_kube_flannel:
  "kubectl -n kube-system get po -l k8s-app=flannel,tier=node\
  \ -owide"
get_pod_kube_multus_ds:
  "kubectl -n eks-managed get po -l app=multus,name=multus,tier=node\
  \ -owide"
get_pod_kube_ovn_cni:
  "kubectl -n eks-managed get po -l application=ovn,component=daemon\
  \ -owide"
get_pod_kube_ovn_controller:
  "kubectl -n eks-managed get po -l application=ovn,component=controller\
  \ -owide"
get_pod_kube_state_metrics: |-
  kubectl -n openstack get po -l application=kube-state-metrics,component=exporter -owide
get_pod_libvirt:
  "kubectl -n openstack get po -l application=libvirt,component=libvirt\
  \ -owide"
get_pod_logsidecar_injector_deploy: |-
  kubectl -n eks-managed get po -l logging.es.io/logsidecar-injector=logsidecar-injector-deploy -owide
get_pod_mariadb: |-
  kubectl -n openstack get po -l application=mariadb,component=server,statefulset.kubernetes.io/pod-name=mariadb-2 -owide
get_pod_memcached:
  "kubectl -n openstack get po -l application=memcached,component=server\
  \ -owide"
get_pod_metrics_server: |-
  kubectl -n kube-system get po -l app.kubernetes.io/name=metrics-server,version=v0.4.4 -owide
get_pod_mongodb: |-
  kubectl -n openstack get po -l application=mongodb,component=server,statefulset.kubernetes.io/pod-name=mongodb-0 -owide
get_pod_nginx-proxy-node-4: "kubectl -n kube-system get po -l k8s-app=kube-nginx -owide"
get_pod_nginx-proxy-node-5: "kubectl -n kube-system get po -l k8s-app=kube-nginx -owide"
get_pod_nginx-proxy-node-6: "kubectl -n kube-system get po -l k8s-app=kube-nginx -owide"
get_pod_node_exporter: |-
  kubectl -n openstack get po -l application=node_exporter,component=metrics -owide
get_pod_notification_center:
  "kubectl -n openstack get po -l app=notification-center\
  \ -owide"
get_pod_nova_api_metadata:
  "kubectl -n openstack get po -l application=nova,component=metadata\
  \ -owide"
get_pod_nova_api_osapi:
  "kubectl -n openstack get po -l application=nova,component=os-api\
  \ -owide"
get_pod_nova_compute:
  "kubectl -n openstack get po -l application=nova,component=compute\
  \ -owide"
get_pod_nova_conductor:
  "kubectl -n openstack get po -l application=nova,component=conductor\
  \ -owide"
get_pod_nova_dashboard: |-
  kubectl -n openstack get po -l application=nova-dashboard,component=dashboard -owide
get_pod_nova_dashboard_api: |-
  kubectl -n openstack get po -l application=nova,component=nova-dashboard-api -owide
get_pod_nova_maintenance: |-
  kubectl -n openstack get po -l application=nova,component=nova-maintenance -owide
get_pod_nova_novncproxy:
  "kubectl -n openstack get po -l application=nova,component=novnc-proxy\
  \ -owide"
get_pod_nova_placement_api:
  "kubectl -n openstack get po -l application=nova,component=placement\
  \ -owide"
get_pod_nova_scheduler:
  "kubectl -n openstack get po -l application=nova,component=scheduler\
  \ -owide"
get_pod_oath_gateway: "kubectl -n ems get po -l app=oath,component=gateway -owide"
get_pod_ory_hydra: "kubectl -n iam get po -l application=ory-hydra,component=api -owide"
get_pod_ota: |-
  kubectl -n openstack get po -l application=app,component=dota,statefulset.kubernetes.io/pod-name=ota-0 -owide
get_pod_ota_dashboard: |-
  kubectl -n openstack get po -l application=ota-dashboard,component=dashboard -owide
get_pod_ota_openapi: |-
  kubectl -n openstack get po -l application=ota,component=openapi,statefulset.kubernetes.io/pod-name=ota-openapi-0 -owide
get_pod_ovn_controller:
  "kubectl -n openstack get po -l application=ovn,component=ovn-controller\
  \ -owide"
get_pod_ovn_northd: |-
  kubectl -n openstack get po -l application=ovn,component=ovn-northd,statefulset.kubernetes.io/pod-name=ovn-northd-2 -owide
get_pod_ovn_ovsdb_nb: |-
  kubectl -n openstack get po -l application=ovn,component=ovn-ovsdb-nb,statefulset.kubernetes.io/pod-name=ovn-ovsdb-nb-2 -owide
get_pod_ovn_ovsdb_nb_relay: |-
  kubectl -n openstack get po -l application=ovn,component=ovn-ovsdb-nb-relay -owide
get_pod_ovn_ovsdb_sb: |-
  kubectl -n openstack get po -l application=ovn,component=ovn-ovsdb-sb,statefulset.kubernetes.io/pod-name=ovn-ovsdb-sb-2 -owide
get_pod_ovn_ovsdb_sb_leader_relay: |-
  kubectl -n openstack get po -l application=ovn,component=ovn-ovsdb-sb-leader-relay -owide
get_pod_ovn_ovsdb_sb_relay: |-
  kubectl -n openstack get po -l application=ovn,component=ovn-ovsdb-sb-relay -owide
get_pod_ovn_tool: |-
  kubectl -n openstack get po -l application=ovn,component=ovn-tool,statefulset.kubernetes.io/pod-name=ovn-tool-0 -owide
get_pod_ovn_webhook:
  "kubectl -n eks-managed get po -l application=ovn-webhook,component=api\
  \ -owide"
get_pod_peak_api: "kubectl -n ems get po -l application=peak,component=api -owide"
get_pod_peak_cache: "kubectl -n ems get po -l application=peak,component=cache -owide"
get_pod_postgresql: |-
  kubectl -n openstack get po -l application=postgresql,component=server,statefulset.kubernetes.io/pod-name=postgresql-0 -owide
get_pod_process_exporter: |-
  kubectl -n openstack get po -l application=process_exporter,component=metrics -owide
get_pod_prometheus_ecms: |-
  kubectl -n openstack get po -l app=prometheus,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=prometheus,app.kubernetes.io/version=2.26.0,operator.prometheus.io/name=ecms,operator.prometheus.io/shard=0,prometheus=ecms,statefulset.kubernetes.io/pod-name=prometheus-ecms-1 -owide
get_pod_prometheus_mysql_exporter:
  "kubectl -n openstack get po -l application=mysql,component=exporter\
  \ -owide"
get_pod_prometheus_openstack_exporter: |-
  kubectl -n openstack get po -l application=prometheus-openstack-exporter,component=exporter -owide
get_pod_prometheus_operator:
  "kubectl -n openstack get po -l app=prometheus-operator,release=prometheus\
  \ -owide"
get_pod_prometheus_polling_exporter: |-
  kubectl -n openstack get po -l application=prometheus-polling-exporter,component=exporter -owide
get_pod_prometheus_rabbitmq_exporter:
  "kubectl -n openstack get po -l application=rabbitmq,component=exporter\
  \ -owide"
get_pod_proton_dashboard: |-
  kubectl -n openstack get po -l application=proton-dashboard,component=dashboard -owide
get_pod_proton_dashboard_api: |-
  kubectl -n openstack get po -l application=proton_dashboard_api,component=dashboard_api -owide
get_pod_proton_maintenance: |-
  kubectl -n openstack get po -l application=proton-maintenance,component=proton-maintenance -owide
get_pod_proton_ovn_gateway_monitor_agent: |-
  kubectl -n openstack get po -l application=proton,component=proton-ovn-gateway-monitor-agent -owide
get_pod_proton_ovn_metadata_agent: |-
  kubectl -n openstack get po -l application=proton,component=ovn-metadata-agent -owide
get_pod_proton_server:
  "kubectl -n openstack get po -l application=proton,component=server\
  \ -owide"
get_pod_rabbitmq: |-
  kubectl -n openstack get po -l application=rabbitmq,component=server,statefulset.kubernetes.io/pod-name=rabbitmq-2 -owide
get_pod_redis:
  "kubectl -n openstack get po -l application=redis,component=server\
  \ -owide"
get_pod_roller_dashboard: |-
  kubectl -n openstack get po -l application=roller,component=roller-dashboard -owide
get_pod_secure_container_ecr_deploy: |-
  kubectl -n eks-managed get po -l app=ecr-deploy,name=secure-container-ecr-deploy -owide
get_pod_sriov_network_config_daemon: |-
  kubectl -n eks-managed get po -l app=sriov-network-config-daemon,component=network,openshift.io/component=network,type=infra -owide
get_pod_sriov_network_operator: |-
  kubectl -n eks-managed get po -l application=sriov-operator,component=sriovapp -owide
get_pod_status_operator:
  "kubectl -n ems get po -l application=status-operator,component=api\
  \ -owide"
get_pod_thanos_query: |-
  kubectl -n openstack get po -l application=prometheus,component=thanos-query -owide
get_pod_tiller_deploy: "kubectl -n kube-system get po -l app=helm,name=tiller -owide"
get_pod_whereabouts: |-
  kubectl -n eks-managed get po -l app=whereabouts,name=whereabouts,tier=node -owide
logs_pod_alcubierre_dashboard_alcubierre_dashboard: |-
  for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre-dashboard,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n alcubierre logs -c alcubierre_dashboard $p;done
logs_pod_alcubierre_exporter_alcubierre_exporter: |-
  for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=exporter" --no-headers -o custom-columns=":metadata.name" );do kubectl -n alcubierre logs -c alcubierre_exporter $p;done
logs_pod_alcubierre_manager_alcubierre_manager: |-
  for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manager" --no-headers -o custom-columns=":metadata.name" );do kubectl -n alcubierre logs -c alcubierre_manager $p;done
logs_pod_alcubierre_manul_manul: |-
  for p in $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o custom-columns=":metadata.name" );do kubectl -n alcubierre logs -c manul $p;done
logs_pod_alcubierre_target_node_1_alcubierre_target: |-
  for p in $(kubectl -n alcubierre get po -owide -l "app=alcubierre-target-node-1,application=alcubierre,component=target" --no-headers -o custom-columns=":metadata.name" );do kubectl -n alcubierre logs -c alcubierre_target $p;done
logs_pod_alcubierre_target_node_2_alcubierre_target: |-
  for p in $(kubectl -n alcubierre get po -owide -l "app=alcubierre-target-node-2,application=alcubierre,component=target" --no-headers -o custom-columns=":metadata.name" );do kubectl -n alcubierre logs -c alcubierre_target $p;done
logs_pod_alcubierre_target_node_3_alcubierre_target: |-
  for p in $(kubectl -n alcubierre get po -owide -l "app=alcubierre-target-node-3,application=alcubierre,component=target" --no-headers -o custom-columns=":metadata.name" );do kubectl -n alcubierre logs -c alcubierre_target $p;done
logs_pod_alertmanager_ecms_alertmanager: |-
  for p in $(kubectl -n openstack get po -owide -l "alertmanager=ecms,app=alertmanager,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=alertmanager,app.kubernetes.io/version=v0.21.0,statefulset.kubernetes.io/pod-name=alertmanager-ecms-2" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c alertmanager $p;done
logs_pod_alertmanager_ecms_config_reloader: |-
  for p in $(kubectl -n openstack get po -owide -l "alertmanager=ecms,app=alertmanager,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=alertmanager,app.kubernetes.io/version=v0.21.0,statefulset.kubernetes.io/pod-name=alertmanager-ecms-2" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c config_reloader $p;done
logs_pod_aodh_api_aodh_api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=aodh,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c aodh_api $p;done
logs_pod_aodh_evaluator_aodh_evaluator: |-
  for p in $(kubectl -n openstack get po -owide -l "application=aodh,component=evaluator" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c aodh_evaluator $p;done
logs_pod_aodh_listener_aodh_listener: |-
  for p in $(kubectl -n openstack get po -owide -l "application=aodh,component=listener" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c aodh_listener $p;done
logs_pod_aodh_notifier_aodh_notifier: |-
  for p in $(kubectl -n openstack get po -owide -l "application=aodh,component=notifier" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c aodh_notifier $p;done
logs_pod_auto_upgrade_auto_upgrade: |-
  for p in $(kubectl -n ems get po -owide -l "application=auto-upgrade,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c auto_upgrade $p;done
logs_pod_automation_operators_automation_operators: |-
  for p in $(kubectl -n openstack get po -owide -l "application=automation,component=automation-operators" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c automation_operators $p;done
logs_pod_blackbox_exporter_blackbox_exporter: |-
  for p in $(kubectl -n openstack get po -owide -l "application=blackbox,component=exporter" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c blackbox_exporter $p;done
logs_pod_busybox_openstack_busybox_openstack: |-
  for p in $(kubectl -n openstack get po -owide -l "application=busybox,component=busybox" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c busybox_openstack $p;done
logs_pod_capsule_controller_manager_manager: |-
  for p in $(kubectl -n eks-managed get po -owide -l "application=capsule,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c manager $p;done
logs_pod_ceilometer_api_ceilometer_api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ceilometer,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ceilometer_api $p;done
logs_pod_ceilometer_central_ceilometer_central: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ceilometer,component=central" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ceilometer_central $p;done
logs_pod_ceilometer_collector_ceilometer_collector: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ceilometer,component=collector" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ceilometer_collector $p;done
logs_pod_ceilometer_compute_ceilometer_compute: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ceilometer,component=compute" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ceilometer_compute $p;done
logs_pod_ceilometer_notification_ceilometer_notification: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ceilometer,component=notification" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ceilometer_notification $p;done
logs_pod_ceph_mgr_ceph_mgr: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=mgr" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c ceph_mgr $p;done
logs_pod_ceph_mon_ceph_mon: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=mon" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c ceph_mon $p;done
logs_pod_ceph_operator_essvc: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=ceph-operator" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c essvc $p;done
logs_pod_ceph_osd_0_node_2_osd_create_pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd_create_pod $p;done
logs_pod_ceph_osd_10_node_1_osd_create_pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd_create_pod $p;done
logs_pod_ceph_osd_11_node_1_osd_create_pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd_create_pod $p;done
logs_pod_ceph_osd_1_node_2_osd_create_pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd_create_pod $p;done
logs_pod_ceph_osd_2_node_2_osd_create_pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd_create_pod $p;done
logs_pod_ceph_osd_3_node_2_osd_create_pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd_create_pod $p;done
logs_pod_ceph_osd_4_node_3_osd_create_pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd_create_pod $p;done
logs_pod_ceph_osd_5_node_3_osd_create_pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd_create_pod $p;done
logs_pod_ceph_osd_6_node_3_osd_create_pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd_create_pod $p;done
logs_pod_ceph_osd_7_node_3_osd_create_pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd_create_pod $p;done
logs_pod_ceph_osd_8_node_1_osd_create_pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd_create_pod $p;done
logs_pod_ceph_osd_9_node_1_osd_create_pod: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd_create_pod $p;done
logs_pod_ceph_osd_isolation_osd_auto_isolation: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c osd_auto_isolation $p;done
logs_pod_ceph_rbdmirror_ceph_rbdmirror: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=rbdmirror" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c ceph_rbdmirror $p;done
logs_pod_ceph_rgw_ceph_rgw: |-
  for p in $(kubectl -n ceph get po -owide -l "application=ceph,component=rgw" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ceph logs -c ceph_rgw $p;done
logs_pod_chartmuseum_chartmuseum: |-
  for p in $(kubectl -n openstack get po -owide -l "app=chartmuseum,release=chartmuseum,statefulset.kubernetes.io/pod-name=chartmuseum-0" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c chartmuseum $p;done
logs_pod_chrony_chrony: |-
  for p in $(kubectl -n openstack get po -owide -l "application=chrony,component=chrony" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c chrony $p;done
logs_pod_cinder_api_cinder_api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=cinder,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c cinder_api $p;done
logs_pod_cinder_dashboard_api_cinder_dashboard_api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=cinder,component=cinder-dashboard-api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c cinder_dashboard_api $p;done
logs_pod_cinder_dashboard_cinder_dashboard: |-
  for p in $(kubectl -n openstack get po -owide -l "application=cinder-dashboard,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c cinder_dashboard $p;done
logs_pod_cinder_scheduler_cinder_scheduler: |-
  for p in $(kubectl -n openstack get po -owide -l "application=cinder,component=scheduler" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c cinder_scheduler $p;done
logs_pod_cinder_volume_cinder_volume: |-
  for p in $(kubectl -n openstack get po -owide -l "application=cinder,component=volume" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c cinder_volume $p;done
logs_pod_cloud_product_operator_cloud_product_operator: |-
  for p in $(kubectl -n ems get po -owide -l "application=cloud-product-operator,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c cloud_product_operator $p;done
logs_pod_cluster_manager_cluster_manager: |-
  for p in $(kubectl -n eks-managed get po -owide -l "application=cluster-manager,component=operator" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c cluster_manager $p;done
logs_pod_coaster_all_coaster_api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=coaster,component=all,statefulset.kubernetes.io/pod-name=coaster-all-0" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c coaster_api $p;done
logs_pod_coaster_all_coaster_conductor: |-
  for p in $(kubectl -n openstack get po -owide -l "application=coaster,component=all,statefulset.kubernetes.io/pod-name=coaster-all-0" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c coaster_conductor $p;done
logs_pod_coaster_all_coaster_other: |-
  for p in $(kubectl -n openstack get po -owide -l "application=coaster,component=all,statefulset.kubernetes.io/pod-name=coaster-all-0" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c coaster_other $p;done
logs_pod_container_registry_dashboard_api_container_registry_dashboard_api: |-
  for p in $(kubectl -n container-registry get po -owide -l "application=container-registry-dashboard-api,component=dashboard-api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n container-registry logs -c container_registry_dashboard_api $p;done
logs_pod_container_registry_dashboard_container_registry_dashboard: |-
  for p in $(kubectl -n container-registry get po -owide -l "application=container-registry-dashboard,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n container-registry logs -c container_registry_dashboard $p;done
logs_pod_coredns_coredns: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-dns" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c coredns $p;done
logs_pod_cpconfig_operator_cpconfig_operator: |-
  for p in $(kubectl -n ems get po -owide -l "application=cpconfig-operator,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c cpconfig_operator $p;done
logs_pod_docker_registry_docker_registry: |-
  for p in $(kubectl -n openstack get po -owide -l "app=docker-registry,release=docker-registry,statefulset.kubernetes.io/pod-name=docker-registry-0" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c docker_registry $p;done
logs_pod_docker_registry_image_manager: |-
  for p in $(kubectl -n openstack get po -owide -l "app=docker-registry,release=docker-registry,statefulset.kubernetes.io/pod-name=docker-registry-0" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c image_manager $p;done
logs_pod_dozer_mistral_api_mistral_api: |-
  for p in $(kubectl -n openstack get po -owide -l "app=dozer-mistral-api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c mistral_api $p;done
logs_pod_dozer_mistral_server_mistral_server: |-
  for p in $(kubectl -n openstack get po -owide -l "app=dozer-mistral-server" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c mistral_server $p;done
logs_pod_dozer_st2actionrunner_st2actionrunner: |-
  for p in $(kubectl -n openstack get po -owide -l "app=dozer-st2actionrunner" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c st2actionrunner $p;done
logs_pod_dozer_st2api_st2api: |-
  for p in $(kubectl -n openstack get po -owide -l "app=dozer-st2api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c st2api $p;done
logs_pod_dozer_st2auth_st2auth: |-
  for p in $(kubectl -n openstack get po -owide -l "app=dozer-st2auth" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c st2auth $p;done
logs_pod_dozer_st2garbagecollector_st2garbagecollector: |-
  for p in $(kubectl -n openstack get po -owide -l "app=dozer-st2garbagecollector" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c st2garbagecollector $p;done
logs_pod_dozer_st2notifier_st2notifier: |-
  for p in $(kubectl -n openstack get po -owide -l "app=dozer-st2notifier" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c st2notifier $p;done
logs_pod_dozer_st2resultstracker_st2resultstracker: |-
  for p in $(kubectl -n openstack get po -owide -l "app=dozer-st2resultstracker" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c st2resultstracker $p;done
logs_pod_dozer_st2rulesengine_st2rulesengine: |-
  for p in $(kubectl -n openstack get po -owide -l "app=dozer-st2rulesengine" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c st2rulesengine $p;done
logs_pod_dozer_st2sensorcontainer_st2sensorcontainer: |-
  for p in $(kubectl -n openstack get po -owide -l "app=dozer-st2sensorcontainer" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c st2sensorcontainer $p;done
logs_pod_dozer_st2stream_st2stream: |-
  for p in $(kubectl -n openstack get po -owide -l "app=dozer-st2stream" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c st2stream $p;done
logs_pod_easystack_cache_api_easystack_cache_api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=easystack-cache-api,component=server" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c easystack_cache_api $p;done
logs_pod_easystack_cache_easystack_cache: |-
  for p in $(kubectl -n openstack get po -owide -l "app=easystack-cache" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c easystack_cache $p;done
logs_pod_easystack_dm_easystack_dm: |-
  for p in $(kubectl -n openstack get po -owide -l "app=easystack-dm" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c easystack_dm $p;done
logs_pod_easystack_hagent_api_easystack_hagent_api: |-
  for p in $(kubectl -n openstack get po -owide -l "app=easystack-hagent-api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c easystack_hagent_api $p;done
logs_pod_easystack_hagent_easystack_hagent: |-
  for p in $(kubectl -n openstack get po -owide -l "app=easystack-hagent" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c easystack_hagent $p;done
logs_pod_easystack_vmm_easystack_vmm: |-
  for p in $(kubectl -n openstack get po -owide -l "app=easystack-vmm" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c easystack_vmm $p;done
logs_pod_ecp_dashboard_api_ecp_dashboard_api: |-
  for p in $(kubectl -n ems get po -owide -l "application=ecp-dashboard-api,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c ecp_dashboard_api $p;done
logs_pod_ecp_dashboard_ecp_dashboard: |-
  for p in $(kubectl -n ems get po -owide -l "application=ecp-dashboard,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c ecp_dashboard $p;done
logs_pod_eks_managed_dashboard_api_eks_managed: |-
  for p in $(kubectl -n eks-managed get po -owide -l "application=eks-managed,component=dashboard-api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c eks_managed $p;done
logs_pod_eks_managed_dashboard_eks_managed_dashboard: |-
  for p in $(kubectl -n eks-managed get po -owide -l "application=eks-managed-dashboard,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c eks_managed_dashboard $p;done
logs_pod_eks_webhook_eks_webhook: |-
  for p in $(kubectl -n eks-managed get po -owide -l "application=eks-webhook,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c eks_webhook $p;done
logs_pod_emla_apiserver_emla_apiserver: |-
  for p in $(kubectl -n openstack get po -owide -l "app=emla-apiserver" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c emla_apiserver $p;done
logs_pod_ems_dashboard_api_ems_dashboard_api: |-
  for p in $(kubectl -n ems get po -owide -l "application=ems-dashboard-api,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c ems_dashboard_api $p;done
logs_pod_ems_dashboard_api_opa: |-
  for p in $(kubectl -n ems get po -owide -l "application=ems-dashboard-api,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c opa $p;done
logs_pod_esdm_api_esdm_api: |-
  for p in $(kubectl -n openstack get po -owide -l "app=esdm-api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c esdm_api $p;done
logs_pod_esguides_esguides: |-
  for p in $(kubectl -n openstack get po -owide -l "application=esguides,component=server" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c esguides $p;done
logs_pod_ess_automation_ess_automation: |-
  for p in $(kubectl -n openstack get po -owide -l "application=automation,component=ess-automation" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ess_automation $p;done
logs_pod_estack_hagent_dashboard_api_estack_hagent_dashboard_api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=estack-hagent,component=estack-hagent-dashboard-api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c estack_hagent_dashboard_api $p;done
logs_pod_estack_hagent_dashboard_estack_hagent_dashboard: |-
  for p in $(kubectl -n openstack get po -owide -l "application=estack-hagent-dashboard,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c estack_hagent_dashboard $p;done
logs_pod_fluentbit_fluentbit: |-
  for p in $(kubectl -n openstack get po -owide -l "application=fluentbit,component=daemon" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c fluentbit $p;done
logs_pod_fluentd_api_fluentd_api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=fluentd,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c fluentd_api $p;done
logs_pod_fluentd_fluentd: |-
  for p in $(kubectl -n openstack get po -owide -l "application=fluentd,component=internal,statefulset.kubernetes.io/pod-name=fluentd-2" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c fluentd $p;done
logs_pod_fluentd_httpd: |-
  for p in $(kubectl -n openstack get po -owide -l "application=fluentd,component=internal,statefulset.kubernetes.io/pod-name=fluentd-2" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c httpd $p;done
logs_pod_glance_api_glance_api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=glance,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c glance_api $p;done
logs_pod_glance_dashboard_api_glance_dashboard_api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=glance,component=glance-dashboard-api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c glance_dashboard_api $p;done
logs_pod_glance_dashboard_glance_dashboard: |-
  for p in $(kubectl -n openstack get po -owide -l "application=glance-dashboard,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c glance_dashboard $p;done
logs_pod_glance_registry_glance_registry: |-
  for p in $(kubectl -n openstack get po -owide -l "application=glance,component=registry" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c glance_registry $p;done
logs_pod_gnocchi_api_gnocchi_api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=gnocchi,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c gnocchi_api $p;done
logs_pod_gnocchi_metricd_gnocchi_metricd: |-
  for p in $(kubectl -n openstack get po -owide -l "application=gnocchi,component=metricd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c gnocchi_metricd $p;done
logs_pod_gnocchi_statsd_gnocchi_statsd: |-
  for p in $(kubectl -n openstack get po -owide -l "application=gnocchi,component=statsd" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c gnocchi_statsd $p;done
logs_pod_grafana_grafana: |-
  for p in $(kubectl -n openstack get po -owide -l "application=grafana,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c grafana $p;done
logs_pod_hagent_node_agent_hagent_node_agent: |-
  for p in $(kubectl -n openstack get po -owide -l "app=hagent-node-agent" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c hagent_node_agent $p;done
logs_pod_hagent_serve_heartbeat_hagent_serve_heartbeat: |-
  for p in $(kubectl -n openstack get po -owide -l "app=hagent-serve-heartbeat" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c hagent_serve_heartbeat $p;done
logs_pod_harbor_chartmuseum_chartmuseum: |-
  for p in $(kubectl -n container-registry get po -owide -l "app=harbor,chart=container-registry,component=chartmuseum,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-chartmuseum-0" --no-headers -o custom-columns=":metadata.name" );do kubectl -n container-registry logs -c chartmuseum $p;done
logs_pod_harbor_core_core: |-
  for p in $(kubectl -n container-registry get po -owide -l "application=harbor,component=core" --no-headers -o custom-columns=":metadata.name" );do kubectl -n container-registry logs -c core $p;done
logs_pod_harbor_database_database: |-
  for p in $(kubectl -n container-registry get po -owide -l "app=harbor,chart=container-registry,component=database,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-database-0" --no-headers -o custom-columns=":metadata.name" );do kubectl -n container-registry logs -c database $p;done
logs_pod_harbor_jobservice_jobservice: |-
  for p in $(kubectl -n container-registry get po -owide -l "app=harbor,chart=container-registry,component=jobservice,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-jobservice-0" --no-headers -o custom-columns=":metadata.name" );do kubectl -n container-registry logs -c jobservice $p;done
logs_pod_harbor_redis_redis: |-
  for p in $(kubectl -n container-registry get po -owide -l "app=harbor,chart=container-registry,component=redis,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-redis-0" --no-headers -o custom-columns=":metadata.name" );do kubectl -n container-registry logs -c redis $p;done
logs_pod_harbor_registry_registry: |-
  for p in $(kubectl -n container-registry get po -owide -l "app=harbor,chart=container-registry,component=registry,harbor-core=harbor-registry,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-registry-0" --no-headers -o custom-columns=":metadata.name" );do kubectl -n container-registry logs -c registry $p;done
logs_pod_harbor_registry_registryctl: |-
  for p in $(kubectl -n container-registry get po -owide -l "app=harbor,chart=container-registry,component=registry,harbor-core=harbor-registry,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-registry-0" --no-headers -o custom-columns=":metadata.name" );do kubectl -n container-registry logs -c registryctl $p;done
logs_pod_heapster_heapster: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=heapster" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c heapster $p;done
logs_pod_horizon_horizon: |-
  for p in $(kubectl -n openstack get po -owide -l "application=horizon,component=server" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c horizon $p;done
logs_pod_horizon_nginx: |-
  for p in $(kubectl -n openstack get po -owide -l "application=horizon,component=server" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nginx $p;done
logs_pod_iam_api_iam_api: |-
  for p in $(kubectl -n iam get po -owide -l "application=iam-api,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n iam logs -c iam_api $p;done
logs_pod_iam_dashboard_iam_dashboard: |-
  for p in $(kubectl -n iam get po -owide -l "application=iam-dashboard,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n iam logs -c iam_dashboard $p;done
logs_pod_iam_k8s_controller_iam_k8s_controller: |-
  for p in $(kubectl -n iam get po -owide -l "application=iam-k8s-controller,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n iam logs -c iam_k8s_controller $p;done
logs_pod_iam_saml_iam_saml: |-
  for p in $(kubectl -n iam get po -owide -l "application=iam-saml,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n iam logs -c iam_saml $p;done
logs_pod_ib_kubernetes_ib_kubernetes: |-
  for p in $(kubectl -n eks-managed get po -owide -l "application=ib-kubernetes,component=network" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c ib_kubernetes $p;done
logs_pod_ingress_api_ingress_api: |-
  for p in $(kubectl -n kube-system get po -owide -l "app=ingress-api,application=ingress,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c ingress_api $p;done
logs_pod_ingress_error_pages_ingress_error_pages: |-
  for p in $(kubectl -n kube-system get po -owide -l "application=ingress,component=error-pages" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c ingress_error_pages $p;done
logs_pod_k8s_device_plugin_k8s_device_plugin: |-
  for p in $(kubectl -n openstack get po -owide -l "app=k8s-device-plugin" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c k8s_device_plugin $p;done
logs_pod_k8s_keystone_auth_k8s_keystone_auth: |-
  for p in $(kubectl -n kube-system get po -owide -l "app=k8s-keystone-auth" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c k8s_keystone_auth $p;done
logs_pod_keepalived_keepalived: |-
  for p in $(kubectl -n openstack get po -owide -l "application=keepalived,component=server" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c keepalived $p;done
logs_pod_keystone_api_keystone_api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=keystone,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c keystone_api $p;done
logs_pod_kube-apiserver-node-1_kube_apiserver: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-apiserver,kubespray=v2" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube_apiserver $p;done
logs_pod_kube-apiserver-node-2_kube_apiserver: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-apiserver,kubespray=v2" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube_apiserver $p;done
logs_pod_kube-apiserver-node-3_kube_apiserver: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-apiserver,kubespray=v2" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube_apiserver $p;done
logs_pod_kube-controller-manager-node-1_kube_controller_manager: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-controller-manager" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube_controller_manager $p;done
logs_pod_kube-controller-manager-node-2_kube_controller_manager: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-controller-manager" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube_controller_manager $p;done
logs_pod_kube-controller-manager-node-3_kube_controller_manager: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-controller-manager" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube_controller_manager $p;done
logs_pod_kube-proxy-node-1_kube_proxy: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube_proxy $p;done
logs_pod_kube-proxy-node-2_kube_proxy: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube_proxy $p;done
logs_pod_kube-proxy-node-3_kube_proxy: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube_proxy $p;done
logs_pod_kube-proxy-node-4_kube_proxy: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube_proxy $p;done
logs_pod_kube-proxy-node-5_kube_proxy: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube_proxy $p;done
logs_pod_kube-proxy-node-6_kube_proxy: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube_proxy $p;done
logs_pod_kube-scheduler-node-1_kube_scheduler: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-scheduler" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube_scheduler $p;done
logs_pod_kube-scheduler-node-2_kube_scheduler: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-scheduler" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube_scheduler $p;done
logs_pod_kube-scheduler-node-3_kube_scheduler: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-scheduler" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube_scheduler $p;done
logs_pod_kube_flannel_install_cni: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=flannel,tier=node" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c install_cni $p;done
logs_pod_kube_flannel_kube_flannel: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=flannel,tier=node" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c kube_flannel $p;done
logs_pod_kube_multus_ds_kube_multus: |-
  for p in $(kubectl -n eks-managed get po -owide -l "app=multus,name=multus,tier=node" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c kube_multus $p;done
logs_pod_kube_ovn_cni_cni_server: |-
  for p in $(kubectl -n eks-managed get po -owide -l "application=ovn,component=daemon" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c cni_server $p;done
logs_pod_kube_ovn_controller_controller: |-
  for p in $(kubectl -n eks-managed get po -owide -l "application=ovn,component=controller" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c controller $p;done
logs_pod_kube_state_metrics_kube_state_metrics: |-
  for p in $(kubectl -n openstack get po -owide -l "application=kube-state-metrics,component=exporter" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c kube_state_metrics $p;done
logs_pod_libvirt_libvirt: |-
  for p in $(kubectl -n openstack get po -owide -l "application=libvirt,component=libvirt" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c libvirt $p;done
logs_pod_libvirt_libvirt_sync: |-
  for p in $(kubectl -n openstack get po -owide -l "application=libvirt,component=libvirt" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c libvirt_sync $p;done
logs_pod_logsidecar_injector_deploy_logsidecar_injector: |-
  for p in $(kubectl -n eks-managed get po -owide -l "logging.es.io/logsidecar-injector=logsidecar-injector-deploy" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c logsidecar_injector $p;done
logs_pod_mariadb_mariadb: |-
  for p in $(kubectl -n openstack get po -owide -l "application=mariadb,component=server,statefulset.kubernetes.io/pod-name=mariadb-2" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c mariadb $p;done
logs_pod_memcached_memcached: |-
  for p in $(kubectl -n openstack get po -owide -l "application=memcached,component=server" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c memcached $p;done
logs_pod_metrics_server_metrics_server: |-
  for p in $(kubectl -n kube-system get po -owide -l "app.kubernetes.io/name=metrics-server,version=v0.4.4" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c metrics_server $p;done
logs_pod_mongodb_mongodb: |-
  for p in $(kubectl -n openstack get po -owide -l "application=mongodb,component=server,statefulset.kubernetes.io/pod-name=mongodb-0" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c mongodb $p;done
logs_pod_nginx-proxy-node-4_nginx_proxy: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-nginx" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c nginx_proxy $p;done
logs_pod_nginx-proxy-node-5_nginx_proxy: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-nginx" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c nginx_proxy $p;done
logs_pod_nginx-proxy-node-6_nginx_proxy: |-
  for p in $(kubectl -n kube-system get po -owide -l "k8s-app=kube-nginx" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c nginx_proxy $p;done
logs_pod_node_exporter_event_monitor: |-
  for p in $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c event_monitor $p;done
logs_pod_node_exporter_ipmi_exporter: |-
  for p in $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ipmi_exporter $p;done
logs_pod_node_exporter_node_exporter: |-
  for p in $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c node_exporter $p;done
logs_pod_node_exporter_node_script_collector: |-
  for p in $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c node_script_collector $p;done
logs_pod_node_exporter_smartmon_collector: |-
  for p in $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c smartmon_collector $p;done
logs_pod_notification_center_configmap_reload: |-
  for p in $(kubectl -n openstack get po -owide -l "app=notification-center" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c configmap_reload $p;done
logs_pod_notification_center_notification_center: |-
  for p in $(kubectl -n openstack get po -owide -l "app=notification-center" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c notification_center $p;done
logs_pod_nova_api_metadata_nova_api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=nova,component=metadata" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nova_api $p;done
logs_pod_nova_api_osapi_nova_osapi: |-
  for p in $(kubectl -n openstack get po -owide -l "application=nova,component=os-api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nova_osapi $p;done
logs_pod_nova_compute_nova_compute: |-
  for p in $(kubectl -n openstack get po -owide -l "application=nova,component=compute" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nova_compute $p;done
logs_pod_nova_compute_nova_compute_sync: |-
  for p in $(kubectl -n openstack get po -owide -l "application=nova,component=compute" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nova_compute_sync $p;done
logs_pod_nova_conductor_nova_conductor: |-
  for p in $(kubectl -n openstack get po -owide -l "application=nova,component=conductor" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nova_conductor $p;done
logs_pod_nova_dashboard_api_nova_dashboard_api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=nova,component=nova-dashboard-api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nova_dashboard_api $p;done
logs_pod_nova_dashboard_nova_dashboard: |-
  for p in $(kubectl -n openstack get po -owide -l "application=nova-dashboard,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nova_dashboard $p;done
logs_pod_nova_maintenance_nova_maintenance: |-
  for p in $(kubectl -n openstack get po -owide -l "application=nova,component=nova-maintenance" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nova_maintenance $p;done
logs_pod_nova_novncproxy_nova_novncproxy: |-
  for p in $(kubectl -n openstack get po -owide -l "application=nova,component=novnc-proxy" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nova_novncproxy $p;done
logs_pod_nova_placement_api_nova_placement_api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=nova,component=placement" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nova_placement_api $p;done
logs_pod_nova_scheduler_nova_scheduler: |-
  for p in $(kubectl -n openstack get po -owide -l "application=nova,component=scheduler" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nova_scheduler $p;done
logs_pod_oath_gateway_oath_backend: |-
  for p in $(kubectl -n ems get po -owide -l "app=oath,component=gateway" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c oath_backend $p;done
logs_pod_oath_gateway_oathkeeper: |-
  for p in $(kubectl -n ems get po -owide -l "app=oath,component=gateway" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c oathkeeper $p;done
logs_pod_ory_hydra_hydra: |-
  for p in $(kubectl -n iam get po -owide -l "application=ory-hydra,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n iam logs -c hydra $p;done
logs_pod_ota_dashboard_ota_dashboard: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ota-dashboard,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ota_dashboard $p;done
logs_pod_ota_dota: |-
  for p in $(kubectl -n openstack get po -owide -l "application=app,component=dota,statefulset.kubernetes.io/pod-name=ota-0" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c dota $p;done
logs_pod_ota_openapi_nginx: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ota,component=openapi,statefulset.kubernetes.io/pod-name=ota-openapi-0" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c nginx $p;done
logs_pod_ota_openapi_openapi: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ota,component=openapi,statefulset.kubernetes.io/pod-name=ota-openapi-0" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c openapi $p;done
logs_pod_ovn_controller_ovn_controller: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-controller" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ovn_controller $p;done
logs_pod_ovn_northd_ovn_northd: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-northd,statefulset.kubernetes.io/pod-name=ovn-northd-2" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ovn_northd $p;done
logs_pod_ovn_ovsdb_nb_ovn_ovsdb_nb: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-nb,statefulset.kubernetes.io/pod-name=ovn-ovsdb-nb-2" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ovn_ovsdb_nb $p;done
logs_pod_ovn_ovsdb_nb_relay_ovn_ovsdb_nb_relay: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-nb-relay" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ovn_ovsdb_nb_relay $p;done
logs_pod_ovn_ovsdb_sb_leader_relay_ovn_ovsdb_sb_leader_relay: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-sb-leader-relay" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ovn_ovsdb_sb_leader_relay $p;done
logs_pod_ovn_ovsdb_sb_ovn_ovsdb_sb: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-sb,statefulset.kubernetes.io/pod-name=ovn-ovsdb-sb-2" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ovn_ovsdb_sb $p;done
logs_pod_ovn_ovsdb_sb_relay_ovn_ovsdb_sb_relay: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-sb-relay" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ovn_ovsdb_sb_relay $p;done
logs_pod_ovn_tool_ovn_tool: |-
  for p in $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-tool,statefulset.kubernetes.io/pod-name=ovn-tool-0" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c ovn_tool $p;done
logs_pod_ovn_webhook_ovn_webhook: |-
  for p in $(kubectl -n eks-managed get po -owide -l "application=ovn-webhook,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c ovn_webhook $p;done
logs_pod_peak_api_peak_api: |-
  for p in $(kubectl -n ems get po -owide -l "application=peak,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c peak_api $p;done
logs_pod_peak_cache_peak_cache: |-
  for p in $(kubectl -n ems get po -owide -l "application=peak,component=cache" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c peak_cache $p;done
logs_pod_postgresql_postgresql: |-
  for p in $(kubectl -n openstack get po -owide -l "application=postgresql,component=server,statefulset.kubernetes.io/pod-name=postgresql-0" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c postgresql $p;done
logs_pod_process_exporter_process_exporter: |-
  for p in $(kubectl -n openstack get po -owide -l "application=process_exporter,component=metrics" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c process_exporter $p;done
logs_pod_prometheus_ecms_config_reloader: |-
  for p in $(kubectl -n openstack get po -owide -l "app=prometheus,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=prometheus,app.kubernetes.io/version=2.26.0,operator.prometheus.io/name=ecms,operator.prometheus.io/shard=0,prometheus=ecms,statefulset.kubernetes.io/pod-name=prometheus-ecms-1" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c config_reloader $p;done
logs_pod_prometheus_ecms_prometheus: |-
  for p in $(kubectl -n openstack get po -owide -l "app=prometheus,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=prometheus,app.kubernetes.io/version=2.26.0,operator.prometheus.io/name=ecms,operator.prometheus.io/shard=0,prometheus=ecms,statefulset.kubernetes.io/pod-name=prometheus-ecms-1" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c prometheus $p;done
logs_pod_prometheus_ecms_thanos_sidecar: |-
  for p in $(kubectl -n openstack get po -owide -l "app=prometheus,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=prometheus,app.kubernetes.io/version=2.26.0,operator.prometheus.io/name=ecms,operator.prometheus.io/shard=0,prometheus=ecms,statefulset.kubernetes.io/pod-name=prometheus-ecms-1" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c thanos_sidecar $p;done
logs_pod_prometheus_mysql_exporter_mysql_exporter: |-
  for p in $(kubectl -n openstack get po -owide -l "application=mysql,component=exporter" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c mysql_exporter $p;done
logs_pod_prometheus_openstack_exporter_openstack_metrics_exporter: |-
  for p in $(kubectl -n openstack get po -owide -l "application=prometheus-openstack-exporter,component=exporter" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c openstack_metrics_exporter $p;done
logs_pod_prometheus_operator_prometheus_operator: |-
  for p in $(kubectl -n openstack get po -owide -l "app=prometheus-operator,release=prometheus" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c prometheus_operator $p;done
logs_pod_prometheus_polling_exporter_prometheus_polling_exporter: |-
  for p in $(kubectl -n openstack get po -owide -l "application=prometheus-polling-exporter,component=exporter" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c prometheus_polling_exporter $p;done
logs_pod_prometheus_rabbitmq_exporter_rabbitmq_exporter: |-
  for p in $(kubectl -n openstack get po -owide -l "application=rabbitmq,component=exporter" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c rabbitmq_exporter $p;done
logs_pod_proton_dashboard_api_proton_dashboard_api: |-
  for p in $(kubectl -n openstack get po -owide -l "application=proton_dashboard_api,component=dashboard_api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c proton_dashboard_api $p;done
logs_pod_proton_dashboard_proton_dashboard: |-
  for p in $(kubectl -n openstack get po -owide -l "application=proton-dashboard,component=dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c proton_dashboard $p;done
logs_pod_proton_maintenance_proton_maintenance: |-
  for p in $(kubectl -n openstack get po -owide -l "application=proton-maintenance,component=proton-maintenance" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c proton_maintenance $p;done
logs_pod_proton_ovn_gateway_monitor_agent_proton_ovn_gateway_monitor_agent: |-
  for p in $(kubectl -n openstack get po -owide -l "application=proton,component=proton-ovn-gateway-monitor-agent" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c proton_ovn_gateway_monitor_agent $p;done
logs_pod_proton_ovn_metadata_agent_proton_ovn_metadata_agent: |-
  for p in $(kubectl -n openstack get po -owide -l "application=proton,component=ovn-metadata-agent" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c proton_ovn_metadata_agent $p;done
logs_pod_proton_server_proton_server: |-
  for p in $(kubectl -n openstack get po -owide -l "application=proton,component=server" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c proton_server $p;done
logs_pod_rabbitmq_rabbitmq: |-
  for p in $(kubectl -n openstack get po -owide -l "application=rabbitmq,component=server,statefulset.kubernetes.io/pod-name=rabbitmq-2" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c rabbitmq $p;done
logs_pod_redis_redis: |-
  for p in $(kubectl -n openstack get po -owide -l "application=redis,component=server" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c redis $p;done
logs_pod_roller_dashboard_roller_dashboard: |-
  for p in $(kubectl -n openstack get po -owide -l "application=roller,component=roller-dashboard" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c roller_dashboard $p;done
logs_pod_secure_container_ecr_deploy_ecr_deploy: |-
  for p in $(kubectl -n eks-managed get po -owide -l "app=ecr-deploy,name=secure-container-ecr-deploy" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c ecr_deploy $p;done
logs_pod_sriov_network_config_daemon_sriov_cni: |-
  for p in $(kubectl -n eks-managed get po -owide -l "app=sriov-network-config-daemon,component=network,openshift.io/component=network,type=infra" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c sriov_cni $p;done
logs_pod_sriov_network_config_daemon_sriov_infiniband_cni: |-
  for p in $(kubectl -n eks-managed get po -owide -l "app=sriov-network-config-daemon,component=network,openshift.io/component=network,type=infra" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c sriov_infiniband_cni $p;done
logs_pod_sriov_network_config_daemon_sriov_network_config_daemon: |-
  for p in $(kubectl -n eks-managed get po -owide -l "app=sriov-network-config-daemon,component=network,openshift.io/component=network,type=infra" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c sriov_network_config_daemon $p;done
logs_pod_sriov_network_operator_sriov_operator: |-
  for p in $(kubectl -n eks-managed get po -owide -l "application=sriov-operator,component=sriovapp" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c sriov_operator $p;done
logs_pod_status_operator_status_operator: |-
  for p in $(kubectl -n ems get po -owide -l "application=status-operator,component=api" --no-headers -o custom-columns=":metadata.name" );do kubectl -n ems logs -c status_operator $p;done
logs_pod_thanos_query_thanos_query: |-
  for p in $(kubectl -n openstack get po -owide -l "application=prometheus,component=thanos-query" --no-headers -o custom-columns=":metadata.name" );do kubectl -n openstack logs -c thanos_query $p;done
logs_pod_tiller_deploy_tiller: |-
  for p in $(kubectl -n kube-system get po -owide -l "app=helm,name=tiller" --no-headers -o custom-columns=":metadata.name" );do kubectl -n kube-system logs -c tiller $p;done
logs_pod_whereabouts_whereabouts: |-
  for p in $(kubectl -n eks-managed get po -owide -l "app=whereabouts,name=whereabouts,tier=node" --no-headers -o custom-columns=":metadata.name" );do kubectl -n eks-managed logs -c whereabouts $p;done
tail_pod_alcubierre_dashboard_alcubierre_dashboard: |-
  kubectl -n alcubierre logs $(kubectl -n alcubierre get po -owide -l "application=alcubierre-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c alcubierre_dashboard
tail_pod_alcubierre_exporter_alcubierre_exporter: |-
  kubectl -n alcubierre logs $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c alcubierre_exporter
tail_pod_alcubierre_manager_alcubierre_manager: |-
  kubectl -n alcubierre logs $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manager" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c alcubierre_manager
tail_pod_alcubierre_manul_manul: |-
  kubectl -n alcubierre logs $(kubectl -n alcubierre get po -owide -l "application=alcubierre,component=manul" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c manul
tail_pod_alcubierre_target_node_1_alcubierre_target: |-
  kubectl -n alcubierre logs $(kubectl -n alcubierre get po -owide -l "app=alcubierre-target-node-1,application=alcubierre,component=target" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c alcubierre_target
tail_pod_alcubierre_target_node_2_alcubierre_target: |-
  kubectl -n alcubierre logs $(kubectl -n alcubierre get po -owide -l "app=alcubierre-target-node-2,application=alcubierre,component=target" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c alcubierre_target
tail_pod_alcubierre_target_node_3_alcubierre_target: |-
  kubectl -n alcubierre logs $(kubectl -n alcubierre get po -owide -l "app=alcubierre-target-node-3,application=alcubierre,component=target" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c alcubierre_target
tail_pod_alertmanager_ecms_alertmanager: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "alertmanager=ecms,app=alertmanager,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=alertmanager,app.kubernetes.io/version=v0.21.0,statefulset.kubernetes.io/pod-name=alertmanager-ecms-2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c alertmanager
tail_pod_alertmanager_ecms_config_reloader: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "alertmanager=ecms,app=alertmanager,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=alertmanager,app.kubernetes.io/version=v0.21.0,statefulset.kubernetes.io/pod-name=alertmanager-ecms-2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c config_reloader
tail_pod_aodh_api_aodh_api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=aodh,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c aodh_api
tail_pod_aodh_evaluator_aodh_evaluator: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=aodh,component=evaluator" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c aodh_evaluator
tail_pod_aodh_listener_aodh_listener: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=aodh,component=listener" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c aodh_listener
tail_pod_aodh_notifier_aodh_notifier: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=aodh,component=notifier" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c aodh_notifier
tail_pod_auto_upgrade_auto_upgrade: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "application=auto-upgrade,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c auto_upgrade
tail_pod_automation_operators_automation_operators: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=automation,component=automation-operators" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c automation_operators
tail_pod_blackbox_exporter_blackbox_exporter: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=blackbox,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c blackbox_exporter
tail_pod_busybox_openstack_busybox_openstack: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=busybox,component=busybox" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c busybox_openstack
tail_pod_capsule_controller_manager_manager: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "application=capsule,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c manager
tail_pod_ceilometer_api_ceilometer_api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ceilometer,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ceilometer_api
tail_pod_ceilometer_central_ceilometer_central: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ceilometer,component=central" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ceilometer_central
tail_pod_ceilometer_collector_ceilometer_collector: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ceilometer,component=collector" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ceilometer_collector
tail_pod_ceilometer_compute_ceilometer_compute: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ceilometer,component=compute" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ceilometer_compute
tail_pod_ceilometer_notification_ceilometer_notification: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ceilometer,component=notification" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ceilometer_notification
tail_pod_ceph_mgr_ceph_mgr: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=mgr" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ceph_mgr
tail_pod_ceph_mon_ceph_mon: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=mon" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ceph_mon
tail_pod_ceph_operator_essvc: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=ceph-operator" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c essvc
tail_pod_ceph_osd_0_node_2_osd_create_pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd_create_pod
tail_pod_ceph_osd_10_node_1_osd_create_pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd_create_pod
tail_pod_ceph_osd_11_node_1_osd_create_pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd_create_pod
tail_pod_ceph_osd_1_node_2_osd_create_pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd_create_pod
tail_pod_ceph_osd_2_node_2_osd_create_pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd_create_pod
tail_pod_ceph_osd_3_node_2_osd_create_pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd_create_pod
tail_pod_ceph_osd_4_node_3_osd_create_pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd_create_pod
tail_pod_ceph_osd_5_node_3_osd_create_pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd_create_pod
tail_pod_ceph_osd_6_node_3_osd_create_pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd_create_pod
tail_pod_ceph_osd_7_node_3_osd_create_pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd_create_pod
tail_pod_ceph_osd_8_node_1_osd_create_pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd_create_pod
tail_pod_ceph_osd_9_node_1_osd_create_pod: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd_create_pod
tail_pod_ceph_osd_isolation_osd_auto_isolation: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=osd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c osd_auto_isolation
tail_pod_ceph_rbdmirror_ceph_rbdmirror: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=rbdmirror" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ceph_rbdmirror
tail_pod_ceph_rgw_ceph_rgw: |-
  kubectl -n ceph logs $(kubectl -n ceph get po -owide -l "application=ceph,component=rgw" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ceph_rgw
tail_pod_chartmuseum_chartmuseum: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=chartmuseum,release=chartmuseum,statefulset.kubernetes.io/pod-name=chartmuseum-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c chartmuseum
tail_pod_chrony_chrony: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=chrony,component=chrony" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c chrony
tail_pod_cinder_api_cinder_api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=cinder,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c cinder_api
tail_pod_cinder_dashboard_api_cinder_dashboard_api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=cinder,component=cinder-dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c cinder_dashboard_api
tail_pod_cinder_dashboard_cinder_dashboard: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=cinder-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c cinder_dashboard
tail_pod_cinder_scheduler_cinder_scheduler: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=cinder,component=scheduler" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c cinder_scheduler
tail_pod_cinder_volume_cinder_volume: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=cinder,component=volume" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c cinder_volume
tail_pod_cloud_product_operator_cloud_product_operator: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "application=cloud-product-operator,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c cloud_product_operator
tail_pod_cluster_manager_cluster_manager: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "application=cluster-manager,component=operator" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c cluster_manager
tail_pod_coaster_all_coaster_api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=coaster,component=all,statefulset.kubernetes.io/pod-name=coaster-all-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c coaster_api
tail_pod_coaster_all_coaster_conductor: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=coaster,component=all,statefulset.kubernetes.io/pod-name=coaster-all-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c coaster_conductor
tail_pod_coaster_all_coaster_other: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=coaster,component=all,statefulset.kubernetes.io/pod-name=coaster-all-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c coaster_other
tail_pod_container_registry_dashboard_api_container_registry_dashboard_api: |-
  kubectl -n container-registry logs $(kubectl -n container-registry get po -owide -l "application=container-registry-dashboard-api,component=dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c container_registry_dashboard_api
tail_pod_container_registry_dashboard_container_registry_dashboard: |-
  kubectl -n container-registry logs $(kubectl -n container-registry get po -owide -l "application=container-registry-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c container_registry_dashboard
tail_pod_coredns_coredns: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-dns" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c coredns
tail_pod_cpconfig_operator_cpconfig_operator: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "application=cpconfig-operator,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c cpconfig_operator
tail_pod_docker_registry_docker_registry: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=docker-registry,release=docker-registry,statefulset.kubernetes.io/pod-name=docker-registry-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c docker_registry
tail_pod_docker_registry_image_manager: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=docker-registry,release=docker-registry,statefulset.kubernetes.io/pod-name=docker-registry-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c image_manager
tail_pod_dozer_mistral_api_mistral_api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=dozer-mistral-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c mistral_api
tail_pod_dozer_mistral_server_mistral_server: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=dozer-mistral-server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c mistral_server
tail_pod_dozer_st2actionrunner_st2actionrunner: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=dozer-st2actionrunner" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c st2actionrunner
tail_pod_dozer_st2api_st2api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=dozer-st2api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c st2api
tail_pod_dozer_st2auth_st2auth: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=dozer-st2auth" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c st2auth
tail_pod_dozer_st2garbagecollector_st2garbagecollector: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=dozer-st2garbagecollector" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c st2garbagecollector
tail_pod_dozer_st2notifier_st2notifier: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=dozer-st2notifier" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c st2notifier
tail_pod_dozer_st2resultstracker_st2resultstracker: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=dozer-st2resultstracker" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c st2resultstracker
tail_pod_dozer_st2rulesengine_st2rulesengine: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=dozer-st2rulesengine" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c st2rulesengine
tail_pod_dozer_st2sensorcontainer_st2sensorcontainer: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=dozer-st2sensorcontainer" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c st2sensorcontainer
tail_pod_dozer_st2stream_st2stream: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=dozer-st2stream" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c st2stream
tail_pod_easystack_cache_api_easystack_cache_api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=easystack-cache-api,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c easystack_cache_api
tail_pod_easystack_cache_easystack_cache: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=easystack-cache" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c easystack_cache
tail_pod_easystack_dm_easystack_dm: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=easystack-dm" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c easystack_dm
tail_pod_easystack_hagent_api_easystack_hagent_api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=easystack-hagent-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c easystack_hagent_api
tail_pod_easystack_hagent_easystack_hagent: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=easystack-hagent" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c easystack_hagent
tail_pod_easystack_vmm_easystack_vmm: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=easystack-vmm" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c easystack_vmm
tail_pod_ecp_dashboard_api_ecp_dashboard_api: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "application=ecp-dashboard-api,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ecp_dashboard_api
tail_pod_ecp_dashboard_ecp_dashboard: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "application=ecp-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ecp_dashboard
tail_pod_eks_managed_dashboard_api_eks_managed: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "application=eks-managed,component=dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c eks_managed
tail_pod_eks_managed_dashboard_eks_managed_dashboard: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "application=eks-managed-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c eks_managed_dashboard
tail_pod_eks_webhook_eks_webhook: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "application=eks-webhook,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c eks_webhook
tail_pod_emla_apiserver_emla_apiserver: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=emla-apiserver" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c emla_apiserver
tail_pod_ems_dashboard_api_ems_dashboard_api: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "application=ems-dashboard-api,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ems_dashboard_api
tail_pod_ems_dashboard_api_opa: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "application=ems-dashboard-api,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c opa
tail_pod_esdm_api_esdm_api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=esdm-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c esdm_api
tail_pod_esguides_esguides: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=esguides,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c esguides
tail_pod_ess_automation_ess_automation: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=automation,component=ess-automation" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ess_automation
tail_pod_estack_hagent_dashboard_api_estack_hagent_dashboard_api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=estack-hagent,component=estack-hagent-dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c estack_hagent_dashboard_api
tail_pod_estack_hagent_dashboard_estack_hagent_dashboard: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=estack-hagent-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c estack_hagent_dashboard
tail_pod_fluentbit_fluentbit: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=fluentbit,component=daemon" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c fluentbit
tail_pod_fluentd_api_fluentd_api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=fluentd,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c fluentd_api
tail_pod_fluentd_fluentd: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=fluentd,component=internal,statefulset.kubernetes.io/pod-name=fluentd-2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c fluentd
tail_pod_fluentd_httpd: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=fluentd,component=internal,statefulset.kubernetes.io/pod-name=fluentd-2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c httpd
tail_pod_glance_api_glance_api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=glance,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c glance_api
tail_pod_glance_dashboard_api_glance_dashboard_api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=glance,component=glance-dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c glance_dashboard_api
tail_pod_glance_dashboard_glance_dashboard: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=glance-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c glance_dashboard
tail_pod_glance_registry_glance_registry: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=glance,component=registry" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c glance_registry
tail_pod_gnocchi_api_gnocchi_api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=gnocchi,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c gnocchi_api
tail_pod_gnocchi_metricd_gnocchi_metricd: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=gnocchi,component=metricd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c gnocchi_metricd
tail_pod_gnocchi_statsd_gnocchi_statsd: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=gnocchi,component=statsd" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c gnocchi_statsd
tail_pod_grafana_grafana: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=grafana,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c grafana
tail_pod_hagent_node_agent_hagent_node_agent: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=hagent-node-agent" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c hagent_node_agent
tail_pod_hagent_serve_heartbeat_hagent_serve_heartbeat: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=hagent-serve-heartbeat" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c hagent_serve_heartbeat
tail_pod_harbor_chartmuseum_chartmuseum: |-
  kubectl -n container-registry logs $(kubectl -n container-registry get po -owide -l "app=harbor,chart=container-registry,component=chartmuseum,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-chartmuseum-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c chartmuseum
tail_pod_harbor_core_core: |-
  kubectl -n container-registry logs $(kubectl -n container-registry get po -owide -l "application=harbor,component=core" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c core
tail_pod_harbor_database_database: |-
  kubectl -n container-registry logs $(kubectl -n container-registry get po -owide -l "app=harbor,chart=container-registry,component=database,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-database-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c database
tail_pod_harbor_jobservice_jobservice: |-
  kubectl -n container-registry logs $(kubectl -n container-registry get po -owide -l "app=harbor,chart=container-registry,component=jobservice,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-jobservice-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c jobservice
tail_pod_harbor_redis_redis: |-
  kubectl -n container-registry logs $(kubectl -n container-registry get po -owide -l "app=harbor,chart=container-registry,component=redis,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-redis-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c redis
tail_pod_harbor_registry_registry: |-
  kubectl -n container-registry logs $(kubectl -n container-registry get po -owide -l "app=harbor,chart=container-registry,component=registry,harbor-core=harbor-registry,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-registry-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c registry
tail_pod_harbor_registry_registryctl: |-
  kubectl -n container-registry logs $(kubectl -n container-registry get po -owide -l "app=harbor,chart=container-registry,component=registry,harbor-core=harbor-registry,heritage=Tiller,release=container-registry,statefulset.kubernetes.io/pod-name=harbor-registry-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c registryctl
tail_pod_heapster_heapster: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=heapster" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c heapster
tail_pod_horizon_horizon: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=horizon,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c horizon
tail_pod_horizon_nginx: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=horizon,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nginx
tail_pod_iam_api_iam_api: |-
  kubectl -n iam logs $(kubectl -n iam get po -owide -l "application=iam-api,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c iam_api
tail_pod_iam_dashboard_iam_dashboard: |-
  kubectl -n iam logs $(kubectl -n iam get po -owide -l "application=iam-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c iam_dashboard
tail_pod_iam_k8s_controller_iam_k8s_controller: |-
  kubectl -n iam logs $(kubectl -n iam get po -owide -l "application=iam-k8s-controller,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c iam_k8s_controller
tail_pod_iam_saml_iam_saml: |-
  kubectl -n iam logs $(kubectl -n iam get po -owide -l "application=iam-saml,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c iam_saml
tail_pod_ib_kubernetes_ib_kubernetes: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "application=ib-kubernetes,component=network" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ib_kubernetes
tail_pod_ingress_api_ingress_api: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "app=ingress-api,application=ingress,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ingress_api
tail_pod_ingress_error_pages_ingress_error_pages: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "application=ingress,component=error-pages" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ingress_error_pages
tail_pod_k8s_device_plugin_k8s_device_plugin: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=k8s-device-plugin" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c k8s_device_plugin
tail_pod_k8s_keystone_auth_k8s_keystone_auth: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "app=k8s-keystone-auth" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c k8s_keystone_auth
tail_pod_keepalived_keepalived: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=keepalived,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c keepalived
tail_pod_keystone_api_keystone_api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=keystone,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c keystone_api
tail_pod_kube-apiserver-node-1_kube_apiserver: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-apiserver,kubespray=v2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube_apiserver
tail_pod_kube-apiserver-node-2_kube_apiserver: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-apiserver,kubespray=v2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube_apiserver
tail_pod_kube-apiserver-node-3_kube_apiserver: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-apiserver,kubespray=v2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube_apiserver
tail_pod_kube-controller-manager-node-1_kube_controller_manager: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-controller-manager" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube_controller_manager
tail_pod_kube-controller-manager-node-2_kube_controller_manager: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-controller-manager" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube_controller_manager
tail_pod_kube-controller-manager-node-3_kube_controller_manager: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-controller-manager" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube_controller_manager
tail_pod_kube-proxy-node-1_kube_proxy: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube_proxy
tail_pod_kube-proxy-node-2_kube_proxy: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube_proxy
tail_pod_kube-proxy-node-3_kube_proxy: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube_proxy
tail_pod_kube-proxy-node-4_kube_proxy: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube_proxy
tail_pod_kube-proxy-node-5_kube_proxy: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube_proxy
tail_pod_kube-proxy-node-6_kube_proxy: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube_proxy
tail_pod_kube-scheduler-node-1_kube_scheduler: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-scheduler" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube_scheduler
tail_pod_kube-scheduler-node-2_kube_scheduler: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-scheduler" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube_scheduler
tail_pod_kube-scheduler-node-3_kube_scheduler: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-scheduler" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube_scheduler
tail_pod_kube_flannel_install_cni: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=flannel,tier=node" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c install_cni
tail_pod_kube_flannel_kube_flannel: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=flannel,tier=node" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube_flannel
tail_pod_kube_multus_ds_kube_multus: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "app=multus,name=multus,tier=node" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube_multus
tail_pod_kube_ovn_cni_cni_server: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "application=ovn,component=daemon" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c cni_server
tail_pod_kube_ovn_controller_controller: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "application=ovn,component=controller" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c controller
tail_pod_kube_state_metrics_kube_state_metrics: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=kube-state-metrics,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c kube_state_metrics
tail_pod_libvirt_libvirt: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=libvirt,component=libvirt" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c libvirt
tail_pod_libvirt_libvirt_sync: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=libvirt,component=libvirt" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c libvirt_sync
tail_pod_logsidecar_injector_deploy_logsidecar_injector: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "logging.es.io/logsidecar-injector=logsidecar-injector-deploy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c logsidecar_injector
tail_pod_mariadb_mariadb: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=mariadb,component=server,statefulset.kubernetes.io/pod-name=mariadb-2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c mariadb
tail_pod_memcached_memcached: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=memcached,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c memcached
tail_pod_metrics_server_metrics_server: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "app.kubernetes.io/name=metrics-server,version=v0.4.4" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c metrics_server
tail_pod_mongodb_mongodb: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=mongodb,component=server,statefulset.kubernetes.io/pod-name=mongodb-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c mongodb
tail_pod_nginx-proxy-node-4_nginx_proxy: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-nginx" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nginx_proxy
tail_pod_nginx-proxy-node-5_nginx_proxy: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-nginx" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nginx_proxy
tail_pod_nginx-proxy-node-6_nginx_proxy: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "k8s-app=kube-nginx" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nginx_proxy
tail_pod_node_exporter_event_monitor: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c event_monitor
tail_pod_node_exporter_ipmi_exporter: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ipmi_exporter
tail_pod_node_exporter_node_exporter: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c node_exporter
tail_pod_node_exporter_node_script_collector: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c node_script_collector
tail_pod_node_exporter_smartmon_collector: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=node_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c smartmon_collector
tail_pod_notification_center_configmap_reload: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=notification-center" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c configmap_reload
tail_pod_notification_center_notification_center: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=notification-center" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c notification_center
tail_pod_nova_api_metadata_nova_api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=nova,component=metadata" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nova_api
tail_pod_nova_api_osapi_nova_osapi: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=nova,component=os-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nova_osapi
tail_pod_nova_compute_nova_compute: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=nova,component=compute" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nova_compute
tail_pod_nova_compute_nova_compute_sync: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=nova,component=compute" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nova_compute_sync
tail_pod_nova_conductor_nova_conductor: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=nova,component=conductor" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nova_conductor
tail_pod_nova_dashboard_api_nova_dashboard_api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=nova,component=nova-dashboard-api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nova_dashboard_api
tail_pod_nova_dashboard_nova_dashboard: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=nova-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nova_dashboard
tail_pod_nova_maintenance_nova_maintenance: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=nova,component=nova-maintenance" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nova_maintenance
tail_pod_nova_novncproxy_nova_novncproxy: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=nova,component=novnc-proxy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nova_novncproxy
tail_pod_nova_placement_api_nova_placement_api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=nova,component=placement" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nova_placement_api
tail_pod_nova_scheduler_nova_scheduler: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=nova,component=scheduler" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nova_scheduler
tail_pod_oath_gateway_oath_backend: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "app=oath,component=gateway" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c oath_backend
tail_pod_oath_gateway_oathkeeper: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "app=oath,component=gateway" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c oathkeeper
tail_pod_ory_hydra_hydra: |-
  kubectl -n iam logs $(kubectl -n iam get po -owide -l "application=ory-hydra,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c hydra
tail_pod_ota_dashboard_ota_dashboard: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ota-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ota_dashboard
tail_pod_ota_dota: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=app,component=dota,statefulset.kubernetes.io/pod-name=ota-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c dota
tail_pod_ota_openapi_nginx: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ota,component=openapi,statefulset.kubernetes.io/pod-name=ota-openapi-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c nginx
tail_pod_ota_openapi_openapi: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ota,component=openapi,statefulset.kubernetes.io/pod-name=ota-openapi-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c openapi
tail_pod_ovn_controller_ovn_controller: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-controller" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ovn_controller
tail_pod_ovn_northd_ovn_northd: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-northd,statefulset.kubernetes.io/pod-name=ovn-northd-2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ovn_northd
tail_pod_ovn_ovsdb_nb_ovn_ovsdb_nb: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-nb,statefulset.kubernetes.io/pod-name=ovn-ovsdb-nb-2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ovn_ovsdb_nb
tail_pod_ovn_ovsdb_nb_relay_ovn_ovsdb_nb_relay: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-nb-relay" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ovn_ovsdb_nb_relay
tail_pod_ovn_ovsdb_sb_leader_relay_ovn_ovsdb_sb_leader_relay: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-sb-leader-relay" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ovn_ovsdb_sb_leader_relay
tail_pod_ovn_ovsdb_sb_ovn_ovsdb_sb: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-sb,statefulset.kubernetes.io/pod-name=ovn-ovsdb-sb-2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ovn_ovsdb_sb
tail_pod_ovn_ovsdb_sb_relay_ovn_ovsdb_sb_relay: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-ovsdb-sb-relay" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ovn_ovsdb_sb_relay
tail_pod_ovn_tool_ovn_tool: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=ovn,component=ovn-tool,statefulset.kubernetes.io/pod-name=ovn-tool-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ovn_tool
tail_pod_ovn_webhook_ovn_webhook: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "application=ovn-webhook,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ovn_webhook
tail_pod_peak_api_peak_api: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "application=peak,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c peak_api
tail_pod_peak_cache_peak_cache: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "application=peak,component=cache" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c peak_cache
tail_pod_postgresql_postgresql: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=postgresql,component=server,statefulset.kubernetes.io/pod-name=postgresql-0" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c postgresql
tail_pod_process_exporter_process_exporter: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=process_exporter,component=metrics" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c process_exporter
tail_pod_prometheus_ecms_config_reloader: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=prometheus,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=prometheus,app.kubernetes.io/version=2.26.0,operator.prometheus.io/name=ecms,operator.prometheus.io/shard=0,prometheus=ecms,statefulset.kubernetes.io/pod-name=prometheus-ecms-1" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c config_reloader
tail_pod_prometheus_ecms_prometheus: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=prometheus,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=prometheus,app.kubernetes.io/version=2.26.0,operator.prometheus.io/name=ecms,operator.prometheus.io/shard=0,prometheus=ecms,statefulset.kubernetes.io/pod-name=prometheus-ecms-1" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c prometheus
tail_pod_prometheus_ecms_thanos_sidecar: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=prometheus,app.kubernetes.io/instance=ecms,app.kubernetes.io/managed-by=prometheus-operator,app.kubernetes.io/name=prometheus,app.kubernetes.io/version=2.26.0,operator.prometheus.io/name=ecms,operator.prometheus.io/shard=0,prometheus=ecms,statefulset.kubernetes.io/pod-name=prometheus-ecms-1" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c thanos_sidecar
tail_pod_prometheus_mysql_exporter_mysql_exporter: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=mysql,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c mysql_exporter
tail_pod_prometheus_openstack_exporter_openstack_metrics_exporter: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=prometheus-openstack-exporter,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c openstack_metrics_exporter
tail_pod_prometheus_operator_prometheus_operator: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "app=prometheus-operator,release=prometheus" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c prometheus_operator
tail_pod_prometheus_polling_exporter_prometheus_polling_exporter: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=prometheus-polling-exporter,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c prometheus_polling_exporter
tail_pod_prometheus_rabbitmq_exporter_rabbitmq_exporter: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=rabbitmq,component=exporter" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c rabbitmq_exporter
tail_pod_proton_dashboard_api_proton_dashboard_api: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=proton_dashboard_api,component=dashboard_api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c proton_dashboard_api
tail_pod_proton_dashboard_proton_dashboard: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=proton-dashboard,component=dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c proton_dashboard
tail_pod_proton_maintenance_proton_maintenance: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=proton-maintenance,component=proton-maintenance" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c proton_maintenance
tail_pod_proton_ovn_gateway_monitor_agent_proton_ovn_gateway_monitor_agent: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=proton,component=proton-ovn-gateway-monitor-agent" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c proton_ovn_gateway_monitor_agent
tail_pod_proton_ovn_metadata_agent_proton_ovn_metadata_agent: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=proton,component=ovn-metadata-agent" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c proton_ovn_metadata_agent
tail_pod_proton_server_proton_server: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=proton,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c proton_server
tail_pod_rabbitmq_rabbitmq: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=rabbitmq,component=server,statefulset.kubernetes.io/pod-name=rabbitmq-2" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c rabbitmq
tail_pod_redis_redis: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=redis,component=server" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c redis
tail_pod_roller_dashboard_roller_dashboard: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=roller,component=roller-dashboard" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c roller_dashboard
tail_pod_secure_container_ecr_deploy_ecr_deploy: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "app=ecr-deploy,name=secure-container-ecr-deploy" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c ecr_deploy
tail_pod_sriov_network_config_daemon_sriov_cni: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "app=sriov-network-config-daemon,component=network,openshift.io/component=network,type=infra" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c sriov_cni
tail_pod_sriov_network_config_daemon_sriov_infiniband_cni: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "app=sriov-network-config-daemon,component=network,openshift.io/component=network,type=infra" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c sriov_infiniband_cni
tail_pod_sriov_network_config_daemon_sriov_network_config_daemon: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "app=sriov-network-config-daemon,component=network,openshift.io/component=network,type=infra" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c sriov_network_config_daemon
tail_pod_sriov_network_operator_sriov_operator: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "application=sriov-operator,component=sriovapp" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c sriov_operator
tail_pod_status_operator_status_operator: |-
  kubectl -n ems logs $(kubectl -n ems get po -owide -l "application=status-operator,component=api" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c status_operator
tail_pod_thanos_query_thanos_query: |-
  kubectl -n openstack logs $(kubectl -n openstack get po -owide -l "application=prometheus,component=thanos-query" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c thanos_query
tail_pod_tiller_deploy_tiller: |-
  kubectl -n kube-system logs $(kubectl -n kube-system get po -owide -l "app=helm,name=tiller" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c tiller
tail_pod_whereabouts_whereabouts: |-
  kubectl -n eks-managed logs $(kubectl -n eks-managed get po -owide -l "app=whereabouts,name=whereabouts,tier=node" --no-headers -o jsonpath="{.items[$A].metadata.name}" ) -f --tail 20 -c whereabouts
