# coding: utf-8

"""
    fclipboard provider API

    The provider API allows you to subscribe to events that happen in the system.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from provider.clients.v1.models.parameter import Parameter
from typing import Optional, Set
from typing_extensions import Self

class Entry(BaseModel):
    """
    Entry
    """ # noqa: E501
    id: Optional[StrictInt] = None
    uuid: Optional[StrictStr] = None
    name: Optional[StrictStr] = Field(default=None, description="The name of the entry")
    content: Optional[StrictStr] = Field(default=None, description="The content of the entry")
    category: Optional[StrictStr] = Field(default=None, description="The category of the entry")
    counter: Optional[StrictInt] = Field(default=None, description="The counter of the entry")
    version: Optional[StrictInt] = None
    parameters: Optional[List[Parameter]] = None
    deleted: Optional[StrictBool] = Field(default=None, description="Whether the entry is deleted")
    __properties: ClassVar[List[str]] = ["id", "uuid", "name", "content", "category", "counter", "version", "parameters", "deleted"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Entry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item in self.parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['parameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Entry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "uuid": obj.get("uuid"),
            "name": obj.get("name"),
            "content": obj.get("content"),
            "category": obj.get("category"),
            "counter": obj.get("counter"),
            "version": obj.get("version"),
            "parameters": [Parameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "deleted": obj.get("deleted")
        })
        return _obj


